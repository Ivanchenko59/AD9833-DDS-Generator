
DDS_AD9833.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003020  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  080031c0  080031c0  000131c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a10  08003a10  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003a10  08003a10  00013a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a18  08003a18  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a18  08003a18  00013a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000078  08003a98  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08003a98  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010636  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a2  00000000  00000000  000306de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00032a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  000336c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175bf  00000000  00000000  000341e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ec1  00000000  00000000  0004b79f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d6d5  00000000  00000000  0005c660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9d35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a8  00000000  00000000  000e9d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080031a8 	.word	0x080031a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080031a8 	.word	0x080031a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 030c 	add.w	r3, r7, #12
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_GPIO_Init+0xb8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a26      	ldr	r2, [pc, #152]	; (8000630 <MX_GPIO_Init+0xb8>)
 8000598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_GPIO_Init+0xb8>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_GPIO_Init+0xb8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <MX_GPIO_Init+0xb8>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_GPIO_Init+0xb8>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	4b19      	ldr	r3, [pc, #100]	; (8000630 <MX_GPIO_Init+0xb8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a18      	ldr	r2, [pc, #96]	; (8000630 <MX_GPIO_Init+0xb8>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <MX_GPIO_Init+0xb8>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_CS_Pin|ST7735_RST_Pin|ST7735_DC_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80005e8:	4812      	ldr	r0, [pc, #72]	; (8000634 <MX_GPIO_Init+0xbc>)
 80005ea:	f000 fe35 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80005ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	480d      	ldr	r0, [pc, #52]	; (8000638 <MX_GPIO_Init+0xc0>)
 8000604:	f000 fca4 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin|ST7735_RST_Pin|ST7735_DC_Pin;
 8000608:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800060c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4619      	mov	r1, r3
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_GPIO_Init+0xbc>)
 8000622:	f000 fc95 	bl	8000f50 <HAL_GPIO_Init>

}
 8000626:	bf00      	nop
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40020400 	.word	0x40020400
 8000638:	40020000 	.word	0x40020000

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fb09 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f849 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f7ff ff95 	bl	8000578 <MX_GPIO_Init>
  MX_SPI1_Init();
 800064e:	f000 f8b5 	bl	80007bc <MX_SPI1_Init>
  MX_SPI2_Init();
 8000652:	f000 f8e9 	bl	8000828 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000656:	f000 fa35 	bl	8000ac4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 800065a:	f001 ffe3 	bl	8002624 <ST7735_Init>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800065e:	213c      	movs	r1, #60	; 0x3c
 8000660:	4818      	ldr	r0, [pc, #96]	; (80006c4 <main+0x88>)
 8000662:	f001 fd5d 	bl	8002120 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ST7735_FillScreen(ST7735_BLACK);
 8000666:	2000      	movs	r0, #0
 8000668:	f002 f92c 	bl	80028c4 <ST7735_FillScreen>

  while (1)
  {

	  int16_t Enc_Counter = TIM1->CNT;
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <main+0x8c>)
 800066e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000670:	80fb      	strh	r3, [r7, #6]

	  sprintf(Str_Buffer, "%d", Enc_Counter);
 8000672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000676:	461a      	mov	r2, r3
 8000678:	4914      	ldr	r1, [pc, #80]	; (80006cc <main+0x90>)
 800067a:	4815      	ldr	r0, [pc, #84]	; (80006d0 <main+0x94>)
 800067c:	f002 f966 	bl	800294c <siprintf>
	  ST7735_WriteString(50, 50, Str_Buffer, Font_7x10, ST7735_WHITE, ST7735_GREY);
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <main+0x98>)
 8000682:	f247 32ae 	movw	r2, #29614	; 0x73ae
 8000686:	9202      	str	r2, [sp, #8]
 8000688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800068c:	9201      	str	r2, [sp, #4]
 800068e:	685a      	ldr	r2, [r3, #4]
 8000690:	9200      	str	r2, [sp, #0]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <main+0x94>)
 8000696:	2132      	movs	r1, #50	; 0x32
 8000698:	2032      	movs	r0, #50	; 0x32
 800069a:	f002 f854 	bl	8002746 <ST7735_WriteString>
	  ST7735_WriteString(0, 0, "ABOBA jqwertyuiop[asdfghjklzxcvbnm", Font_7x10, ST7735_RED, ST7735_GREY);
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <main+0x98>)
 80006a0:	f247 32ae 	movw	r2, #29614	; 0x73ae
 80006a4:	9202      	str	r2, [sp, #8]
 80006a6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80006aa:	9201      	str	r2, [sp, #4]
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	9200      	str	r2, [sp, #0]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a09      	ldr	r2, [pc, #36]	; (80006d8 <main+0x9c>)
 80006b4:	2100      	movs	r1, #0
 80006b6:	2000      	movs	r0, #0
 80006b8:	f002 f845 	bl	8002746 <ST7735_WriteString>
	  HAL_Delay(100);
 80006bc:	2064      	movs	r0, #100	; 0x64
 80006be:	f000 fb3d 	bl	8000d3c <HAL_Delay>
  {
 80006c2:	e7d3      	b.n	800066c <main+0x30>
 80006c4:	2000015c 	.word	0x2000015c
 80006c8:	40010000 	.word	0x40010000
 80006cc:	080031c0 	.word	0x080031c0
 80006d0:	200000a0 	.word	0x200000a0
 80006d4:	2000000c 	.word	0x2000000c
 80006d8:	080031c4 	.word	0x080031c4

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 f926 	bl	800293c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a27      	ldr	r2, [pc, #156]	; (80007a8 <SystemClock_Config+0xcc>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <SystemClock_Config+0xd0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000728:	4a20      	ldr	r2, [pc, #128]	; (80007ac <SystemClock_Config+0xd0>)
 800072a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <SystemClock_Config+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073c:	2301      	movs	r3, #1
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000750:	2319      	movs	r3, #25
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000754:	23a8      	movs	r3, #168	; 0xa8
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075c:	2304      	movs	r3, #4
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fd91 	bl	800128c <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000770:	f000 f81e 	bl	80007b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2102      	movs	r1, #2
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fff3 	bl	800177c <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800079c:	f000 f808 	bl	80007b0 <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3750      	adds	r7, #80	; 0x50
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_SPI1_Init+0x64>)
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <MX_SPI1_Init+0x68>)
 80007c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <MX_SPI1_Init+0x64>)
 80007c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_SPI1_Init+0x64>)
 80007e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_SPI1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_SPI1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_SPI1_Init+0x64>)
 8000808:	220a      	movs	r2, #10
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_SPI1_Init+0x64>)
 800080e:	f001 f951 	bl	8001ab4 <HAL_SPI_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000818:	f7ff ffca 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000104 	.word	0x20000104
 8000824:	40013000 	.word	0x40013000

08000828 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_SPI2_Init+0x64>)
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_SPI2_Init+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_SPI2_Init+0x64>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_SPI2_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_SPI2_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_SPI2_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_SPI2_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_SPI2_Init+0x64>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_SPI2_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_SPI2_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_SPI2_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_SPI2_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_SPI2_Init+0x64>)
 8000874:	220a      	movs	r2, #10
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_SPI2_Init+0x64>)
 800087a:	f001 f91b 	bl	8001ab4 <HAL_SPI_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000884:	f7ff ff94 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	200000ac 	.word	0x200000ac
 8000890:	40003800 	.word	0x40003800

08000894 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a32      	ldr	r2, [pc, #200]	; (800097c <HAL_SPI_MspInit+0xe8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d12c      	bne.n	8000910 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	4b31      	ldr	r3, [pc, #196]	; (8000980 <HAL_SPI_MspInit+0xec>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a30      	ldr	r2, [pc, #192]	; (8000980 <HAL_SPI_MspInit+0xec>)
 80008c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <HAL_SPI_MspInit+0xec>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <HAL_SPI_MspInit+0xec>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a29      	ldr	r2, [pc, #164]	; (8000980 <HAL_SPI_MspInit+0xec>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <HAL_SPI_MspInit+0xec>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ST7735_SCK_Pin|ST7735_SDA_Pin;
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008fe:	2305      	movs	r3, #5
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	481e      	ldr	r0, [pc, #120]	; (8000984 <HAL_SPI_MspInit+0xf0>)
 800090a:	f000 fb21 	bl	8000f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800090e:	e031      	b.n	8000974 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <HAL_SPI_MspInit+0xf4>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d12c      	bne.n	8000974 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <HAL_SPI_MspInit+0xec>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a17      	ldr	r2, [pc, #92]	; (8000980 <HAL_SPI_MspInit+0xec>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_SPI_MspInit+0xec>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_SPI_MspInit+0xec>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <HAL_SPI_MspInit+0xec>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_SPI_MspInit+0xec>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000952:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000964:	2305      	movs	r3, #5
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <HAL_SPI_MspInit+0xf8>)
 8000970:	f000 faee 	bl	8000f50 <HAL_GPIO_Init>
}
 8000974:	bf00      	nop
 8000976:	3730      	adds	r7, #48	; 0x30
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40013000 	.word	0x40013000
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000
 8000988:	40003800 	.word	0x40003800
 800098c:	40020400 	.word	0x40020400

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler+0x4>

080009f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler+0x4>

080009fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f966 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a3c:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <_sbrk+0x5c>)
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <_sbrk+0x60>)
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <_sbrk+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d102      	bne.n	8000a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <_sbrk+0x64>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <_sbrk+0x68>)
 8000a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d207      	bcs.n	8000a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a64:	f001 ff40 	bl	80028e8 <__errno>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	e009      	b.n	8000a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <_sbrk+0x64>)
 8000a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a86:	68fb      	ldr	r3, [r7, #12]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20010000 	.word	0x20010000
 8000a94:	00000400 	.word	0x00000400
 8000a98:	20000094 	.word	0x20000094
 8000a9c:	200001b8 	.word	0x200001b8

08000aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <SystemInit+0x20>)
 8000aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <SystemInit+0x20>)
 8000aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	2224      	movs	r2, #36	; 0x24
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 ff32 	bl	800293c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <MX_TIM1_Init+0xa8>)
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <MX_TIM1_Init+0xac>)
 8000ae4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <MX_TIM1_Init+0xa8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aec:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <MX_TIM1_Init+0xa8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <MX_TIM1_Init+0xa8>)
 8000af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	; (8000b6c <MX_TIM1_Init+0xa8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b00:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <MX_TIM1_Init+0xa8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <MX_TIM1_Init+0xa8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b14:	2301      	movs	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b24:	2301      	movs	r3, #1
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	4619      	mov	r1, r3
 8000b36:	480d      	ldr	r0, [pc, #52]	; (8000b6c <MX_TIM1_Init+0xa8>)
 8000b38:	f001 fa4c 	bl	8001fd4 <HAL_TIM_Encoder_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000b42:	f7ff fe35 	bl	80007b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_TIM1_Init+0xa8>)
 8000b54:	f001 fc18 	bl	8002388 <HAL_TIMEx_MasterConfigSynchronization>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000b5e:	f7ff fe27 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000015c 	.word	0x2000015c
 8000b70:	40010000 	.word	0x40010000

08000b74 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d12c      	bne.n	8000bf0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x88>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x88>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x88>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a10      	ldr	r2, [pc, #64]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x88>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_TIM_Encoder_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_S1_Pin|ENC_S2_Pin;
 8000bce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000be0:	2301      	movs	r3, #1
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000bec:	f000 f9b0 	bl	8000f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40010000 	.word	0x40010000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c0a:	490e      	ldr	r1, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c0c:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c20:	4c0b      	ldr	r4, [pc, #44]	; (8000c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c2e:	f7ff ff37 	bl	8000aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f001 fe5f 	bl	80028f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fd01 	bl	800063c <main>
  bx  lr    
 8000c3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c48:	08003a20 	.word	0x08003a20
  ldr r2, =_sbss
 8000c4c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c50:	200001b8 	.word	0x200001b8

08000c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC_IRQHandler>
	...

08000c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <HAL_Init+0x40>)
 8000c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_Init+0x40>)
 8000c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <HAL_Init+0x40>)
 8000c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f000 f931 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c86:	200f      	movs	r0, #15
 8000c88:	f000 f808 	bl	8000c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c8c:	f7ff fe80 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023c00 	.word	0x40023c00

08000c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_InitTick+0x54>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x58>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	4619      	mov	r1, r3
 8000cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f93b 	bl	8000f36 <HAL_SYSTICK_Config>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00e      	b.n	8000ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b0f      	cmp	r3, #15
 8000cce:	d80a      	bhi.n	8000ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 f911 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <HAL_InitTick+0x5c>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e000      	b.n	8000ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000000 	.word	0x20000000
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000004 	.word	0x20000004

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	200001a4 	.word	0x200001a4

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200001a4 	.word	0x200001a4

08000d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d44:	f7ff ffee 	bl	8000d24 <HAL_GetTick>
 8000d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d54:	d005      	beq.n	8000d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_Delay+0x44>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d62:	bf00      	nop
 8000d64:	f7ff ffde 	bl	8000d24 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d8f7      	bhi.n	8000d64 <HAL_Delay+0x28>
  {
  }
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008

08000d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff8e 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff47 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff5c 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff8e 	bl	8000e3c <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5d 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffb0 	bl	8000ea4 <SysTick_Config>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	; 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e159      	b.n	8001220 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	f040 8148 	bne.w	800121a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d005      	beq.n	8000fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d130      	bne.n	8001004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	f003 0201 	and.w	r2, r3, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b03      	cmp	r3, #3
 800100e:	d017      	beq.n	8001040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d123      	bne.n	8001094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	69b9      	ldr	r1, [r7, #24]
 8001090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0203 	and.w	r2, r3, #3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80a2 	beq.w	800121a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b57      	ldr	r3, [pc, #348]	; (8001238 <HAL_GPIO_Init+0x2e8>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a56      	ldr	r2, [pc, #344]	; (8001238 <HAL_GPIO_Init+0x2e8>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b54      	ldr	r3, [pc, #336]	; (8001238 <HAL_GPIO_Init+0x2e8>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f2:	4a52      	ldr	r2, [pc, #328]	; (800123c <HAL_GPIO_Init+0x2ec>)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a49      	ldr	r2, [pc, #292]	; (8001240 <HAL_GPIO_Init+0x2f0>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d019      	beq.n	8001152 <HAL_GPIO_Init+0x202>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a48      	ldr	r2, [pc, #288]	; (8001244 <HAL_GPIO_Init+0x2f4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x1fe>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a47      	ldr	r2, [pc, #284]	; (8001248 <HAL_GPIO_Init+0x2f8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x1fa>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a46      	ldr	r2, [pc, #280]	; (800124c <HAL_GPIO_Init+0x2fc>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x1f6>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a45      	ldr	r2, [pc, #276]	; (8001250 <HAL_GPIO_Init+0x300>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x1f2>
 800113e:	2304      	movs	r3, #4
 8001140:	e008      	b.n	8001154 <HAL_GPIO_Init+0x204>
 8001142:	2307      	movs	r3, #7
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x204>
 8001146:	2303      	movs	r3, #3
 8001148:	e004      	b.n	8001154 <HAL_GPIO_Init+0x204>
 800114a:	2302      	movs	r3, #2
 800114c:	e002      	b.n	8001154 <HAL_GPIO_Init+0x204>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x204>
 8001152:	2300      	movs	r3, #0
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	f002 0203 	and.w	r2, r2, #3
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	4093      	lsls	r3, r2
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001164:	4935      	ldr	r1, [pc, #212]	; (800123c <HAL_GPIO_Init+0x2ec>)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	3302      	adds	r3, #2
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001172:	4b38      	ldr	r3, [pc, #224]	; (8001254 <HAL_GPIO_Init+0x304>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001196:	4a2f      	ldr	r2, [pc, #188]	; (8001254 <HAL_GPIO_Init+0x304>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800119c:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <HAL_GPIO_Init+0x304>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c0:	4a24      	ldr	r2, [pc, #144]	; (8001254 <HAL_GPIO_Init+0x304>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <HAL_GPIO_Init+0x304>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ea:	4a1a      	ldr	r2, [pc, #104]	; (8001254 <HAL_GPIO_Init+0x304>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <HAL_GPIO_Init+0x304>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001214:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <HAL_GPIO_Init+0x304>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3301      	adds	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	2b0f      	cmp	r3, #15
 8001224:	f67f aea2 	bls.w	8000f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40013800 	.word	0x40013800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40020800 	.word	0x40020800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40021000 	.word	0x40021000
 8001254:	40013c00 	.word	0x40013c00

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001274:	e003      	b.n	800127e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	041a      	lsls	r2, r3, #16
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	619a      	str	r2, [r3, #24]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e264      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d075      	beq.n	8001396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012aa:	4ba3      	ldr	r3, [pc, #652]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d00c      	beq.n	80012d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b6:	4ba0      	ldr	r3, [pc, #640]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d112      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c2:	4b9d      	ldr	r3, [pc, #628]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ce:	d10b      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	4b99      	ldr	r3, [pc, #612]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d05b      	beq.n	8001394 <HAL_RCC_OscConfig+0x108>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d157      	bne.n	8001394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e23f      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f0:	d106      	bne.n	8001300 <HAL_RCC_OscConfig+0x74>
 80012f2:	4b91      	ldr	r3, [pc, #580]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a90      	ldr	r2, [pc, #576]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e01d      	b.n	800133c <HAL_RCC_OscConfig+0xb0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x98>
 800130a:	4b8b      	ldr	r3, [pc, #556]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a8a      	ldr	r2, [pc, #552]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a87      	ldr	r2, [pc, #540]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0xb0>
 8001324:	4b84      	ldr	r3, [pc, #528]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a83      	ldr	r2, [pc, #524]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800132a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b81      	ldr	r3, [pc, #516]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a80      	ldr	r2, [pc, #512]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fcee 	bl	8000d24 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fcea 	bl	8000d24 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e204      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	4b76      	ldr	r3, [pc, #472]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0xc0>
 800136a:	e014      	b.n	8001396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fcda 	bl	8000d24 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fcd6 	bl	8000d24 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e1f0      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	4b6c      	ldr	r3, [pc, #432]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0xe8>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d063      	beq.n	800146a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a2:	4b65      	ldr	r3, [pc, #404]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ae:	4b62      	ldr	r3, [pc, #392]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d11c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b5f      	ldr	r3, [pc, #380]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d116      	bne.n	80013f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	4b5c      	ldr	r3, [pc, #368]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_RCC_OscConfig+0x152>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d001      	beq.n	80013de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e1c4      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013de:	4b56      	ldr	r3, [pc, #344]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4952      	ldr	r1, [pc, #328]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	e03a      	b.n	800146a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d020      	beq.n	800143e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013fc:	4b4f      	ldr	r3, [pc, #316]	; (800153c <HAL_RCC_OscConfig+0x2b0>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fc8f 	bl	8000d24 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fc8b 	bl	8000d24 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e1a5      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	4b46      	ldr	r3, [pc, #280]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b43      	ldr	r3, [pc, #268]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4940      	ldr	r1, [pc, #256]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
 800143c:	e015      	b.n	800146a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143e:	4b3f      	ldr	r3, [pc, #252]	; (800153c <HAL_RCC_OscConfig+0x2b0>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fc6e 	bl	8000d24 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144c:	f7ff fc6a 	bl	8000d24 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e184      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	4b36      	ldr	r3, [pc, #216]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d030      	beq.n	80014d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d016      	beq.n	80014ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <HAL_RCC_OscConfig+0x2b4>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff fc4e 	bl	8000d24 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff fc4a 	bl	8000d24 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e164      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x200>
 80014aa:	e015      	b.n	80014d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_RCC_OscConfig+0x2b4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fc37 	bl	8000d24 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff fc33 	bl	8000d24 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e14d      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80a0 	beq.w	8001626 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10f      	bne.n	8001516 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001512:	2301      	movs	r3, #1
 8001514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_OscConfig+0x2b8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d121      	bne.n	8001566 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_RCC_OscConfig+0x2b8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_RCC_OscConfig+0x2b8>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152e:	f7ff fbf9 	bl	8000d24 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001534:	e011      	b.n	800155a <HAL_RCC_OscConfig+0x2ce>
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	42470000 	.word	0x42470000
 8001540:	42470e80 	.word	0x42470e80
 8001544:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001548:	f7ff fbec 	bl	8000d24 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e106      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b85      	ldr	r3, [pc, #532]	; (8001770 <HAL_RCC_OscConfig+0x4e4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x2f0>
 800156e:	4b81      	ldr	r3, [pc, #516]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a80      	ldr	r2, [pc, #512]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
 800157a:	e01c      	b.n	80015b6 <HAL_RCC_OscConfig+0x32a>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2b05      	cmp	r3, #5
 8001582:	d10c      	bne.n	800159e <HAL_RCC_OscConfig+0x312>
 8001584:	4b7b      	ldr	r3, [pc, #492]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 8001586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001588:	4a7a      	ldr	r2, [pc, #488]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	6713      	str	r3, [r2, #112]	; 0x70
 8001590:	4b78      	ldr	r3, [pc, #480]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a77      	ldr	r2, [pc, #476]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	e00b      	b.n	80015b6 <HAL_RCC_OscConfig+0x32a>
 800159e:	4b75      	ldr	r3, [pc, #468]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	4a74      	ldr	r2, [pc, #464]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	4b72      	ldr	r3, [pc, #456]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	4a71      	ldr	r2, [pc, #452]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 80015b0:	f023 0304 	bic.w	r3, r3, #4
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d015      	beq.n	80015ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff fbb1 	bl	8000d24 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c4:	e00a      	b.n	80015dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff fbad 	bl	8000d24 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e0c5      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015dc:	4b65      	ldr	r3, [pc, #404]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0ee      	beq.n	80015c6 <HAL_RCC_OscConfig+0x33a>
 80015e8:	e014      	b.n	8001614 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fb9b 	bl	8000d24 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff fb97 	bl	8000d24 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0af      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001608:	4b5a      	ldr	r3, [pc, #360]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1ee      	bne.n	80015f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d105      	bne.n	8001626 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161a:	4b56      	ldr	r3, [pc, #344]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a55      	ldr	r2, [pc, #340]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 8001620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 809b 	beq.w	8001766 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001630:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	2b08      	cmp	r3, #8
 800163a:	d05c      	beq.n	80016f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d141      	bne.n	80016c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001644:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <HAL_RCC_OscConfig+0x4ec>)
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fb6b 	bl	8000d24 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff fb67 	bl	8000d24 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e081      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001664:	4b43      	ldr	r3, [pc, #268]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f0      	bne.n	8001652 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69da      	ldr	r2, [r3, #28]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	019b      	lsls	r3, r3, #6
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	085b      	lsrs	r3, r3, #1
 8001688:	3b01      	subs	r3, #1
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	061b      	lsls	r3, r3, #24
 8001694:	4937      	ldr	r1, [pc, #220]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800169a:	4b37      	ldr	r3, [pc, #220]	; (8001778 <HAL_RCC_OscConfig+0x4ec>)
 800169c:	2201      	movs	r2, #1
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb40 	bl	8000d24 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff fb3c 	bl	8000d24 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e056      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ba:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x41c>
 80016c6:	e04e      	b.n	8001766 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_RCC_OscConfig+0x4ec>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fb29 	bl	8000d24 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff fb25 	bl	8000d24 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e03f      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e8:	4b22      	ldr	r3, [pc, #136]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1f0      	bne.n	80016d6 <HAL_RCC_OscConfig+0x44a>
 80016f4:	e037      	b.n	8001766 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e032      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <HAL_RCC_OscConfig+0x4e8>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d028      	beq.n	8001762 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d121      	bne.n	8001762 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d11a      	bne.n	8001762 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001732:	4013      	ands	r3, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001738:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173a:	4293      	cmp	r3, r2
 800173c:	d111      	bne.n	8001762 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	3b01      	subs	r3, #1
 800174c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d107      	bne.n	8001762 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d001      	beq.n	8001766 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40007000 	.word	0x40007000
 8001774:	40023800 	.word	0x40023800
 8001778:	42470060 	.word	0x42470060

0800177c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0cc      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001790:	4b68      	ldr	r3, [pc, #416]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d90c      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b65      	ldr	r3, [pc, #404]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b63      	ldr	r3, [pc, #396]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0b8      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d020      	beq.n	8001806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d0:	4b59      	ldr	r3, [pc, #356]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a58      	ldr	r2, [pc, #352]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e8:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a52      	ldr	r2, [pc, #328]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f4:	4b50      	ldr	r3, [pc, #320]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	494d      	ldr	r1, [pc, #308]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d044      	beq.n	800189c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d119      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e07f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d003      	beq.n	800183a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001836:	2b03      	cmp	r3, #3
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184a:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e067      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f023 0203 	bic.w	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4934      	ldr	r1, [pc, #208]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	4313      	orrs	r3, r2
 800186a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800186c:	f7ff fa5a 	bl	8000d24 <HAL_GetTick>
 8001870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	e00a      	b.n	800188a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001874:	f7ff fa56 	bl	8000d24 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e04f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 020c 	and.w	r2, r3, #12
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	429a      	cmp	r2, r3
 800189a:	d1eb      	bne.n	8001874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d20c      	bcs.n	80018c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b22      	ldr	r3, [pc, #136]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e032      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d0:	4b19      	ldr	r3, [pc, #100]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4916      	ldr	r1, [pc, #88]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	490e      	ldr	r1, [pc, #56]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001902:	f000 f821 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001906:	4602      	mov	r2, r0
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	490a      	ldr	r1, [pc, #40]	; (800193c <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	5ccb      	ldrb	r3, [r1, r3]
 8001916:	fa22 f303 	lsr.w	r3, r2, r3
 800191a:	4a09      	ldr	r2, [pc, #36]	; (8001940 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff f9ba 	bl	8000c9c <HAL_InitTick>

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00
 8001938:	40023800 	.word	0x40023800
 800193c:	080031e8 	.word	0x080031e8
 8001940:	20000000 	.word	0x20000000
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800194e:	2100      	movs	r1, #0
 8001950:	6079      	str	r1, [r7, #4]
 8001952:	2100      	movs	r1, #0
 8001954:	60f9      	str	r1, [r7, #12]
 8001956:	2100      	movs	r1, #0
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800195a:	2100      	movs	r1, #0
 800195c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800195e:	4952      	ldr	r1, [pc, #328]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001960:	6889      	ldr	r1, [r1, #8]
 8001962:	f001 010c 	and.w	r1, r1, #12
 8001966:	2908      	cmp	r1, #8
 8001968:	d00d      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x3e>
 800196a:	2908      	cmp	r1, #8
 800196c:	f200 8094 	bhi.w	8001a98 <HAL_RCC_GetSysClockFreq+0x150>
 8001970:	2900      	cmp	r1, #0
 8001972:	d002      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0x32>
 8001974:	2904      	cmp	r1, #4
 8001976:	d003      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x38>
 8001978:	e08e      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800197a:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <HAL_RCC_GetSysClockFreq+0x164>)
 800197c:	60bb      	str	r3, [r7, #8]
       break;
 800197e:	e08e      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001980:	4b4b      	ldr	r3, [pc, #300]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001982:	60bb      	str	r3, [r7, #8]
      break;
 8001984:	e08b      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001986:	4948      	ldr	r1, [pc, #288]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001988:	6849      	ldr	r1, [r1, #4]
 800198a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800198e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001990:	4945      	ldr	r1, [pc, #276]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001992:	6849      	ldr	r1, [r1, #4]
 8001994:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001998:	2900      	cmp	r1, #0
 800199a:	d024      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199c:	4942      	ldr	r1, [pc, #264]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x160>)
 800199e:	6849      	ldr	r1, [r1, #4]
 80019a0:	0989      	lsrs	r1, r1, #6
 80019a2:	4608      	mov	r0, r1
 80019a4:	f04f 0100 	mov.w	r1, #0
 80019a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80019ac:	f04f 0500 	mov.w	r5, #0
 80019b0:	ea00 0204 	and.w	r2, r0, r4
 80019b4:	ea01 0305 	and.w	r3, r1, r5
 80019b8:	493d      	ldr	r1, [pc, #244]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x168>)
 80019ba:	fb01 f003 	mul.w	r0, r1, r3
 80019be:	2100      	movs	r1, #0
 80019c0:	fb01 f102 	mul.w	r1, r1, r2
 80019c4:	1844      	adds	r4, r0, r1
 80019c6:	493a      	ldr	r1, [pc, #232]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x168>)
 80019c8:	fba2 0101 	umull	r0, r1, r2, r1
 80019cc:	1863      	adds	r3, r4, r1
 80019ce:	4619      	mov	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	461a      	mov	r2, r3
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	f7fe fc52 	bl	8000280 <__aeabi_uldivmod>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4613      	mov	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e04a      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e6:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	461a      	mov	r2, r3
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019f6:	f04f 0100 	mov.w	r1, #0
 80019fa:	ea02 0400 	and.w	r4, r2, r0
 80019fe:	ea03 0501 	and.w	r5, r3, r1
 8001a02:	4620      	mov	r0, r4
 8001a04:	4629      	mov	r1, r5
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	014b      	lsls	r3, r1, #5
 8001a10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a14:	0142      	lsls	r2, r0, #5
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	1b00      	subs	r0, r0, r4
 8001a1c:	eb61 0105 	sbc.w	r1, r1, r5
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	018b      	lsls	r3, r1, #6
 8001a2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a2e:	0182      	lsls	r2, r0, #6
 8001a30:	1a12      	subs	r2, r2, r0
 8001a32:	eb63 0301 	sbc.w	r3, r3, r1
 8001a36:	f04f 0000 	mov.w	r0, #0
 8001a3a:	f04f 0100 	mov.w	r1, #0
 8001a3e:	00d9      	lsls	r1, r3, #3
 8001a40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a44:	00d0      	lsls	r0, r2, #3
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	1912      	adds	r2, r2, r4
 8001a4c:	eb45 0303 	adc.w	r3, r5, r3
 8001a50:	f04f 0000 	mov.w	r0, #0
 8001a54:	f04f 0100 	mov.w	r1, #0
 8001a58:	0299      	lsls	r1, r3, #10
 8001a5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a5e:	0290      	lsls	r0, r2, #10
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	f7fe fc06 	bl	8000280 <__aeabi_uldivmod>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4613      	mov	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	3301      	adds	r3, #1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	60bb      	str	r3, [r7, #8]
      break;
 8001a96:	e002      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_RCC_GetSysClockFreq+0x164>)
 8001a9a:	60bb      	str	r3, [r7, #8]
      break;
 8001a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	00f42400 	.word	0x00f42400
 8001ab0:	017d7840 	.word	0x017d7840

08001ab4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e07b      	b.n	8001bbe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d108      	bne.n	8001ae0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ad6:	d009      	beq.n	8001aec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
 8001ade:	e005      	b.n	8001aec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7fe fec4 	bl	8000894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b70:	ea42 0103 	orr.w	r1, r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	f003 0104 	and.w	r1, r3, #4
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	f003 0210 	and.w	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	69da      	ldr	r2, [r3, #28]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b088      	sub	sp, #32
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_SPI_Transmit+0x22>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e126      	b.n	8001e36 <HAL_SPI_Transmit+0x270>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bf0:	f7ff f898 	bl	8000d24 <HAL_GetTick>
 8001bf4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d002      	beq.n	8001c0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c06:	2302      	movs	r3, #2
 8001c08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c0a:	e10b      	b.n	8001e24 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_SPI_Transmit+0x52>
 8001c12:	88fb      	ldrh	r3, [r7, #6]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c1c:	e102      	b.n	8001e24 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2203      	movs	r2, #3
 8001c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	88fa      	ldrh	r2, [r7, #6]
 8001c36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	88fa      	ldrh	r2, [r7, #6]
 8001c3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c64:	d10f      	bne.n	8001c86 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c90:	2b40      	cmp	r3, #64	; 0x40
 8001c92:	d007      	beq.n	8001ca4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ca2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cac:	d14b      	bne.n	8001d46 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <HAL_SPI_Transmit+0xf6>
 8001cb6:	8afb      	ldrh	r3, [r7, #22]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d13e      	bne.n	8001d3a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	881a      	ldrh	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	1c9a      	adds	r2, r3, #2
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ce0:	e02b      	b.n	8001d3a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d112      	bne.n	8001d16 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	881a      	ldrh	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	1c9a      	adds	r2, r3, #2
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d14:	e011      	b.n	8001d3a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d16:	f7ff f805 	bl	8000d24 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d803      	bhi.n	8001d2e <HAL_SPI_Transmit+0x168>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d102      	bne.n	8001d34 <HAL_SPI_Transmit+0x16e>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d38:	e074      	b.n	8001e24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ce      	bne.n	8001ce2 <HAL_SPI_Transmit+0x11c>
 8001d44:	e04c      	b.n	8001de0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <HAL_SPI_Transmit+0x18e>
 8001d4e:	8afb      	ldrh	r3, [r7, #22]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d140      	bne.n	8001dd6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	330c      	adds	r3, #12
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d7a:	e02c      	b.n	8001dd6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d113      	bne.n	8001db2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	330c      	adds	r3, #12
 8001d94:	7812      	ldrb	r2, [r2, #0]
 8001d96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	86da      	strh	r2, [r3, #54]	; 0x36
 8001db0:	e011      	b.n	8001dd6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001db2:	f7fe ffb7 	bl	8000d24 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d803      	bhi.n	8001dca <HAL_SPI_Transmit+0x204>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d102      	bne.n	8001dd0 <HAL_SPI_Transmit+0x20a>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001dd4:	e026      	b.n	8001e24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1cd      	bne.n	8001d7c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	6839      	ldr	r1, [r7, #0]
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f8b3 	bl	8001f50 <SPI_EndRxTxTransaction>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10a      	bne.n	8001e14 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	77fb      	strb	r3, [r7, #31]
 8001e20:	e000      	b.n	8001e24 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001e22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e34:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e50:	f7fe ff68 	bl	8000d24 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e60:	f7fe ff60 	bl	8000d24 <HAL_GetTick>
 8001e64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	015b      	lsls	r3, r3, #5
 8001e6c:	0d1b      	lsrs	r3, r3, #20
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	fb02 f303 	mul.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e76:	e054      	b.n	8001f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7e:	d050      	beq.n	8001f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e80:	f7fe ff50 	bl	8000d24 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d902      	bls.n	8001e96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d13d      	bne.n	8001f12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eae:	d111      	bne.n	8001ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eb8:	d004      	beq.n	8001ec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec2:	d107      	bne.n	8001ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001edc:	d10f      	bne.n	8001efe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e017      	b.n	8001f42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	bf0c      	ite	eq
 8001f32:	2301      	moveq	r3, #1
 8001f34:	2300      	movne	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d19b      	bne.n	8001e78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000000 	.word	0x20000000

08001f50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <SPI_EndRxTxTransaction+0x7c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <SPI_EndRxTxTransaction+0x80>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f6c:	fb02 f303 	mul.w	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f7a:	d112      	bne.n	8001fa2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2200      	movs	r2, #0
 8001f84:	2180      	movs	r1, #128	; 0x80
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f7ff ff5a 	bl	8001e40 <SPI_WaitFlagStateUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f96:	f043 0220 	orr.w	r2, r3, #32
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e00f      	b.n	8001fc2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb8:	2b80      	cmp	r3, #128	; 0x80
 8001fba:	d0f2      	beq.n	8001fa2 <SPI_EndRxTxTransaction+0x52>
 8001fbc:	e000      	b.n	8001fc0 <SPI_EndRxTxTransaction+0x70>
        break;
 8001fbe:	bf00      	nop
  }

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	165e9f81 	.word	0x165e9f81

08001fd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e097      	b.n	8002118 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d106      	bne.n	8002002 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7fe fdb9 	bl	8000b74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002018:	f023 0307 	bic.w	r3, r3, #7
 800201c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3304      	adds	r3, #4
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f000 f907 	bl	800223c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4313      	orrs	r3, r2
 800204e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002056:	f023 0303 	bic.w	r3, r3, #3
 800205a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	4313      	orrs	r3, r2
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002074:	f023 030c 	bic.w	r3, r3, #12
 8002078:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002080:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002084:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	4313      	orrs	r3, r2
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	011a      	lsls	r2, r3, #4
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	031b      	lsls	r3, r3, #12
 80020a4:	4313      	orrs	r3, r2
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80020b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80020ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	4313      	orrs	r3, r2
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002130:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002138:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002140:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002148:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d110      	bne.n	8002172 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002156:	7b7b      	ldrb	r3, [r7, #13]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d001      	beq.n	8002160 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e069      	b.n	8002234 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002170:	e031      	b.n	80021d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d110      	bne.n	800219a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002178:	7bbb      	ldrb	r3, [r7, #14]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d102      	bne.n	8002184 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800217e:	7b3b      	ldrb	r3, [r7, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d001      	beq.n	8002188 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e055      	b.n	8002234 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002198:	e01d      	b.n	80021d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d108      	bne.n	80021b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80021a0:	7bbb      	ldrb	r3, [r7, #14]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d105      	bne.n	80021b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80021a6:	7b7b      	ldrb	r3, [r7, #13]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d102      	bne.n	80021b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80021ac:	7b3b      	ldrb	r3, [r7, #12]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d001      	beq.n	80021b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e03e      	b.n	8002234 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2202      	movs	r2, #2
 80021d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_TIM_Encoder_Start+0xc4>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d008      	beq.n	80021f4 <HAL_TIM_Encoder_Start+0xd4>
 80021e2:	e00f      	b.n	8002204 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f8a5 	bl	800233c <TIM_CCxChannelCmd>
      break;
 80021f2:	e016      	b.n	8002222 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2201      	movs	r2, #1
 80021fa:	2104      	movs	r1, #4
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 f89d 	bl	800233c <TIM_CCxChannelCmd>
      break;
 8002202:	e00e      	b.n	8002222 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f895 	bl	800233c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	2104      	movs	r1, #4
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f88e 	bl	800233c <TIM_CCxChannelCmd>
      break;
 8002220:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a34      	ldr	r2, [pc, #208]	; (8002320 <TIM_Base_SetConfig+0xe4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00f      	beq.n	8002274 <TIM_Base_SetConfig+0x38>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225a:	d00b      	beq.n	8002274 <TIM_Base_SetConfig+0x38>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a31      	ldr	r2, [pc, #196]	; (8002324 <TIM_Base_SetConfig+0xe8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d007      	beq.n	8002274 <TIM_Base_SetConfig+0x38>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a30      	ldr	r2, [pc, #192]	; (8002328 <TIM_Base_SetConfig+0xec>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d003      	beq.n	8002274 <TIM_Base_SetConfig+0x38>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a2f      	ldr	r2, [pc, #188]	; (800232c <TIM_Base_SetConfig+0xf0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d108      	bne.n	8002286 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a25      	ldr	r2, [pc, #148]	; (8002320 <TIM_Base_SetConfig+0xe4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01b      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002294:	d017      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a22      	ldr	r2, [pc, #136]	; (8002324 <TIM_Base_SetConfig+0xe8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a21      	ldr	r2, [pc, #132]	; (8002328 <TIM_Base_SetConfig+0xec>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00f      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a20      	ldr	r2, [pc, #128]	; (800232c <TIM_Base_SetConfig+0xf0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00b      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <TIM_Base_SetConfig+0xf4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <TIM_Base_SetConfig+0xf8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d003      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <TIM_Base_SetConfig+0xfc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d108      	bne.n	80022d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <TIM_Base_SetConfig+0xe4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d103      	bne.n	800230c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	615a      	str	r2, [r3, #20]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40010000 	.word	0x40010000
 8002324:	40000400 	.word	0x40000400
 8002328:	40000800 	.word	0x40000800
 800232c:	40000c00 	.word	0x40000c00
 8002330:	40014000 	.word	0x40014000
 8002334:	40014400 	.word	0x40014400
 8002338:	40014800 	.word	0x40014800

0800233c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f003 031f 	and.w	r3, r3, #31
 800234e:	2201      	movs	r2, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a1a      	ldr	r2, [r3, #32]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	43db      	mvns	r3, r3
 800235e:	401a      	ands	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a1a      	ldr	r2, [r3, #32]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	621a      	str	r2, [r3, #32]
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800239c:	2302      	movs	r3, #2
 800239e:	e050      	b.n	8002442 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d018      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ec:	d013      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a18      	ldr	r2, [pc, #96]	; (8002454 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00e      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a16      	ldr	r2, [pc, #88]	; (8002458 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a15      	ldr	r2, [pc, #84]	; (800245c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a13      	ldr	r2, [pc, #76]	; (8002460 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10c      	bne.n	8002430 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800241c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	4313      	orrs	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40010000 	.word	0x40010000
 8002454:	40000400 	.word	0x40000400
 8002458:	40000800 	.word	0x40000800
 800245c:	40000c00 	.word	0x40000c00
 8002460:	40014000 	.word	0x40014000

08002464 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002468:	2200      	movs	r2, #0
 800246a:	2140      	movs	r1, #64	; 0x40
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <ST7735_Select+0x14>)
 800246e:	f7fe fef3 	bl	8001258 <HAL_GPIO_WritePin>
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40020400 	.word	0x40020400

0800247c <ST7735_Unselect>:

void ST7735_Unselect() {
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002480:	2201      	movs	r2, #1
 8002482:	2140      	movs	r1, #64	; 0x40
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <ST7735_Unselect+0x14>)
 8002486:	f7fe fee7 	bl	8001258 <HAL_GPIO_WritePin>
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40020400 	.word	0x40020400

08002494 <ST7735_Reset>:

static void ST7735_Reset() {
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002498:	2200      	movs	r2, #0
 800249a:	2180      	movs	r1, #128	; 0x80
 800249c:	4806      	ldr	r0, [pc, #24]	; (80024b8 <ST7735_Reset+0x24>)
 800249e:	f7fe fedb 	bl	8001258 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80024a2:	2005      	movs	r0, #5
 80024a4:	f7fe fc4a 	bl	8000d3c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80024a8:	2201      	movs	r2, #1
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <ST7735_Reset+0x24>)
 80024ae:	f7fe fed3 	bl	8001258 <HAL_GPIO_WritePin>
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40020400 	.word	0x40020400

080024bc <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80024c6:	2200      	movs	r2, #0
 80024c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024cc:	4806      	ldr	r0, [pc, #24]	; (80024e8 <ST7735_WriteCommand+0x2c>)
 80024ce:	f7fe fec3 	bl	8001258 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80024d2:	1df9      	adds	r1, r7, #7
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
 80024d8:	2201      	movs	r2, #1
 80024da:	4804      	ldr	r0, [pc, #16]	; (80024ec <ST7735_WriteCommand+0x30>)
 80024dc:	f7ff fb73 	bl	8001bc6 <HAL_SPI_Transmit>
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40020400 	.word	0x40020400
 80024ec:	20000104 	.word	0x20000104

080024f0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80024fa:	2201      	movs	r2, #1
 80024fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002500:	4807      	ldr	r0, [pc, #28]	; (8002520 <ST7735_WriteData+0x30>)
 8002502:	f7fe fea9 	bl	8001258 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	b29a      	uxth	r2, r3
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4804      	ldr	r0, [pc, #16]	; (8002524 <ST7735_WriteData+0x34>)
 8002512:	f7ff fb58 	bl	8001bc6 <HAL_SPI_Transmit>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40020400 	.word	0x40020400
 8002524:	20000104 	.word	0x20000104

08002528 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800253a:	e034      	b.n	80025a6 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8002546:	7afb      	ldrb	r3, [r7, #11]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ffb7 	bl	80024bc <ST7735_WriteCommand>

        numArgs = *addr++;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002558:	7abb      	ldrb	r3, [r7, #10]
 800255a:	b29b      	uxth	r3, r3
 800255c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002560:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8002562:	7abb      	ldrb	r3, [r7, #10]
 8002564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002568:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800256a:	7abb      	ldrb	r3, [r7, #10]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002570:	7abb      	ldrb	r3, [r7, #10]
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ffbb 	bl	80024f0 <ST7735_WriteData>
            addr += numArgs;
 800257a:	7abb      	ldrb	r3, [r7, #10]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4413      	add	r3, r2
 8002580:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8002582:	89bb      	ldrh	r3, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00e      	beq.n	80025a6 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8002592:	89bb      	ldrh	r3, [r7, #12]
 8002594:	2bff      	cmp	r3, #255	; 0xff
 8002596:	d102      	bne.n	800259e <ST7735_ExecuteCommandList+0x76>
 8002598:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800259c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800259e:	89bb      	ldrh	r3, [r7, #12]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fbcb 	bl	8000d3c <HAL_Delay>
    while(numCommands--) {
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	1e5a      	subs	r2, r3, #1
 80025aa:	73fa      	strb	r2, [r7, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1c5      	bne.n	800253c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80025ba:	b590      	push	{r4, r7, lr}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4604      	mov	r4, r0
 80025c2:	4608      	mov	r0, r1
 80025c4:	4611      	mov	r1, r2
 80025c6:	461a      	mov	r2, r3
 80025c8:	4623      	mov	r3, r4
 80025ca:	71fb      	strb	r3, [r7, #7]
 80025cc:	4603      	mov	r3, r0
 80025ce:	71bb      	strb	r3, [r7, #6]
 80025d0:	460b      	mov	r3, r1
 80025d2:	717b      	strb	r3, [r7, #5]
 80025d4:	4613      	mov	r3, r2
 80025d6:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80025d8:	202a      	movs	r0, #42	; 0x2a
 80025da:	f7ff ff6f 	bl	80024bc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80025de:	2300      	movs	r3, #0
 80025e0:	733b      	strb	r3, [r7, #12]
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	737b      	strb	r3, [r7, #13]
 80025e6:	2300      	movs	r3, #0
 80025e8:	73bb      	strb	r3, [r7, #14]
 80025ea:	797b      	ldrb	r3, [r7, #5]
 80025ec:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80025ee:	f107 030c 	add.w	r3, r7, #12
 80025f2:	2104      	movs	r1, #4
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff7b 	bl	80024f0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80025fa:	202b      	movs	r0, #43	; 0x2b
 80025fc:	f7ff ff5e 	bl	80024bc <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8002600:	79bb      	ldrb	r3, [r7, #6]
 8002602:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002604:	793b      	ldrb	r3, [r7, #4]
 8002606:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002608:	f107 030c 	add.w	r3, r7, #12
 800260c:	2104      	movs	r1, #4
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ff6e 	bl	80024f0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002614:	202c      	movs	r0, #44	; 0x2c
 8002616:	f7ff ff51 	bl	80024bc <ST7735_WriteCommand>
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	bd90      	pop	{r4, r7, pc}
	...

08002624 <ST7735_Init>:

void ST7735_Init() {
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
    ST7735_Select();
 8002628:	f7ff ff1c 	bl	8002464 <ST7735_Select>
    ST7735_Reset();
 800262c:	f7ff ff32 	bl	8002494 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8002630:	4806      	ldr	r0, [pc, #24]	; (800264c <ST7735_Init+0x28>)
 8002632:	f7ff ff79 	bl	8002528 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8002636:	4806      	ldr	r0, [pc, #24]	; (8002650 <ST7735_Init+0x2c>)
 8002638:	f7ff ff76 	bl	8002528 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800263c:	4805      	ldr	r0, [pc, #20]	; (8002654 <ST7735_Init+0x30>)
 800263e:	f7ff ff73 	bl	8002528 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8002642:	f7ff ff1b 	bl	800247c <ST7735_Unselect>
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	08003964 	.word	0x08003964
 8002650:	080039a0 	.word	0x080039a0
 8002654:	080039b0 	.word	0x080039b0

08002658 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002658:	b082      	sub	sp, #8
 800265a:	b590      	push	{r4, r7, lr}
 800265c:	b089      	sub	sp, #36	; 0x24
 800265e:	af00      	add	r7, sp, #0
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
 8002662:	4603      	mov	r3, r0
 8002664:	80fb      	strh	r3, [r7, #6]
 8002666:	460b      	mov	r3, r1
 8002668:	80bb      	strh	r3, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	b2d8      	uxtb	r0, r3
 8002672:	88bb      	ldrh	r3, [r7, #4]
 8002674:	b2d9      	uxtb	r1, r3
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800267e:	4413      	add	r3, r2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b2dc      	uxtb	r4, r3
 8002686:	88bb      	ldrh	r3, [r7, #4]
 8002688:	b2da      	uxtb	r2, r3
 800268a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800268e:	4413      	add	r3, r2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	4622      	mov	r2, r4
 8002698:	f7ff ff8f 	bl	80025ba <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	e043      	b.n	800272a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 80026a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	3b20      	subs	r3, #32
 80026a8:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4619      	mov	r1, r3
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	440b      	add	r3, r1
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	e029      	b.n	8002718 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00e      	beq.n	80026f2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80026d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	b29b      	uxth	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	743b      	strb	r3, [r7, #16]
 80026de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80026e4:	f107 0310 	add.w	r3, r7, #16
 80026e8:	2102      	movs	r1, #2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff00 	bl	80024f0 <ST7735_WriteData>
 80026f0:	e00f      	b.n	8002712 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80026f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	733b      	strb	r3, [r7, #12]
 80026fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002702:	b2db      	uxtb	r3, r3
 8002704:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	2102      	movs	r1, #2
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff feef 	bl	80024f0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	3301      	adds	r3, #1
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800271c:	461a      	mov	r2, r3
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4293      	cmp	r3, r2
 8002722:	d3cf      	bcc.n	80026c4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	3301      	adds	r3, #1
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800272e:	461a      	mov	r2, r3
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4293      	cmp	r3, r2
 8002734:	d3b5      	bcc.n	80026a2 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	3724      	adds	r7, #36	; 0x24
 800273c:	46bd      	mov	sp, r7
 800273e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002742:	b002      	add	sp, #8
 8002744:	4770      	bx	lr

08002746 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002746:	b082      	sub	sp, #8
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af04      	add	r7, sp, #16
 800274e:	603a      	str	r2, [r7, #0]
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	4603      	mov	r3, r0
 8002754:	80fb      	strh	r3, [r7, #6]
 8002756:	460b      	mov	r3, r1
 8002758:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800275a:	f7ff fe83 	bl	8002464 <ST7735_Select>

    while(*str) {
 800275e:	e02d      	b.n	80027bc <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	7d3a      	ldrb	r2, [r7, #20]
 8002764:	4413      	add	r3, r2
 8002766:	2b9f      	cmp	r3, #159	; 0x9f
 8002768:	dd13      	ble.n	8002792 <ST7735_WriteString+0x4c>
            x = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800276e:	7d7b      	ldrb	r3, [r7, #21]
 8002770:	b29a      	uxth	r2, r3
 8002772:	88bb      	ldrh	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002778:	88bb      	ldrh	r3, [r7, #4]
 800277a:	7d7a      	ldrb	r2, [r7, #21]
 800277c:	4413      	add	r3, r2
 800277e:	2b7f      	cmp	r3, #127	; 0x7f
 8002780:	dc21      	bgt.n	80027c6 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b20      	cmp	r3, #32
 8002788:	d103      	bne.n	8002792 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	603b      	str	r3, [r7, #0]
                continue;
 8002790:	e014      	b.n	80027bc <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	781a      	ldrb	r2, [r3, #0]
 8002796:	88b9      	ldrh	r1, [r7, #4]
 8002798:	88f8      	ldrh	r0, [r7, #6]
 800279a:	8c3b      	ldrh	r3, [r7, #32]
 800279c:	9302      	str	r3, [sp, #8]
 800279e:	8bbb      	ldrh	r3, [r7, #28]
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f7ff ff56 	bl	8002658 <ST7735_WriteChar>
        x += font.width;
 80027ac:	7d3b      	ldrb	r3, [r7, #20]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	4413      	add	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
        str++;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	3301      	adds	r3, #1
 80027ba:	603b      	str	r3, [r7, #0]
    while(*str) {
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1cd      	bne.n	8002760 <ST7735_WriteString+0x1a>
 80027c4:	e000      	b.n	80027c8 <ST7735_WriteString+0x82>
                break;
 80027c6:	bf00      	nop
    }

    ST7735_Unselect();
 80027c8:	f7ff fe58 	bl	800247c <ST7735_Unselect>
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027d6:	b002      	add	sp, #8
 80027d8:	4770      	bx	lr
	...

080027dc <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4604      	mov	r4, r0
 80027e4:	4608      	mov	r0, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	4623      	mov	r3, r4
 80027ec:	80fb      	strh	r3, [r7, #6]
 80027ee:	4603      	mov	r3, r0
 80027f0:	80bb      	strh	r3, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	807b      	strh	r3, [r7, #2]
 80027f6:	4613      	mov	r3, r2
 80027f8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	2b9f      	cmp	r3, #159	; 0x9f
 80027fe:	d858      	bhi.n	80028b2 <ST7735_FillRectangle+0xd6>
 8002800:	88bb      	ldrh	r3, [r7, #4]
 8002802:	2b7f      	cmp	r3, #127	; 0x7f
 8002804:	d855      	bhi.n	80028b2 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002806:	88fa      	ldrh	r2, [r7, #6]
 8002808:	887b      	ldrh	r3, [r7, #2]
 800280a:	4413      	add	r3, r2
 800280c:	2ba0      	cmp	r3, #160	; 0xa0
 800280e:	dd03      	ble.n	8002818 <ST7735_FillRectangle+0x3c>
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002816:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002818:	88ba      	ldrh	r2, [r7, #4]
 800281a:	883b      	ldrh	r3, [r7, #0]
 800281c:	4413      	add	r3, r2
 800281e:	2b80      	cmp	r3, #128	; 0x80
 8002820:	dd03      	ble.n	800282a <ST7735_FillRectangle+0x4e>
 8002822:	88bb      	ldrh	r3, [r7, #4]
 8002824:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002828:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800282a:	f7ff fe1b 	bl	8002464 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	b2d8      	uxtb	r0, r3
 8002832:	88bb      	ldrh	r3, [r7, #4]
 8002834:	b2d9      	uxtb	r1, r3
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	887b      	ldrh	r3, [r7, #2]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4413      	add	r3, r2
 8002840:	b2db      	uxtb	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b2dc      	uxtb	r4, r3
 8002846:	88bb      	ldrh	r3, [r7, #4]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	883b      	ldrh	r3, [r7, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	4413      	add	r3, r2
 8002850:	b2db      	uxtb	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4622      	mov	r2, r4
 8002858:	f7ff feaf 	bl	80025ba <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800285c:	8c3b      	ldrh	r3, [r7, #32]
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	b29b      	uxth	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	733b      	strb	r3, [r7, #12]
 8002866:	8c3b      	ldrh	r3, [r7, #32]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800286c:	2201      	movs	r2, #1
 800286e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002872:	4812      	ldr	r0, [pc, #72]	; (80028bc <ST7735_FillRectangle+0xe0>)
 8002874:	f7fe fcf0 	bl	8001258 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002878:	883b      	ldrh	r3, [r7, #0]
 800287a:	80bb      	strh	r3, [r7, #4]
 800287c:	e013      	b.n	80028a6 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	80fb      	strh	r3, [r7, #6]
 8002882:	e00a      	b.n	800289a <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002884:	f107 010c 	add.w	r1, r7, #12
 8002888:	f04f 33ff 	mov.w	r3, #4294967295
 800288c:	2202      	movs	r2, #2
 800288e:	480c      	ldr	r0, [pc, #48]	; (80028c0 <ST7735_FillRectangle+0xe4>)
 8002890:	f7ff f999 	bl	8001bc6 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	3b01      	subs	r3, #1
 8002898:	80fb      	strh	r3, [r7, #6]
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f1      	bne.n	8002884 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 80028a0:	88bb      	ldrh	r3, [r7, #4]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	80bb      	strh	r3, [r7, #4]
 80028a6:	88bb      	ldrh	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e8      	bne.n	800287e <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 80028ac:	f7ff fde6 	bl	800247c <ST7735_Unselect>
 80028b0:	e000      	b.n	80028b4 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80028b2:	bf00      	nop
}
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd90      	pop	{r4, r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40020400 	.word	0x40020400
 80028c0:	20000104 	.word	0x20000104

080028c4 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	4603      	mov	r3, r0
 80028cc:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	22a0      	movs	r2, #160	; 0xa0
 80028d6:	2100      	movs	r1, #0
 80028d8:	2000      	movs	r0, #0
 80028da:	f7ff ff7f 	bl	80027dc <ST7735_FillRectangle>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <__errno>:
 80028e8:	4b01      	ldr	r3, [pc, #4]	; (80028f0 <__errno+0x8>)
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000014 	.word	0x20000014

080028f4 <__libc_init_array>:
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	4d0d      	ldr	r5, [pc, #52]	; (800292c <__libc_init_array+0x38>)
 80028f8:	4c0d      	ldr	r4, [pc, #52]	; (8002930 <__libc_init_array+0x3c>)
 80028fa:	1b64      	subs	r4, r4, r5
 80028fc:	10a4      	asrs	r4, r4, #2
 80028fe:	2600      	movs	r6, #0
 8002900:	42a6      	cmp	r6, r4
 8002902:	d109      	bne.n	8002918 <__libc_init_array+0x24>
 8002904:	4d0b      	ldr	r5, [pc, #44]	; (8002934 <__libc_init_array+0x40>)
 8002906:	4c0c      	ldr	r4, [pc, #48]	; (8002938 <__libc_init_array+0x44>)
 8002908:	f000 fc4e 	bl	80031a8 <_init>
 800290c:	1b64      	subs	r4, r4, r5
 800290e:	10a4      	asrs	r4, r4, #2
 8002910:	2600      	movs	r6, #0
 8002912:	42a6      	cmp	r6, r4
 8002914:	d105      	bne.n	8002922 <__libc_init_array+0x2e>
 8002916:	bd70      	pop	{r4, r5, r6, pc}
 8002918:	f855 3b04 	ldr.w	r3, [r5], #4
 800291c:	4798      	blx	r3
 800291e:	3601      	adds	r6, #1
 8002920:	e7ee      	b.n	8002900 <__libc_init_array+0xc>
 8002922:	f855 3b04 	ldr.w	r3, [r5], #4
 8002926:	4798      	blx	r3
 8002928:	3601      	adds	r6, #1
 800292a:	e7f2      	b.n	8002912 <__libc_init_array+0x1e>
 800292c:	08003a18 	.word	0x08003a18
 8002930:	08003a18 	.word	0x08003a18
 8002934:	08003a18 	.word	0x08003a18
 8002938:	08003a1c 	.word	0x08003a1c

0800293c <memset>:
 800293c:	4402      	add	r2, r0
 800293e:	4603      	mov	r3, r0
 8002940:	4293      	cmp	r3, r2
 8002942:	d100      	bne.n	8002946 <memset+0xa>
 8002944:	4770      	bx	lr
 8002946:	f803 1b01 	strb.w	r1, [r3], #1
 800294a:	e7f9      	b.n	8002940 <memset+0x4>

0800294c <siprintf>:
 800294c:	b40e      	push	{r1, r2, r3}
 800294e:	b500      	push	{lr}
 8002950:	b09c      	sub	sp, #112	; 0x70
 8002952:	ab1d      	add	r3, sp, #116	; 0x74
 8002954:	9002      	str	r0, [sp, #8]
 8002956:	9006      	str	r0, [sp, #24]
 8002958:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800295c:	4809      	ldr	r0, [pc, #36]	; (8002984 <siprintf+0x38>)
 800295e:	9107      	str	r1, [sp, #28]
 8002960:	9104      	str	r1, [sp, #16]
 8002962:	4909      	ldr	r1, [pc, #36]	; (8002988 <siprintf+0x3c>)
 8002964:	f853 2b04 	ldr.w	r2, [r3], #4
 8002968:	9105      	str	r1, [sp, #20]
 800296a:	6800      	ldr	r0, [r0, #0]
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	a902      	add	r1, sp, #8
 8002970:	f000 f868 	bl	8002a44 <_svfiprintf_r>
 8002974:	9b02      	ldr	r3, [sp, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	b01c      	add	sp, #112	; 0x70
 800297c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002980:	b003      	add	sp, #12
 8002982:	4770      	bx	lr
 8002984:	20000014 	.word	0x20000014
 8002988:	ffff0208 	.word	0xffff0208

0800298c <__ssputs_r>:
 800298c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002990:	688e      	ldr	r6, [r1, #8]
 8002992:	429e      	cmp	r6, r3
 8002994:	4682      	mov	sl, r0
 8002996:	460c      	mov	r4, r1
 8002998:	4690      	mov	r8, r2
 800299a:	461f      	mov	r7, r3
 800299c:	d838      	bhi.n	8002a10 <__ssputs_r+0x84>
 800299e:	898a      	ldrh	r2, [r1, #12]
 80029a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029a4:	d032      	beq.n	8002a0c <__ssputs_r+0x80>
 80029a6:	6825      	ldr	r5, [r4, #0]
 80029a8:	6909      	ldr	r1, [r1, #16]
 80029aa:	eba5 0901 	sub.w	r9, r5, r1
 80029ae:	6965      	ldr	r5, [r4, #20]
 80029b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029b8:	3301      	adds	r3, #1
 80029ba:	444b      	add	r3, r9
 80029bc:	106d      	asrs	r5, r5, #1
 80029be:	429d      	cmp	r5, r3
 80029c0:	bf38      	it	cc
 80029c2:	461d      	movcc	r5, r3
 80029c4:	0553      	lsls	r3, r2, #21
 80029c6:	d531      	bpl.n	8002a2c <__ssputs_r+0xa0>
 80029c8:	4629      	mov	r1, r5
 80029ca:	f000 fb47 	bl	800305c <_malloc_r>
 80029ce:	4606      	mov	r6, r0
 80029d0:	b950      	cbnz	r0, 80029e8 <__ssputs_r+0x5c>
 80029d2:	230c      	movs	r3, #12
 80029d4:	f8ca 3000 	str.w	r3, [sl]
 80029d8:	89a3      	ldrh	r3, [r4, #12]
 80029da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029de:	81a3      	strh	r3, [r4, #12]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e8:	6921      	ldr	r1, [r4, #16]
 80029ea:	464a      	mov	r2, r9
 80029ec:	f000 fabe 	bl	8002f6c <memcpy>
 80029f0:	89a3      	ldrh	r3, [r4, #12]
 80029f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fa:	81a3      	strh	r3, [r4, #12]
 80029fc:	6126      	str	r6, [r4, #16]
 80029fe:	6165      	str	r5, [r4, #20]
 8002a00:	444e      	add	r6, r9
 8002a02:	eba5 0509 	sub.w	r5, r5, r9
 8002a06:	6026      	str	r6, [r4, #0]
 8002a08:	60a5      	str	r5, [r4, #8]
 8002a0a:	463e      	mov	r6, r7
 8002a0c:	42be      	cmp	r6, r7
 8002a0e:	d900      	bls.n	8002a12 <__ssputs_r+0x86>
 8002a10:	463e      	mov	r6, r7
 8002a12:	4632      	mov	r2, r6
 8002a14:	6820      	ldr	r0, [r4, #0]
 8002a16:	4641      	mov	r1, r8
 8002a18:	f000 fab6 	bl	8002f88 <memmove>
 8002a1c:	68a3      	ldr	r3, [r4, #8]
 8002a1e:	6822      	ldr	r2, [r4, #0]
 8002a20:	1b9b      	subs	r3, r3, r6
 8002a22:	4432      	add	r2, r6
 8002a24:	60a3      	str	r3, [r4, #8]
 8002a26:	6022      	str	r2, [r4, #0]
 8002a28:	2000      	movs	r0, #0
 8002a2a:	e7db      	b.n	80029e4 <__ssputs_r+0x58>
 8002a2c:	462a      	mov	r2, r5
 8002a2e:	f000 fb6f 	bl	8003110 <_realloc_r>
 8002a32:	4606      	mov	r6, r0
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d1e1      	bne.n	80029fc <__ssputs_r+0x70>
 8002a38:	6921      	ldr	r1, [r4, #16]
 8002a3a:	4650      	mov	r0, sl
 8002a3c:	f000 fabe 	bl	8002fbc <_free_r>
 8002a40:	e7c7      	b.n	80029d2 <__ssputs_r+0x46>
	...

08002a44 <_svfiprintf_r>:
 8002a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a48:	4698      	mov	r8, r3
 8002a4a:	898b      	ldrh	r3, [r1, #12]
 8002a4c:	061b      	lsls	r3, r3, #24
 8002a4e:	b09d      	sub	sp, #116	; 0x74
 8002a50:	4607      	mov	r7, r0
 8002a52:	460d      	mov	r5, r1
 8002a54:	4614      	mov	r4, r2
 8002a56:	d50e      	bpl.n	8002a76 <_svfiprintf_r+0x32>
 8002a58:	690b      	ldr	r3, [r1, #16]
 8002a5a:	b963      	cbnz	r3, 8002a76 <_svfiprintf_r+0x32>
 8002a5c:	2140      	movs	r1, #64	; 0x40
 8002a5e:	f000 fafd 	bl	800305c <_malloc_r>
 8002a62:	6028      	str	r0, [r5, #0]
 8002a64:	6128      	str	r0, [r5, #16]
 8002a66:	b920      	cbnz	r0, 8002a72 <_svfiprintf_r+0x2e>
 8002a68:	230c      	movs	r3, #12
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	e0d1      	b.n	8002c16 <_svfiprintf_r+0x1d2>
 8002a72:	2340      	movs	r3, #64	; 0x40
 8002a74:	616b      	str	r3, [r5, #20]
 8002a76:	2300      	movs	r3, #0
 8002a78:	9309      	str	r3, [sp, #36]	; 0x24
 8002a7a:	2320      	movs	r3, #32
 8002a7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a80:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a84:	2330      	movs	r3, #48	; 0x30
 8002a86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002c30 <_svfiprintf_r+0x1ec>
 8002a8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a8e:	f04f 0901 	mov.w	r9, #1
 8002a92:	4623      	mov	r3, r4
 8002a94:	469a      	mov	sl, r3
 8002a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a9a:	b10a      	cbz	r2, 8002aa0 <_svfiprintf_r+0x5c>
 8002a9c:	2a25      	cmp	r2, #37	; 0x25
 8002a9e:	d1f9      	bne.n	8002a94 <_svfiprintf_r+0x50>
 8002aa0:	ebba 0b04 	subs.w	fp, sl, r4
 8002aa4:	d00b      	beq.n	8002abe <_svfiprintf_r+0x7a>
 8002aa6:	465b      	mov	r3, fp
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	4629      	mov	r1, r5
 8002aac:	4638      	mov	r0, r7
 8002aae:	f7ff ff6d 	bl	800298c <__ssputs_r>
 8002ab2:	3001      	adds	r0, #1
 8002ab4:	f000 80aa 	beq.w	8002c0c <_svfiprintf_r+0x1c8>
 8002ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002aba:	445a      	add	r2, fp
 8002abc:	9209      	str	r2, [sp, #36]	; 0x24
 8002abe:	f89a 3000 	ldrb.w	r3, [sl]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 80a2 	beq.w	8002c0c <_svfiprintf_r+0x1c8>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f04f 32ff 	mov.w	r2, #4294967295
 8002ace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ad2:	f10a 0a01 	add.w	sl, sl, #1
 8002ad6:	9304      	str	r3, [sp, #16]
 8002ad8:	9307      	str	r3, [sp, #28]
 8002ada:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ade:	931a      	str	r3, [sp, #104]	; 0x68
 8002ae0:	4654      	mov	r4, sl
 8002ae2:	2205      	movs	r2, #5
 8002ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ae8:	4851      	ldr	r0, [pc, #324]	; (8002c30 <_svfiprintf_r+0x1ec>)
 8002aea:	f7fd fb79 	bl	80001e0 <memchr>
 8002aee:	9a04      	ldr	r2, [sp, #16]
 8002af0:	b9d8      	cbnz	r0, 8002b2a <_svfiprintf_r+0xe6>
 8002af2:	06d0      	lsls	r0, r2, #27
 8002af4:	bf44      	itt	mi
 8002af6:	2320      	movmi	r3, #32
 8002af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002afc:	0711      	lsls	r1, r2, #28
 8002afe:	bf44      	itt	mi
 8002b00:	232b      	movmi	r3, #43	; 0x2b
 8002b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b06:	f89a 3000 	ldrb.w	r3, [sl]
 8002b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b0c:	d015      	beq.n	8002b3a <_svfiprintf_r+0xf6>
 8002b0e:	9a07      	ldr	r2, [sp, #28]
 8002b10:	4654      	mov	r4, sl
 8002b12:	2000      	movs	r0, #0
 8002b14:	f04f 0c0a 	mov.w	ip, #10
 8002b18:	4621      	mov	r1, r4
 8002b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b1e:	3b30      	subs	r3, #48	; 0x30
 8002b20:	2b09      	cmp	r3, #9
 8002b22:	d94e      	bls.n	8002bc2 <_svfiprintf_r+0x17e>
 8002b24:	b1b0      	cbz	r0, 8002b54 <_svfiprintf_r+0x110>
 8002b26:	9207      	str	r2, [sp, #28]
 8002b28:	e014      	b.n	8002b54 <_svfiprintf_r+0x110>
 8002b2a:	eba0 0308 	sub.w	r3, r0, r8
 8002b2e:	fa09 f303 	lsl.w	r3, r9, r3
 8002b32:	4313      	orrs	r3, r2
 8002b34:	9304      	str	r3, [sp, #16]
 8002b36:	46a2      	mov	sl, r4
 8002b38:	e7d2      	b.n	8002ae0 <_svfiprintf_r+0x9c>
 8002b3a:	9b03      	ldr	r3, [sp, #12]
 8002b3c:	1d19      	adds	r1, r3, #4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	9103      	str	r1, [sp, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bfbb      	ittet	lt
 8002b46:	425b      	neglt	r3, r3
 8002b48:	f042 0202 	orrlt.w	r2, r2, #2
 8002b4c:	9307      	strge	r3, [sp, #28]
 8002b4e:	9307      	strlt	r3, [sp, #28]
 8002b50:	bfb8      	it	lt
 8002b52:	9204      	strlt	r2, [sp, #16]
 8002b54:	7823      	ldrb	r3, [r4, #0]
 8002b56:	2b2e      	cmp	r3, #46	; 0x2e
 8002b58:	d10c      	bne.n	8002b74 <_svfiprintf_r+0x130>
 8002b5a:	7863      	ldrb	r3, [r4, #1]
 8002b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b5e:	d135      	bne.n	8002bcc <_svfiprintf_r+0x188>
 8002b60:	9b03      	ldr	r3, [sp, #12]
 8002b62:	1d1a      	adds	r2, r3, #4
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	9203      	str	r2, [sp, #12]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bfb8      	it	lt
 8002b6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b70:	3402      	adds	r4, #2
 8002b72:	9305      	str	r3, [sp, #20]
 8002b74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c40 <_svfiprintf_r+0x1fc>
 8002b78:	7821      	ldrb	r1, [r4, #0]
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	4650      	mov	r0, sl
 8002b7e:	f7fd fb2f 	bl	80001e0 <memchr>
 8002b82:	b140      	cbz	r0, 8002b96 <_svfiprintf_r+0x152>
 8002b84:	2340      	movs	r3, #64	; 0x40
 8002b86:	eba0 000a 	sub.w	r0, r0, sl
 8002b8a:	fa03 f000 	lsl.w	r0, r3, r0
 8002b8e:	9b04      	ldr	r3, [sp, #16]
 8002b90:	4303      	orrs	r3, r0
 8002b92:	3401      	adds	r4, #1
 8002b94:	9304      	str	r3, [sp, #16]
 8002b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b9a:	4826      	ldr	r0, [pc, #152]	; (8002c34 <_svfiprintf_r+0x1f0>)
 8002b9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ba0:	2206      	movs	r2, #6
 8002ba2:	f7fd fb1d 	bl	80001e0 <memchr>
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	d038      	beq.n	8002c1c <_svfiprintf_r+0x1d8>
 8002baa:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <_svfiprintf_r+0x1f4>)
 8002bac:	bb1b      	cbnz	r3, 8002bf6 <_svfiprintf_r+0x1b2>
 8002bae:	9b03      	ldr	r3, [sp, #12]
 8002bb0:	3307      	adds	r3, #7
 8002bb2:	f023 0307 	bic.w	r3, r3, #7
 8002bb6:	3308      	adds	r3, #8
 8002bb8:	9303      	str	r3, [sp, #12]
 8002bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bbc:	4433      	add	r3, r6
 8002bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8002bc0:	e767      	b.n	8002a92 <_svfiprintf_r+0x4e>
 8002bc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bc6:	460c      	mov	r4, r1
 8002bc8:	2001      	movs	r0, #1
 8002bca:	e7a5      	b.n	8002b18 <_svfiprintf_r+0xd4>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	3401      	adds	r4, #1
 8002bd0:	9305      	str	r3, [sp, #20]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f04f 0c0a 	mov.w	ip, #10
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bde:	3a30      	subs	r2, #48	; 0x30
 8002be0:	2a09      	cmp	r2, #9
 8002be2:	d903      	bls.n	8002bec <_svfiprintf_r+0x1a8>
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0c5      	beq.n	8002b74 <_svfiprintf_r+0x130>
 8002be8:	9105      	str	r1, [sp, #20]
 8002bea:	e7c3      	b.n	8002b74 <_svfiprintf_r+0x130>
 8002bec:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e7f0      	b.n	8002bd8 <_svfiprintf_r+0x194>
 8002bf6:	ab03      	add	r3, sp, #12
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	462a      	mov	r2, r5
 8002bfc:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <_svfiprintf_r+0x1f8>)
 8002bfe:	a904      	add	r1, sp, #16
 8002c00:	4638      	mov	r0, r7
 8002c02:	f3af 8000 	nop.w
 8002c06:	1c42      	adds	r2, r0, #1
 8002c08:	4606      	mov	r6, r0
 8002c0a:	d1d6      	bne.n	8002bba <_svfiprintf_r+0x176>
 8002c0c:	89ab      	ldrh	r3, [r5, #12]
 8002c0e:	065b      	lsls	r3, r3, #25
 8002c10:	f53f af2c 	bmi.w	8002a6c <_svfiprintf_r+0x28>
 8002c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c16:	b01d      	add	sp, #116	; 0x74
 8002c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c1c:	ab03      	add	r3, sp, #12
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	462a      	mov	r2, r5
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <_svfiprintf_r+0x1f8>)
 8002c24:	a904      	add	r1, sp, #16
 8002c26:	4638      	mov	r0, r7
 8002c28:	f000 f87a 	bl	8002d20 <_printf_i>
 8002c2c:	e7eb      	b.n	8002c06 <_svfiprintf_r+0x1c2>
 8002c2e:	bf00      	nop
 8002c30:	080039db 	.word	0x080039db
 8002c34:	080039e5 	.word	0x080039e5
 8002c38:	00000000 	.word	0x00000000
 8002c3c:	0800298d 	.word	0x0800298d
 8002c40:	080039e1 	.word	0x080039e1

08002c44 <_printf_common>:
 8002c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c48:	4616      	mov	r6, r2
 8002c4a:	4699      	mov	r9, r3
 8002c4c:	688a      	ldr	r2, [r1, #8]
 8002c4e:	690b      	ldr	r3, [r1, #16]
 8002c50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c54:	4293      	cmp	r3, r2
 8002c56:	bfb8      	it	lt
 8002c58:	4613      	movlt	r3, r2
 8002c5a:	6033      	str	r3, [r6, #0]
 8002c5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c60:	4607      	mov	r7, r0
 8002c62:	460c      	mov	r4, r1
 8002c64:	b10a      	cbz	r2, 8002c6a <_printf_common+0x26>
 8002c66:	3301      	adds	r3, #1
 8002c68:	6033      	str	r3, [r6, #0]
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	0699      	lsls	r1, r3, #26
 8002c6e:	bf42      	ittt	mi
 8002c70:	6833      	ldrmi	r3, [r6, #0]
 8002c72:	3302      	addmi	r3, #2
 8002c74:	6033      	strmi	r3, [r6, #0]
 8002c76:	6825      	ldr	r5, [r4, #0]
 8002c78:	f015 0506 	ands.w	r5, r5, #6
 8002c7c:	d106      	bne.n	8002c8c <_printf_common+0x48>
 8002c7e:	f104 0a19 	add.w	sl, r4, #25
 8002c82:	68e3      	ldr	r3, [r4, #12]
 8002c84:	6832      	ldr	r2, [r6, #0]
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	42ab      	cmp	r3, r5
 8002c8a:	dc26      	bgt.n	8002cda <_printf_common+0x96>
 8002c8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c90:	1e13      	subs	r3, r2, #0
 8002c92:	6822      	ldr	r2, [r4, #0]
 8002c94:	bf18      	it	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	0692      	lsls	r2, r2, #26
 8002c9a:	d42b      	bmi.n	8002cf4 <_printf_common+0xb0>
 8002c9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ca0:	4649      	mov	r1, r9
 8002ca2:	4638      	mov	r0, r7
 8002ca4:	47c0      	blx	r8
 8002ca6:	3001      	adds	r0, #1
 8002ca8:	d01e      	beq.n	8002ce8 <_printf_common+0xa4>
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	68e5      	ldr	r5, [r4, #12]
 8002cae:	6832      	ldr	r2, [r6, #0]
 8002cb0:	f003 0306 	and.w	r3, r3, #6
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	bf08      	it	eq
 8002cb8:	1aad      	subeq	r5, r5, r2
 8002cba:	68a3      	ldr	r3, [r4, #8]
 8002cbc:	6922      	ldr	r2, [r4, #16]
 8002cbe:	bf0c      	ite	eq
 8002cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cc4:	2500      	movne	r5, #0
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	bfc4      	itt	gt
 8002cca:	1a9b      	subgt	r3, r3, r2
 8002ccc:	18ed      	addgt	r5, r5, r3
 8002cce:	2600      	movs	r6, #0
 8002cd0:	341a      	adds	r4, #26
 8002cd2:	42b5      	cmp	r5, r6
 8002cd4:	d11a      	bne.n	8002d0c <_printf_common+0xc8>
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	e008      	b.n	8002cec <_printf_common+0xa8>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	4652      	mov	r2, sl
 8002cde:	4649      	mov	r1, r9
 8002ce0:	4638      	mov	r0, r7
 8002ce2:	47c0      	blx	r8
 8002ce4:	3001      	adds	r0, #1
 8002ce6:	d103      	bne.n	8002cf0 <_printf_common+0xac>
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cf0:	3501      	adds	r5, #1
 8002cf2:	e7c6      	b.n	8002c82 <_printf_common+0x3e>
 8002cf4:	18e1      	adds	r1, r4, r3
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	2030      	movs	r0, #48	; 0x30
 8002cfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cfe:	4422      	add	r2, r4
 8002d00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d08:	3302      	adds	r3, #2
 8002d0a:	e7c7      	b.n	8002c9c <_printf_common+0x58>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	4622      	mov	r2, r4
 8002d10:	4649      	mov	r1, r9
 8002d12:	4638      	mov	r0, r7
 8002d14:	47c0      	blx	r8
 8002d16:	3001      	adds	r0, #1
 8002d18:	d0e6      	beq.n	8002ce8 <_printf_common+0xa4>
 8002d1a:	3601      	adds	r6, #1
 8002d1c:	e7d9      	b.n	8002cd2 <_printf_common+0x8e>
	...

08002d20 <_printf_i>:
 8002d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d24:	460c      	mov	r4, r1
 8002d26:	4691      	mov	r9, r2
 8002d28:	7e27      	ldrb	r7, [r4, #24]
 8002d2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d2c:	2f78      	cmp	r7, #120	; 0x78
 8002d2e:	4680      	mov	r8, r0
 8002d30:	469a      	mov	sl, r3
 8002d32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d36:	d807      	bhi.n	8002d48 <_printf_i+0x28>
 8002d38:	2f62      	cmp	r7, #98	; 0x62
 8002d3a:	d80a      	bhi.n	8002d52 <_printf_i+0x32>
 8002d3c:	2f00      	cmp	r7, #0
 8002d3e:	f000 80d8 	beq.w	8002ef2 <_printf_i+0x1d2>
 8002d42:	2f58      	cmp	r7, #88	; 0x58
 8002d44:	f000 80a3 	beq.w	8002e8e <_printf_i+0x16e>
 8002d48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d50:	e03a      	b.n	8002dc8 <_printf_i+0xa8>
 8002d52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d56:	2b15      	cmp	r3, #21
 8002d58:	d8f6      	bhi.n	8002d48 <_printf_i+0x28>
 8002d5a:	a001      	add	r0, pc, #4	; (adr r0, 8002d60 <_printf_i+0x40>)
 8002d5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002d60:	08002db9 	.word	0x08002db9
 8002d64:	08002dcd 	.word	0x08002dcd
 8002d68:	08002d49 	.word	0x08002d49
 8002d6c:	08002d49 	.word	0x08002d49
 8002d70:	08002d49 	.word	0x08002d49
 8002d74:	08002d49 	.word	0x08002d49
 8002d78:	08002dcd 	.word	0x08002dcd
 8002d7c:	08002d49 	.word	0x08002d49
 8002d80:	08002d49 	.word	0x08002d49
 8002d84:	08002d49 	.word	0x08002d49
 8002d88:	08002d49 	.word	0x08002d49
 8002d8c:	08002ed9 	.word	0x08002ed9
 8002d90:	08002dfd 	.word	0x08002dfd
 8002d94:	08002ebb 	.word	0x08002ebb
 8002d98:	08002d49 	.word	0x08002d49
 8002d9c:	08002d49 	.word	0x08002d49
 8002da0:	08002efb 	.word	0x08002efb
 8002da4:	08002d49 	.word	0x08002d49
 8002da8:	08002dfd 	.word	0x08002dfd
 8002dac:	08002d49 	.word	0x08002d49
 8002db0:	08002d49 	.word	0x08002d49
 8002db4:	08002ec3 	.word	0x08002ec3
 8002db8:	680b      	ldr	r3, [r1, #0]
 8002dba:	1d1a      	adds	r2, r3, #4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	600a      	str	r2, [r1, #0]
 8002dc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002dc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0a3      	b.n	8002f14 <_printf_i+0x1f4>
 8002dcc:	6825      	ldr	r5, [r4, #0]
 8002dce:	6808      	ldr	r0, [r1, #0]
 8002dd0:	062e      	lsls	r6, r5, #24
 8002dd2:	f100 0304 	add.w	r3, r0, #4
 8002dd6:	d50a      	bpl.n	8002dee <_printf_i+0xce>
 8002dd8:	6805      	ldr	r5, [r0, #0]
 8002dda:	600b      	str	r3, [r1, #0]
 8002ddc:	2d00      	cmp	r5, #0
 8002dde:	da03      	bge.n	8002de8 <_printf_i+0xc8>
 8002de0:	232d      	movs	r3, #45	; 0x2d
 8002de2:	426d      	negs	r5, r5
 8002de4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002de8:	485e      	ldr	r0, [pc, #376]	; (8002f64 <_printf_i+0x244>)
 8002dea:	230a      	movs	r3, #10
 8002dec:	e019      	b.n	8002e22 <_printf_i+0x102>
 8002dee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002df2:	6805      	ldr	r5, [r0, #0]
 8002df4:	600b      	str	r3, [r1, #0]
 8002df6:	bf18      	it	ne
 8002df8:	b22d      	sxthne	r5, r5
 8002dfa:	e7ef      	b.n	8002ddc <_printf_i+0xbc>
 8002dfc:	680b      	ldr	r3, [r1, #0]
 8002dfe:	6825      	ldr	r5, [r4, #0]
 8002e00:	1d18      	adds	r0, r3, #4
 8002e02:	6008      	str	r0, [r1, #0]
 8002e04:	0628      	lsls	r0, r5, #24
 8002e06:	d501      	bpl.n	8002e0c <_printf_i+0xec>
 8002e08:	681d      	ldr	r5, [r3, #0]
 8002e0a:	e002      	b.n	8002e12 <_printf_i+0xf2>
 8002e0c:	0669      	lsls	r1, r5, #25
 8002e0e:	d5fb      	bpl.n	8002e08 <_printf_i+0xe8>
 8002e10:	881d      	ldrh	r5, [r3, #0]
 8002e12:	4854      	ldr	r0, [pc, #336]	; (8002f64 <_printf_i+0x244>)
 8002e14:	2f6f      	cmp	r7, #111	; 0x6f
 8002e16:	bf0c      	ite	eq
 8002e18:	2308      	moveq	r3, #8
 8002e1a:	230a      	movne	r3, #10
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e22:	6866      	ldr	r6, [r4, #4]
 8002e24:	60a6      	str	r6, [r4, #8]
 8002e26:	2e00      	cmp	r6, #0
 8002e28:	bfa2      	ittt	ge
 8002e2a:	6821      	ldrge	r1, [r4, #0]
 8002e2c:	f021 0104 	bicge.w	r1, r1, #4
 8002e30:	6021      	strge	r1, [r4, #0]
 8002e32:	b90d      	cbnz	r5, 8002e38 <_printf_i+0x118>
 8002e34:	2e00      	cmp	r6, #0
 8002e36:	d04d      	beq.n	8002ed4 <_printf_i+0x1b4>
 8002e38:	4616      	mov	r6, r2
 8002e3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e3e:	fb03 5711 	mls	r7, r3, r1, r5
 8002e42:	5dc7      	ldrb	r7, [r0, r7]
 8002e44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e48:	462f      	mov	r7, r5
 8002e4a:	42bb      	cmp	r3, r7
 8002e4c:	460d      	mov	r5, r1
 8002e4e:	d9f4      	bls.n	8002e3a <_printf_i+0x11a>
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d10b      	bne.n	8002e6c <_printf_i+0x14c>
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	07df      	lsls	r7, r3, #31
 8002e58:	d508      	bpl.n	8002e6c <_printf_i+0x14c>
 8002e5a:	6923      	ldr	r3, [r4, #16]
 8002e5c:	6861      	ldr	r1, [r4, #4]
 8002e5e:	4299      	cmp	r1, r3
 8002e60:	bfde      	ittt	le
 8002e62:	2330      	movle	r3, #48	; 0x30
 8002e64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e6c:	1b92      	subs	r2, r2, r6
 8002e6e:	6122      	str	r2, [r4, #16]
 8002e70:	f8cd a000 	str.w	sl, [sp]
 8002e74:	464b      	mov	r3, r9
 8002e76:	aa03      	add	r2, sp, #12
 8002e78:	4621      	mov	r1, r4
 8002e7a:	4640      	mov	r0, r8
 8002e7c:	f7ff fee2 	bl	8002c44 <_printf_common>
 8002e80:	3001      	adds	r0, #1
 8002e82:	d14c      	bne.n	8002f1e <_printf_i+0x1fe>
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295
 8002e88:	b004      	add	sp, #16
 8002e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e8e:	4835      	ldr	r0, [pc, #212]	; (8002f64 <_printf_i+0x244>)
 8002e90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	680e      	ldr	r6, [r1, #0]
 8002e98:	061f      	lsls	r7, r3, #24
 8002e9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002e9e:	600e      	str	r6, [r1, #0]
 8002ea0:	d514      	bpl.n	8002ecc <_printf_i+0x1ac>
 8002ea2:	07d9      	lsls	r1, r3, #31
 8002ea4:	bf44      	itt	mi
 8002ea6:	f043 0320 	orrmi.w	r3, r3, #32
 8002eaa:	6023      	strmi	r3, [r4, #0]
 8002eac:	b91d      	cbnz	r5, 8002eb6 <_printf_i+0x196>
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	f023 0320 	bic.w	r3, r3, #32
 8002eb4:	6023      	str	r3, [r4, #0]
 8002eb6:	2310      	movs	r3, #16
 8002eb8:	e7b0      	b.n	8002e1c <_printf_i+0xfc>
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	f043 0320 	orr.w	r3, r3, #32
 8002ec0:	6023      	str	r3, [r4, #0]
 8002ec2:	2378      	movs	r3, #120	; 0x78
 8002ec4:	4828      	ldr	r0, [pc, #160]	; (8002f68 <_printf_i+0x248>)
 8002ec6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002eca:	e7e3      	b.n	8002e94 <_printf_i+0x174>
 8002ecc:	065e      	lsls	r6, r3, #25
 8002ece:	bf48      	it	mi
 8002ed0:	b2ad      	uxthmi	r5, r5
 8002ed2:	e7e6      	b.n	8002ea2 <_printf_i+0x182>
 8002ed4:	4616      	mov	r6, r2
 8002ed6:	e7bb      	b.n	8002e50 <_printf_i+0x130>
 8002ed8:	680b      	ldr	r3, [r1, #0]
 8002eda:	6826      	ldr	r6, [r4, #0]
 8002edc:	6960      	ldr	r0, [r4, #20]
 8002ede:	1d1d      	adds	r5, r3, #4
 8002ee0:	600d      	str	r5, [r1, #0]
 8002ee2:	0635      	lsls	r5, r6, #24
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	d501      	bpl.n	8002eec <_printf_i+0x1cc>
 8002ee8:	6018      	str	r0, [r3, #0]
 8002eea:	e002      	b.n	8002ef2 <_printf_i+0x1d2>
 8002eec:	0671      	lsls	r1, r6, #25
 8002eee:	d5fb      	bpl.n	8002ee8 <_printf_i+0x1c8>
 8002ef0:	8018      	strh	r0, [r3, #0]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6123      	str	r3, [r4, #16]
 8002ef6:	4616      	mov	r6, r2
 8002ef8:	e7ba      	b.n	8002e70 <_printf_i+0x150>
 8002efa:	680b      	ldr	r3, [r1, #0]
 8002efc:	1d1a      	adds	r2, r3, #4
 8002efe:	600a      	str	r2, [r1, #0]
 8002f00:	681e      	ldr	r6, [r3, #0]
 8002f02:	6862      	ldr	r2, [r4, #4]
 8002f04:	2100      	movs	r1, #0
 8002f06:	4630      	mov	r0, r6
 8002f08:	f7fd f96a 	bl	80001e0 <memchr>
 8002f0c:	b108      	cbz	r0, 8002f12 <_printf_i+0x1f2>
 8002f0e:	1b80      	subs	r0, r0, r6
 8002f10:	6060      	str	r0, [r4, #4]
 8002f12:	6863      	ldr	r3, [r4, #4]
 8002f14:	6123      	str	r3, [r4, #16]
 8002f16:	2300      	movs	r3, #0
 8002f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f1c:	e7a8      	b.n	8002e70 <_printf_i+0x150>
 8002f1e:	6923      	ldr	r3, [r4, #16]
 8002f20:	4632      	mov	r2, r6
 8002f22:	4649      	mov	r1, r9
 8002f24:	4640      	mov	r0, r8
 8002f26:	47d0      	blx	sl
 8002f28:	3001      	adds	r0, #1
 8002f2a:	d0ab      	beq.n	8002e84 <_printf_i+0x164>
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	079b      	lsls	r3, r3, #30
 8002f30:	d413      	bmi.n	8002f5a <_printf_i+0x23a>
 8002f32:	68e0      	ldr	r0, [r4, #12]
 8002f34:	9b03      	ldr	r3, [sp, #12]
 8002f36:	4298      	cmp	r0, r3
 8002f38:	bfb8      	it	lt
 8002f3a:	4618      	movlt	r0, r3
 8002f3c:	e7a4      	b.n	8002e88 <_printf_i+0x168>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	4632      	mov	r2, r6
 8002f42:	4649      	mov	r1, r9
 8002f44:	4640      	mov	r0, r8
 8002f46:	47d0      	blx	sl
 8002f48:	3001      	adds	r0, #1
 8002f4a:	d09b      	beq.n	8002e84 <_printf_i+0x164>
 8002f4c:	3501      	adds	r5, #1
 8002f4e:	68e3      	ldr	r3, [r4, #12]
 8002f50:	9903      	ldr	r1, [sp, #12]
 8002f52:	1a5b      	subs	r3, r3, r1
 8002f54:	42ab      	cmp	r3, r5
 8002f56:	dcf2      	bgt.n	8002f3e <_printf_i+0x21e>
 8002f58:	e7eb      	b.n	8002f32 <_printf_i+0x212>
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	f104 0619 	add.w	r6, r4, #25
 8002f60:	e7f5      	b.n	8002f4e <_printf_i+0x22e>
 8002f62:	bf00      	nop
 8002f64:	080039ec 	.word	0x080039ec
 8002f68:	080039fd 	.word	0x080039fd

08002f6c <memcpy>:
 8002f6c:	440a      	add	r2, r1
 8002f6e:	4291      	cmp	r1, r2
 8002f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f74:	d100      	bne.n	8002f78 <memcpy+0xc>
 8002f76:	4770      	bx	lr
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f82:	4291      	cmp	r1, r2
 8002f84:	d1f9      	bne.n	8002f7a <memcpy+0xe>
 8002f86:	bd10      	pop	{r4, pc}

08002f88 <memmove>:
 8002f88:	4288      	cmp	r0, r1
 8002f8a:	b510      	push	{r4, lr}
 8002f8c:	eb01 0402 	add.w	r4, r1, r2
 8002f90:	d902      	bls.n	8002f98 <memmove+0x10>
 8002f92:	4284      	cmp	r4, r0
 8002f94:	4623      	mov	r3, r4
 8002f96:	d807      	bhi.n	8002fa8 <memmove+0x20>
 8002f98:	1e43      	subs	r3, r0, #1
 8002f9a:	42a1      	cmp	r1, r4
 8002f9c:	d008      	beq.n	8002fb0 <memmove+0x28>
 8002f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fa6:	e7f8      	b.n	8002f9a <memmove+0x12>
 8002fa8:	4402      	add	r2, r0
 8002faa:	4601      	mov	r1, r0
 8002fac:	428a      	cmp	r2, r1
 8002fae:	d100      	bne.n	8002fb2 <memmove+0x2a>
 8002fb0:	bd10      	pop	{r4, pc}
 8002fb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fba:	e7f7      	b.n	8002fac <memmove+0x24>

08002fbc <_free_r>:
 8002fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fbe:	2900      	cmp	r1, #0
 8002fc0:	d048      	beq.n	8003054 <_free_r+0x98>
 8002fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fc6:	9001      	str	r0, [sp, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f1a1 0404 	sub.w	r4, r1, #4
 8002fce:	bfb8      	it	lt
 8002fd0:	18e4      	addlt	r4, r4, r3
 8002fd2:	f000 f8d3 	bl	800317c <__malloc_lock>
 8002fd6:	4a20      	ldr	r2, [pc, #128]	; (8003058 <_free_r+0x9c>)
 8002fd8:	9801      	ldr	r0, [sp, #4]
 8002fda:	6813      	ldr	r3, [r2, #0]
 8002fdc:	4615      	mov	r5, r2
 8002fde:	b933      	cbnz	r3, 8002fee <_free_r+0x32>
 8002fe0:	6063      	str	r3, [r4, #4]
 8002fe2:	6014      	str	r4, [r2, #0]
 8002fe4:	b003      	add	sp, #12
 8002fe6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fea:	f000 b8cd 	b.w	8003188 <__malloc_unlock>
 8002fee:	42a3      	cmp	r3, r4
 8002ff0:	d90b      	bls.n	800300a <_free_r+0x4e>
 8002ff2:	6821      	ldr	r1, [r4, #0]
 8002ff4:	1862      	adds	r2, r4, r1
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	bf04      	itt	eq
 8002ffa:	681a      	ldreq	r2, [r3, #0]
 8002ffc:	685b      	ldreq	r3, [r3, #4]
 8002ffe:	6063      	str	r3, [r4, #4]
 8003000:	bf04      	itt	eq
 8003002:	1852      	addeq	r2, r2, r1
 8003004:	6022      	streq	r2, [r4, #0]
 8003006:	602c      	str	r4, [r5, #0]
 8003008:	e7ec      	b.n	8002fe4 <_free_r+0x28>
 800300a:	461a      	mov	r2, r3
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	b10b      	cbz	r3, 8003014 <_free_r+0x58>
 8003010:	42a3      	cmp	r3, r4
 8003012:	d9fa      	bls.n	800300a <_free_r+0x4e>
 8003014:	6811      	ldr	r1, [r2, #0]
 8003016:	1855      	adds	r5, r2, r1
 8003018:	42a5      	cmp	r5, r4
 800301a:	d10b      	bne.n	8003034 <_free_r+0x78>
 800301c:	6824      	ldr	r4, [r4, #0]
 800301e:	4421      	add	r1, r4
 8003020:	1854      	adds	r4, r2, r1
 8003022:	42a3      	cmp	r3, r4
 8003024:	6011      	str	r1, [r2, #0]
 8003026:	d1dd      	bne.n	8002fe4 <_free_r+0x28>
 8003028:	681c      	ldr	r4, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	6053      	str	r3, [r2, #4]
 800302e:	4421      	add	r1, r4
 8003030:	6011      	str	r1, [r2, #0]
 8003032:	e7d7      	b.n	8002fe4 <_free_r+0x28>
 8003034:	d902      	bls.n	800303c <_free_r+0x80>
 8003036:	230c      	movs	r3, #12
 8003038:	6003      	str	r3, [r0, #0]
 800303a:	e7d3      	b.n	8002fe4 <_free_r+0x28>
 800303c:	6825      	ldr	r5, [r4, #0]
 800303e:	1961      	adds	r1, r4, r5
 8003040:	428b      	cmp	r3, r1
 8003042:	bf04      	itt	eq
 8003044:	6819      	ldreq	r1, [r3, #0]
 8003046:	685b      	ldreq	r3, [r3, #4]
 8003048:	6063      	str	r3, [r4, #4]
 800304a:	bf04      	itt	eq
 800304c:	1949      	addeq	r1, r1, r5
 800304e:	6021      	streq	r1, [r4, #0]
 8003050:	6054      	str	r4, [r2, #4]
 8003052:	e7c7      	b.n	8002fe4 <_free_r+0x28>
 8003054:	b003      	add	sp, #12
 8003056:	bd30      	pop	{r4, r5, pc}
 8003058:	20000098 	.word	0x20000098

0800305c <_malloc_r>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	1ccd      	adds	r5, r1, #3
 8003060:	f025 0503 	bic.w	r5, r5, #3
 8003064:	3508      	adds	r5, #8
 8003066:	2d0c      	cmp	r5, #12
 8003068:	bf38      	it	cc
 800306a:	250c      	movcc	r5, #12
 800306c:	2d00      	cmp	r5, #0
 800306e:	4606      	mov	r6, r0
 8003070:	db01      	blt.n	8003076 <_malloc_r+0x1a>
 8003072:	42a9      	cmp	r1, r5
 8003074:	d903      	bls.n	800307e <_malloc_r+0x22>
 8003076:	230c      	movs	r3, #12
 8003078:	6033      	str	r3, [r6, #0]
 800307a:	2000      	movs	r0, #0
 800307c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800307e:	f000 f87d 	bl	800317c <__malloc_lock>
 8003082:	4921      	ldr	r1, [pc, #132]	; (8003108 <_malloc_r+0xac>)
 8003084:	680a      	ldr	r2, [r1, #0]
 8003086:	4614      	mov	r4, r2
 8003088:	b99c      	cbnz	r4, 80030b2 <_malloc_r+0x56>
 800308a:	4f20      	ldr	r7, [pc, #128]	; (800310c <_malloc_r+0xb0>)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	b923      	cbnz	r3, 800309a <_malloc_r+0x3e>
 8003090:	4621      	mov	r1, r4
 8003092:	4630      	mov	r0, r6
 8003094:	f000 f862 	bl	800315c <_sbrk_r>
 8003098:	6038      	str	r0, [r7, #0]
 800309a:	4629      	mov	r1, r5
 800309c:	4630      	mov	r0, r6
 800309e:	f000 f85d 	bl	800315c <_sbrk_r>
 80030a2:	1c43      	adds	r3, r0, #1
 80030a4:	d123      	bne.n	80030ee <_malloc_r+0x92>
 80030a6:	230c      	movs	r3, #12
 80030a8:	6033      	str	r3, [r6, #0]
 80030aa:	4630      	mov	r0, r6
 80030ac:	f000 f86c 	bl	8003188 <__malloc_unlock>
 80030b0:	e7e3      	b.n	800307a <_malloc_r+0x1e>
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	1b5b      	subs	r3, r3, r5
 80030b6:	d417      	bmi.n	80030e8 <_malloc_r+0x8c>
 80030b8:	2b0b      	cmp	r3, #11
 80030ba:	d903      	bls.n	80030c4 <_malloc_r+0x68>
 80030bc:	6023      	str	r3, [r4, #0]
 80030be:	441c      	add	r4, r3
 80030c0:	6025      	str	r5, [r4, #0]
 80030c2:	e004      	b.n	80030ce <_malloc_r+0x72>
 80030c4:	6863      	ldr	r3, [r4, #4]
 80030c6:	42a2      	cmp	r2, r4
 80030c8:	bf0c      	ite	eq
 80030ca:	600b      	streq	r3, [r1, #0]
 80030cc:	6053      	strne	r3, [r2, #4]
 80030ce:	4630      	mov	r0, r6
 80030d0:	f000 f85a 	bl	8003188 <__malloc_unlock>
 80030d4:	f104 000b 	add.w	r0, r4, #11
 80030d8:	1d23      	adds	r3, r4, #4
 80030da:	f020 0007 	bic.w	r0, r0, #7
 80030de:	1ac2      	subs	r2, r0, r3
 80030e0:	d0cc      	beq.n	800307c <_malloc_r+0x20>
 80030e2:	1a1b      	subs	r3, r3, r0
 80030e4:	50a3      	str	r3, [r4, r2]
 80030e6:	e7c9      	b.n	800307c <_malloc_r+0x20>
 80030e8:	4622      	mov	r2, r4
 80030ea:	6864      	ldr	r4, [r4, #4]
 80030ec:	e7cc      	b.n	8003088 <_malloc_r+0x2c>
 80030ee:	1cc4      	adds	r4, r0, #3
 80030f0:	f024 0403 	bic.w	r4, r4, #3
 80030f4:	42a0      	cmp	r0, r4
 80030f6:	d0e3      	beq.n	80030c0 <_malloc_r+0x64>
 80030f8:	1a21      	subs	r1, r4, r0
 80030fa:	4630      	mov	r0, r6
 80030fc:	f000 f82e 	bl	800315c <_sbrk_r>
 8003100:	3001      	adds	r0, #1
 8003102:	d1dd      	bne.n	80030c0 <_malloc_r+0x64>
 8003104:	e7cf      	b.n	80030a6 <_malloc_r+0x4a>
 8003106:	bf00      	nop
 8003108:	20000098 	.word	0x20000098
 800310c:	2000009c 	.word	0x2000009c

08003110 <_realloc_r>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	4607      	mov	r7, r0
 8003114:	4614      	mov	r4, r2
 8003116:	460e      	mov	r6, r1
 8003118:	b921      	cbnz	r1, 8003124 <_realloc_r+0x14>
 800311a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800311e:	4611      	mov	r1, r2
 8003120:	f7ff bf9c 	b.w	800305c <_malloc_r>
 8003124:	b922      	cbnz	r2, 8003130 <_realloc_r+0x20>
 8003126:	f7ff ff49 	bl	8002fbc <_free_r>
 800312a:	4625      	mov	r5, r4
 800312c:	4628      	mov	r0, r5
 800312e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003130:	f000 f830 	bl	8003194 <_malloc_usable_size_r>
 8003134:	42a0      	cmp	r0, r4
 8003136:	d20f      	bcs.n	8003158 <_realloc_r+0x48>
 8003138:	4621      	mov	r1, r4
 800313a:	4638      	mov	r0, r7
 800313c:	f7ff ff8e 	bl	800305c <_malloc_r>
 8003140:	4605      	mov	r5, r0
 8003142:	2800      	cmp	r0, #0
 8003144:	d0f2      	beq.n	800312c <_realloc_r+0x1c>
 8003146:	4631      	mov	r1, r6
 8003148:	4622      	mov	r2, r4
 800314a:	f7ff ff0f 	bl	8002f6c <memcpy>
 800314e:	4631      	mov	r1, r6
 8003150:	4638      	mov	r0, r7
 8003152:	f7ff ff33 	bl	8002fbc <_free_r>
 8003156:	e7e9      	b.n	800312c <_realloc_r+0x1c>
 8003158:	4635      	mov	r5, r6
 800315a:	e7e7      	b.n	800312c <_realloc_r+0x1c>

0800315c <_sbrk_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4d06      	ldr	r5, [pc, #24]	; (8003178 <_sbrk_r+0x1c>)
 8003160:	2300      	movs	r3, #0
 8003162:	4604      	mov	r4, r0
 8003164:	4608      	mov	r0, r1
 8003166:	602b      	str	r3, [r5, #0]
 8003168:	f7fd fc64 	bl	8000a34 <_sbrk>
 800316c:	1c43      	adds	r3, r0, #1
 800316e:	d102      	bne.n	8003176 <_sbrk_r+0x1a>
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	b103      	cbz	r3, 8003176 <_sbrk_r+0x1a>
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	bd38      	pop	{r3, r4, r5, pc}
 8003178:	200001a8 	.word	0x200001a8

0800317c <__malloc_lock>:
 800317c:	4801      	ldr	r0, [pc, #4]	; (8003184 <__malloc_lock+0x8>)
 800317e:	f000 b811 	b.w	80031a4 <__retarget_lock_acquire_recursive>
 8003182:	bf00      	nop
 8003184:	200001b0 	.word	0x200001b0

08003188 <__malloc_unlock>:
 8003188:	4801      	ldr	r0, [pc, #4]	; (8003190 <__malloc_unlock+0x8>)
 800318a:	f000 b80c 	b.w	80031a6 <__retarget_lock_release_recursive>
 800318e:	bf00      	nop
 8003190:	200001b0 	.word	0x200001b0

08003194 <_malloc_usable_size_r>:
 8003194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003198:	1f18      	subs	r0, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	bfbc      	itt	lt
 800319e:	580b      	ldrlt	r3, [r1, r0]
 80031a0:	18c0      	addlt	r0, r0, r3
 80031a2:	4770      	bx	lr

080031a4 <__retarget_lock_acquire_recursive>:
 80031a4:	4770      	bx	lr

080031a6 <__retarget_lock_release_recursive>:
 80031a6:	4770      	bx	lr

080031a8 <_init>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	bf00      	nop
 80031ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ae:	bc08      	pop	{r3}
 80031b0:	469e      	mov	lr, r3
 80031b2:	4770      	bx	lr

080031b4 <_fini>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	bf00      	nop
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr
