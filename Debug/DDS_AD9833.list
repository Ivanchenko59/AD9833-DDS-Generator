
DDS_AD9833.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000160c  08005280  08005280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800688c  0800688c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800688c  0800688c  0001688c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006894  08006894  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006894  08006894  00016894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006898  08006898  00016898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800689c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000090  0800692c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  0800692c  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014485  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d8  00000000  00000000  00034545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00036f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  00037c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018213  00000000  00000000  00038860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131c9  00000000  00000000  00050a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e77c  00000000  00000000  00063c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f23b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a84  00000000  00000000  000f240c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005268 	.word	0x08005268

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08005268 	.word	0x08005268

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <AD9833_Select>:
    uint8_t _freq_source = 0;
    uint8_t _phase_source = 0;
    uint8_t _reset_state = 0;

void AD9833_Select(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD9833_FSYNC_GPIO_Port, AD9833_FSYNC_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <AD9833_Select+0x14>)
 8000b8e:	f001 fba7 	bl	80022e0 <HAL_GPIO_WritePin>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40020400 	.word	0x40020400

08000b9c <AD9833_Unselect>:

void AD9833_Unselect(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AD9833_FSYNC_GPIO_Port, AD9833_FSYNC_Pin, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2104      	movs	r1, #4
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <AD9833_Unselect+0x14>)
 8000ba6:	f001 fb9b 	bl	80022e0 <HAL_GPIO_WritePin>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <AD9833_WriteRegister>:

void AD9833_WriteRegister(uint16_t data)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
	AD9833_Select();
 8000bbe:	f7ff ffe1 	bl	8000b84 <AD9833_Select>
	uint8_t LByte = data & 0xff;
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	73fb      	strb	r3, [r7, #15]
	uint8_t HByte = (data >> 8) & 0xff;
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&AD9833_SPI_PORT, &HByte, 1, HAL_MAX_DELAY);
 8000bd2:	f107 010e 	add.w	r1, r7, #14
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <AD9833_WriteRegister+0x4c>)
 8000bde:	f002 f836 	bl	8002c4e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&AD9833_SPI_PORT, &LByte, 1, HAL_MAX_DELAY);
 8000be2:	f107 010f 	add.w	r1, r7, #15
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	2201      	movs	r2, #1
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <AD9833_WriteRegister+0x4c>)
 8000bee:	f002 f82e 	bl	8002c4e <HAL_SPI_Transmit>
	AD9833_Unselect();
 8000bf2:	f7ff ffd3 	bl	8000b9c <AD9833_Unselect>
}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000e8 	.word	0x200000e8

08000c04 <AD9833_WriteCfgReg>:

void AD9833_WriteCfgReg(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
	uint16_t cfg = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	80fb      	strh	r3, [r7, #6]
	cfg |= _waveform;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <AD9833_WriteCfgReg+0x88>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	80fb      	strh	r3, [r7, #6]
	cfg |= _sleep_mode;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <AD9833_WriteCfgReg+0x8c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	88fb      	ldrh	r3, [r7, #6]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	80fb      	strh	r3, [r7, #6]
	cfg |= (_freq_source ? F_SELECT_CFG : 0);	//it's unimportant because don't use FREQ1
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <AD9833_WriteCfgReg+0x90>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <AD9833_WriteCfgReg+0x30>
 8000c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c32:	e000      	b.n	8000c36 <AD9833_WriteCfgReg+0x32>
 8000c34:	2200      	movs	r2, #0
 8000c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b21b      	sxth	r3, r3
 8000c3e:	80fb      	strh	r3, [r7, #6]
	cfg |= (_phase_source ? P_SELECT_CFG : 0);	//it's unimportant because don't use PHASE1
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <AD9833_WriteCfgReg+0x94>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <AD9833_WriteCfgReg+0x4a>
 8000c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c4c:	e000      	b.n	8000c50 <AD9833_WriteCfgReg+0x4c>
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	80fb      	strh	r3, [r7, #6]
	cfg |= (_reset_state ? RESET_CFG : 0);
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <AD9833_WriteCfgReg+0x98>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <AD9833_WriteCfgReg+0x64>
 8000c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c66:	e000      	b.n	8000c6a <AD9833_WriteCfgReg+0x66>
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	80fb      	strh	r3, [r7, #6]
	cfg |= B28_CFG;
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c7a:	80fb      	strh	r3, [r7, #6]
	AD9833_WriteRegister(cfg);
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff98 	bl	8000bb4 <AD9833_WriteRegister>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200000ac 	.word	0x200000ac
 8000c90:	200000ad 	.word	0x200000ad
 8000c94:	200000ae 	.word	0x200000ae
 8000c98:	200000af 	.word	0x200000af
 8000c9c:	200000b0 	.word	0x200000b0

08000ca0 <AD9833_SetWaveform>:

void AD9833_SetWaveform(WaveDef Wave)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	if (Wave == wave_sine) 			_waveform = WAVEFORM_SINE;
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d103      	bne.n	8000cb8 <AD9833_SetWaveform+0x18>
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <AD9833_SetWaveform+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	e00c      	b.n	8000cd2 <AD9833_SetWaveform+0x32>
	else if (Wave == wave_square) 	_waveform = WAVEFORM_SQUARE;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d103      	bne.n	8000cc6 <AD9833_SetWaveform+0x26>
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <AD9833_SetWaveform+0x40>)
 8000cc0:	2228      	movs	r2, #40	; 0x28
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	e005      	b.n	8000cd2 <AD9833_SetWaveform+0x32>
	else if (Wave == wave_triangle)	_waveform = WAVEFORM_TRIANGLE;
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <AD9833_SetWaveform+0x32>
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <AD9833_SetWaveform+0x40>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	701a      	strb	r2, [r3, #0]
	AD9833_WriteCfgReg();
 8000cd2:	f7ff ff97 	bl	8000c04 <AD9833_WriteCfgReg>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000ac 	.word	0x200000ac

08000ce4 <AD9833_SetFrequency>:

void AD9833_SetFrequency(uint32_t freq)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	// TODO: calculate max frequency based on refFrequency.
	// Use the calculations for sanity checks on numbers.
	// Sanity check on frequency: Square - refFrequency / 2
	// Sine/Triangle - refFrequency / 4

	if (freq > (FMCLK >> 1))	//bitwise FMCLK / 2
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <AD9833_SetFrequency+0x68>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d901      	bls.n	8000cf8 <AD9833_SetFrequency+0x14>
		freq = FMCLK >> 1;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <AD9833_SetFrequency+0x68>)
 8000cf6:	607b      	str	r3, [r7, #4]
	else if (freq < 0) freq = 0;

	uint32_t freq_reg = (float)freq * (float)((1 << 28) / FMCLK); // Tuning word
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d0e:	ee17 3a90 	vmov	r3, s15
 8000d12:	60fb      	str	r3, [r7, #12]

	uint16_t LSB = FREQ0_REG | (freq_reg & 0x3FFF);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d22:	817b      	strh	r3, [r7, #10]
	uint16_t MSB = FREQ0_REG | (freq_reg >> 14);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	0b9b      	lsrs	r3, r3, #14
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2e:	813b      	strh	r3, [r7, #8]

	AD9833_WriteCfgReg();	// Update Config Register
 8000d30:	f7ff ff68 	bl	8000c04 <AD9833_WriteCfgReg>
	AD9833_WriteRegister(LSB);
 8000d34:	897b      	ldrh	r3, [r7, #10]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff3c 	bl	8000bb4 <AD9833_WriteRegister>
	AD9833_WriteRegister(MSB);
 8000d3c:	893b      	ldrh	r3, [r7, #8]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff38 	bl	8000bb4 <AD9833_WriteRegister>
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	00bebc20 	.word	0x00bebc20

08000d50 <AD9833_SetPhase>:

void AD9833_SetPhase(uint16_t phase_deg)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
	if(phase_deg < 0) phase_deg = 0;
	else if (phase_deg > 360) phase_deg %= 360;
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000d60:	d90b      	bls.n	8000d7a <AD9833_SetPhase+0x2a>
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	08da      	lsrs	r2, r3, #3
 8000d66:	4918      	ldr	r1, [pc, #96]	; (8000dc8 <AD9833_SetPhase+0x78>)
 8000d68:	fba1 1202 	umull	r1, r2, r1, r2
 8000d6c:	0892      	lsrs	r2, r2, #2
 8000d6e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000d72:	fb01 f202 	mul.w	r2, r1, r2
 8000d76:	1a9b      	subs	r3, r3, r2
 8000d78:	80fb      	strh	r3, [r7, #6]
	uint16_t phase_val  = ((uint16_t)(phase_deg * BITS_PER_DEG)) &  0xFFF;
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fcfb 	bl	8000778 <__aeabi_i2d>
 8000d82:	a30f      	add	r3, pc, #60	; (adr r3, 8000dc0 <AD9833_SetPhase+0x70>)
 8000d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d88:	f7ff fa7a 	bl	8000280 <__aeabi_dmul>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4610      	mov	r0, r2
 8000d92:	4619      	mov	r1, r3
 8000d94:	f7ff fd5a 	bl	800084c <__aeabi_d2uiz>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000da0:	81fb      	strh	r3, [r7, #14]
	AD9833_WriteRegister(PHASE0_REG | phase_val);
 8000da2:	89fb      	ldrh	r3, [r7, #14]
 8000da4:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8000da8:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff00 	bl	8000bb4 <AD9833_WriteRegister>
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	f3af 8000 	nop.w
 8000dc0:	16c16c23 	.word	0x16c16c23
 8000dc4:	4026c16c 	.word	0x4026c16c
 8000dc8:	16c16c17 	.word	0x16c16c17

08000dcc <AD9833_Init>:

void AD9833_Init(WaveDef Wave, uint32_t freq, uint16_t phase_deg)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	80bb      	strh	r3, [r7, #4]
	AD9833_OutputEnable(0);
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 f815 	bl	8000e0c <AD9833_OutputEnable>
	AD9833_SetWaveform(Wave);
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff5b 	bl	8000ca0 <AD9833_SetWaveform>
	AD9833_WriteCfgReg();
 8000dea:	f7ff ff0b 	bl	8000c04 <AD9833_WriteCfgReg>
	AD9833_SetFrequency(freq);
 8000dee:	6838      	ldr	r0, [r7, #0]
 8000df0:	f7ff ff78 	bl	8000ce4 <AD9833_SetFrequency>
	AD9833_SetPhase(phase_deg);
 8000df4:	88bb      	ldrh	r3, [r7, #4]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffaa 	bl	8000d50 <AD9833_SetPhase>
	AD9833_OutputEnable(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f000 f805 	bl	8000e0c <AD9833_OutputEnable>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <AD9833_OutputEnable>:
	_sleep_mode = mode;
	AD9833_WriteCfgReg();
}

void AD9833_OutputEnable(uint8_t output_state)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	_reset_state = !output_state;
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bf0c      	ite	eq
 8000e1c:	2301      	moveq	r3, #1
 8000e1e:	2300      	movne	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <AD9833_OutputEnable+0x28>)
 8000e26:	701a      	strb	r2, [r3, #0]
	AD9833_WriteCfgReg();
 8000e28:	f7ff feec 	bl	8000c04 <AD9833_WriteCfgReg>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200000b0 	.word	0x200000b0

08000e38 <Encoder_Init>:

/*
 * @brief Starts the TIM Encoder Interface
 */
void Encoder_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000e3c:	213c      	movs	r1, #60	; 0x3c
 8000e3e:	4802      	ldr	r0, [pc, #8]	; (8000e48 <Encoder_Init+0x10>)
 8000e40:	f002 f9b2 	bl	80031a8 <HAL_TIM_Encoder_Start>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000198 	.word	0x20000198

08000e4c <Encoder_Read>:
/*
 * @brief Read Timer Counter Register value
 * @retval Value of the timer counter register (TIM1_CNT) divided by 2
 */
uint16_t Encoder_Read(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
	int16_t val = __HAL_TIM_GET_COUNTER(&htim1);
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <Encoder_Read+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	80fb      	strh	r3, [r7, #6]
	return val >> 1;
 8000e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5e:	105b      	asrs	r3, r3, #1
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	b29b      	uxth	r3, r3
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	20000198 	.word	0x20000198

08000e74 <Encoder_Get_Status>:
/*
 * @brief Read the current state of the encoder
 * @retval Current encoder status
 */
Encoder_Status Encoder_Get_Status(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	new_count = Encoder_Read();
 8000e78:	f7ff ffe8 	bl	8000e4c <Encoder_Read>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <Encoder_Get_Status+0x64>)
 8000e82:	801a      	strh	r2, [r3, #0]
	if (new_count != prev_count) {
 8000e84:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <Encoder_Get_Status+0x64>)
 8000e86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <Encoder_Get_Status+0x68>)
 8000e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d01e      	beq.n	8000ed2 <Encoder_Get_Status+0x5e>
		if (new_count > prev_count) {
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <Encoder_Get_Status+0x64>)
 8000e96:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <Encoder_Get_Status+0x68>)
 8000e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dd06      	ble.n	8000eb2 <Encoder_Get_Status+0x3e>
			prev_count = new_count;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <Encoder_Get_Status+0x64>)
 8000ea6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <Encoder_Get_Status+0x68>)
 8000eac:	801a      	strh	r2, [r3, #0]
			return Incremented;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e010      	b.n	8000ed4 <Encoder_Get_Status+0x60>
		}
		else if (new_count < prev_count){
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <Encoder_Get_Status+0x64>)
 8000eb4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <Encoder_Get_Status+0x68>)
 8000eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	da07      	bge.n	8000ed2 <Encoder_Get_Status+0x5e>
			prev_count = new_count;
 8000ec2:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <Encoder_Get_Status+0x64>)
 8000ec4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <Encoder_Get_Status+0x68>)
 8000eca:	801a      	strh	r2, [r3, #0]
			return Decremented;
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed0:	e000      	b.n	8000ed4 <Encoder_Get_Status+0x60>
		}
	}
	return Neutral;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200000b2 	.word	0x200000b2
 8000edc:	200000b4 	.word	0x200000b4

08000ee0 <Button_Get_Status>:
/*
 * @brief Read and recognizes long and short presses encoder button
 * @retval Current encoder button status
 */
Button_Status Button_Get_Status(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	btn.state = !HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin);
 8000ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee8:	483e      	ldr	r0, [pc, #248]	; (8000fe4 <Button_Get_Status+0x104>)
 8000eea:	f001 f9e1 	bl	80022b0 <HAL_GPIO_ReadPin>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bf0c      	ite	eq
 8000ef4:	2301      	moveq	r3, #1
 8000ef6:	2300      	movne	r3, #0
 8000ef8:	b2d9      	uxtb	r1, r3
 8000efa:	4a3b      	ldr	r2, [pc, #236]	; (8000fe8 <Button_Get_Status+0x108>)
 8000efc:	7813      	ldrb	r3, [r2, #0]
 8000efe:	f361 0300 	bfi	r3, r1, #0, #1
 8000f02:	7013      	strb	r3, [r2, #0]

	if (btn.state && !btn.short_state && ((HAL_GetTick() - btn_time) > BUTTON_SHORT_PRESS_DELAY)) {
 8000f04:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <Button_Get_Status+0x108>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d01e      	beq.n	8000f50 <Button_Get_Status+0x70>
 8000f12:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <Button_Get_Status+0x108>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d117      	bne.n	8000f50 <Button_Get_Status+0x70>
 8000f20:	f000 ff2c 	bl	8001d7c <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	4b31      	ldr	r3, [pc, #196]	; (8000fec <Button_Get_Status+0x10c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b64      	cmp	r3, #100	; 0x64
 8000f2e:	d90f      	bls.n	8000f50 <Button_Get_Status+0x70>
		btn.short_state = 1;
 8000f30:	4a2d      	ldr	r2, [pc, #180]	; (8000fe8 <Button_Get_Status+0x108>)
 8000f32:	7813      	ldrb	r3, [r2, #0]
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	7013      	strb	r3, [r2, #0]
		btn.long_state = 0;
 8000f3a:	4a2b      	ldr	r2, [pc, #172]	; (8000fe8 <Button_Get_Status+0x108>)
 8000f3c:	7813      	ldrb	r3, [r2, #0]
 8000f3e:	f36f 0382 	bfc	r3, #2, #1
 8000f42:	7013      	strb	r3, [r2, #0]
		btn_time = HAL_GetTick();
 8000f44:	f000 ff1a 	bl	8001d7c <HAL_GetTick>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a28      	ldr	r2, [pc, #160]	; (8000fec <Button_Get_Status+0x10c>)
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e046      	b.n	8000fde <Button_Get_Status+0xfe>
	}
	else if (btn.state && !btn.long_state && (HAL_GetTick() - btn_time) > BUTTON_LONG_PRESS_DELAY) {
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <Button_Get_Status+0x108>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d016      	beq.n	8000f8c <Button_Get_Status+0xac>
 8000f5e:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <Button_Get_Status+0x108>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d10f      	bne.n	8000f8c <Button_Get_Status+0xac>
 8000f6c:	f000 ff06 	bl	8001d7c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <Button_Get_Status+0x10c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f7c:	d906      	bls.n	8000f8c <Button_Get_Status+0xac>
		btn.long_state = 1;
 8000f7e:	4a1a      	ldr	r2, [pc, #104]	; (8000fe8 <Button_Get_Status+0x108>)
 8000f80:	7813      	ldrb	r3, [r2, #0]
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	7013      	strb	r3, [r2, #0]
		return Long_Press;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e029      	b.n	8000fe0 <Button_Get_Status+0x100>
	}
	else if (!btn.state && btn.short_state && (HAL_GetTick() - btn_time) > BUTTON_SHORT_PRESS_DELAY) {
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <Button_Get_Status+0x108>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d121      	bne.n	8000fde <Button_Get_Status+0xfe>
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <Button_Get_Status+0x108>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d01a      	beq.n	8000fde <Button_Get_Status+0xfe>
 8000fa8:	f000 fee8 	bl	8001d7c <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <Button_Get_Status+0x10c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b64      	cmp	r3, #100	; 0x64
 8000fb6:	d912      	bls.n	8000fde <Button_Get_Status+0xfe>
		btn.short_state = 0;
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <Button_Get_Status+0x108>)
 8000fba:	7813      	ldrb	r3, [r2, #0]
 8000fbc:	f36f 0341 	bfc	r3, #1, #1
 8000fc0:	7013      	strb	r3, [r2, #0]
		btn_time = HAL_GetTick();
 8000fc2:	f000 fedb 	bl	8001d7c <HAL_GetTick>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a08      	ldr	r2, [pc, #32]	; (8000fec <Button_Get_Status+0x10c>)
 8000fca:	6013      	str	r3, [r2, #0]
		if(!btn.long_state) {
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <Button_Get_Status+0x108>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <Button_Get_Status+0xfe>
			return Short_Press;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <Button_Get_Status+0x100>
		}
	}
	return False_Press;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	200000b8 	.word	0x200000b8
 8000fec:	200000bc 	.word	0x200000bc

08000ff0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <MX_GPIO_Init+0xb8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a26      	ldr	r2, [pc, #152]	; (80010a8 <MX_GPIO_Init+0xb8>)
 8001010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <MX_GPIO_Init+0xb8>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MX_GPIO_Init+0xb8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a1f      	ldr	r2, [pc, #124]	; (80010a8 <MX_GPIO_Init+0xb8>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_GPIO_Init+0xb8>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <MX_GPIO_Init+0xb8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <MX_GPIO_Init+0xb8>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_GPIO_Init+0xb8>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AD9833_FSYNC_Pin|ST7735_CS_Pin|ST7735_RES_Pin|ST7735_DC_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001060:	4812      	ldr	r0, [pc, #72]	; (80010ac <MX_GPIO_Init+0xbc>)
 8001062:	f001 f93d 	bl	80022e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = AD9833_FSYNC_Pin|ST7735_CS_Pin|ST7735_RES_Pin|ST7735_DC_Pin;
 8001066:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
 800106a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	480b      	ldr	r0, [pc, #44]	; (80010ac <MX_GPIO_Init+0xbc>)
 8001080:	f000 ff92 	bl	8001fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001088:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_GPIO_Init+0xc0>)
 800109a:	f000 ff85 	bl	8001fa8 <HAL_GPIO_Init>

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020000 	.word	0x40020000

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ba:	f000 fdf9 	bl	8001cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010be:	f000 fb39 	bl	8001734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c2:	f7ff ff95 	bl	8000ff0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010c6:	f000 fba5 	bl	8001814 <MX_SPI1_Init>
  MX_SPI2_Init();
 80010ca:	f000 fbd9 	bl	8001880 <MX_SPI2_Init>
  MX_TIM1_Init();
 80010ce:	f000 fd25 	bl	8001b1c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 80010d2:	f002 faeb 	bl	80036ac <ST7735_Init>
  AD9833_Init(wave_sine, freq, 0);
 80010d6:	4bb9      	ldr	r3, [pc, #740]	; (80013bc <main+0x308>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2200      	movs	r2, #0
 80010dc:	4619      	mov	r1, r3
 80010de:	2002      	movs	r0, #2
 80010e0:	f7ff fe74 	bl	8000dcc <AD9833_Init>
  Encoder_Init();
 80010e4:	f7ff fea8 	bl	8000e38 <Encoder_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ST7735_FillScreen(ST7735_BLACK);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f002 fcdb 	bl	8003aa4 <ST7735_FillScreen>
  ST7735_WriteString(10, 4, "AD9833 DDS GENERATOR", Font_7x10, ST7735_DARKGREY, ST7735_BLACK);
 80010ee:	4bb4      	ldr	r3, [pc, #720]	; (80013c0 <main+0x30c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	9202      	str	r2, [sp, #8]
 80010f4:	f647 32ef 	movw	r2, #31727	; 0x7bef
 80010f8:	9201      	str	r2, [sp, #4]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	9200      	str	r2, [sp, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4ab0      	ldr	r2, [pc, #704]	; (80013c4 <main+0x310>)
 8001102:	2104      	movs	r1, #4
 8001104:	200a      	movs	r0, #10
 8001106:	f002 fb96 	bl	8003836 <ST7735_WriteString>

  ST7735_FillRectangle(25, 70, 12, 2, ST7735_DARKGREY);
 800110a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2302      	movs	r3, #2
 8001112:	220c      	movs	r2, #12
 8001114:	2146      	movs	r1, #70	; 0x46
 8001116:	2019      	movs	r0, #25
 8001118:	f002 fc50 	bl	80039bc <ST7735_FillRectangle>
  ST7735_FillRectangle(49, 70, 35, 2, ST7735_DARKGREY);
 800111c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2302      	movs	r3, #2
 8001124:	2223      	movs	r2, #35	; 0x23
 8001126:	2146      	movs	r1, #70	; 0x46
 8001128:	2031      	movs	r0, #49	; 0x31
 800112a:	f002 fc47 	bl	80039bc <ST7735_FillRectangle>
  ST7735_FillRectangle(97, 70, 35, 2, ST7735_DARKGREY);
 800112e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2302      	movs	r3, #2
 8001136:	2223      	movs	r2, #35	; 0x23
 8001138:	2146      	movs	r1, #70	; 0x46
 800113a:	2061      	movs	r0, #97	; 0x61
 800113c:	f002 fc3e 	bl	80039bc <ST7735_FillRectangle>
  ST7735_WriteString(21, 75, "MHz  kHz    Hz", Font_7x10, ST7735_DARKGREY, ST7735_BLACK);
 8001140:	4b9f      	ldr	r3, [pc, #636]	; (80013c0 <main+0x30c>)
 8001142:	2200      	movs	r2, #0
 8001144:	9202      	str	r2, [sp, #8]
 8001146:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800114a:	9201      	str	r2, [sp, #4]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	9200      	str	r2, [sp, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a9d      	ldr	r2, [pc, #628]	; (80013c8 <main+0x314>)
 8001154:	214b      	movs	r1, #75	; 0x4b
 8001156:	2015      	movs	r0, #21
 8001158:	f002 fb6d 	bl	8003836 <ST7735_WriteString>

  MHz = freq / 1000000;
 800115c:	4b97      	ldr	r3, [pc, #604]	; (80013bc <main+0x308>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a9a      	ldr	r2, [pc, #616]	; (80013cc <main+0x318>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	0c9b      	lsrs	r3, r3, #18
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b99      	ldr	r3, [pc, #612]	; (80013d0 <main+0x31c>)
 800116c:	801a      	strh	r2, [r3, #0]
  kHz = freq / 1000 % 1000;
 800116e:	4b93      	ldr	r3, [pc, #588]	; (80013bc <main+0x308>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a98      	ldr	r2, [pc, #608]	; (80013d4 <main+0x320>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	099a      	lsrs	r2, r3, #6
 800117a:	4b96      	ldr	r3, [pc, #600]	; (80013d4 <main+0x320>)
 800117c:	fba3 1302 	umull	r1, r3, r3, r2
 8001180:	099b      	lsrs	r3, r3, #6
 8001182:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001186:	fb01 f303 	mul.w	r3, r1, r3
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b92      	ldr	r3, [pc, #584]	; (80013d8 <main+0x324>)
 8001190:	801a      	strh	r2, [r3, #0]
  Hz = freq % 1000;
 8001192:	4b8a      	ldr	r3, [pc, #552]	; (80013bc <main+0x308>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4b8f      	ldr	r3, [pc, #572]	; (80013d4 <main+0x320>)
 8001198:	fba3 1302 	umull	r1, r3, r3, r2
 800119c:	099b      	lsrs	r3, r3, #6
 800119e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011a2:	fb01 f303 	mul.w	r3, r1, r3
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	4b8c      	ldr	r3, [pc, #560]	; (80013dc <main+0x328>)
 80011ac:	801a      	strh	r2, [r3, #0]
  sprintf(Str_Buffer, "%1d,%03d,%03d", MHz, kHz, Hz);
 80011ae:	4b88      	ldr	r3, [pc, #544]	; (80013d0 <main+0x31c>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b88      	ldr	r3, [pc, #544]	; (80013d8 <main+0x324>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	4b88      	ldr	r3, [pc, #544]	; (80013dc <main+0x328>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	460b      	mov	r3, r1
 80011c2:	4987      	ldr	r1, [pc, #540]	; (80013e0 <main+0x32c>)
 80011c4:	4887      	ldr	r0, [pc, #540]	; (80013e4 <main+0x330>)
 80011c6:	f003 fc21 	bl	8004a0c <siprintf>
  SineIcon(18, 92, ST7735_YELLOW);
 80011ca:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80011ce:	215c      	movs	r1, #92	; 0x5c
 80011d0:	2012      	movs	r0, #18
 80011d2:	f003 f8e2 	bl	800439a <SineIcon>
  SquareIcon(63, 92, ST7735_LIGHTGREY);
 80011d6:	f24c 6218 	movw	r2, #50712	; 0xc618
 80011da:	215c      	movs	r1, #92	; 0x5c
 80011dc:	203f      	movs	r0, #63	; 0x3f
 80011de:	f002 ffd6 	bl	800418e <SquareIcon>
  TriangleIcon(108, 92, ST7735_LIGHTGREY);
 80011e2:	f24c 6218 	movw	r2, #50712	; 0xc618
 80011e6:	215c      	movs	r1, #92	; 0x5c
 80011e8:	206c      	movs	r0, #108	; 0x6c
 80011ea:	f003 f841 	bl	8004270 <TriangleIcon>
  while (1)
  {
	  //TODO: Update SPI init AD9833 in .ioc file (Devider, Polarity)
	  //TODO: include lib in private block in .h file
	  //TODO: Stop counting Encoder Tim because its influences to position
	  button_status = Button_Get_Status();
 80011ee:	f7ff fe77 	bl	8000ee0 <Button_Get_Status>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b7c      	ldr	r3, [pc, #496]	; (80013e8 <main+0x334>)
 80011f8:	701a      	strb	r2, [r3, #0]

	  switch(Menu_Selector) {
 80011fa:	4b7c      	ldr	r3, [pc, #496]	; (80013ec <main+0x338>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	f200 81af 	bhi.w	8001562 <main+0x4ae>
 8001204:	a201      	add	r2, pc, #4	; (adr r2, 800120c <main+0x158>)
 8001206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120a:	bf00      	nop
 800120c:	0800121d 	.word	0x0800121d
 8001210:	08001295 	.word	0x08001295
 8001214:	0800140d 	.word	0x0800140d
 8001218:	08001545 	.word	0x08001545
		  case Main_Menu:
			  ST7735_WriteString(25, 50, Str_Buffer, Font_12x18, ST7735_WHITE, ST7735_BLACK);
 800121c:	4b74      	ldr	r3, [pc, #464]	; (80013f0 <main+0x33c>)
 800121e:	2200      	movs	r2, #0
 8001220:	9202      	str	r2, [sp, #8]
 8001222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001226:	9201      	str	r2, [sp, #4]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	9200      	str	r2, [sp, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a6d      	ldr	r2, [pc, #436]	; (80013e4 <main+0x330>)
 8001230:	2132      	movs	r1, #50	; 0x32
 8001232:	2019      	movs	r0, #25
 8001234:	f002 faff 	bl	8003836 <ST7735_WriteString>
			  if((HAL_GetTick() - curr_time > APPLY_SHOW_TIME) && hide_apply_flag) {
 8001238:	f000 fda0 	bl	8001d7c <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	4b6d      	ldr	r3, [pc, #436]	; (80013f4 <main+0x340>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001248:	d914      	bls.n	8001274 <main+0x1c0>
 800124a:	4b6b      	ldr	r3, [pc, #428]	; (80013f8 <main+0x344>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d010      	beq.n	8001274 <main+0x1c0>
				  ST7735_WriteString(30, 30, "               ", Font_7x10, ST7735_DARKGREY, ST7735_BLACK);
 8001252:	4b5b      	ldr	r3, [pc, #364]	; (80013c0 <main+0x30c>)
 8001254:	2200      	movs	r2, #0
 8001256:	9202      	str	r2, [sp, #8]
 8001258:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800125c:	9201      	str	r2, [sp, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	9200      	str	r2, [sp, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a65      	ldr	r2, [pc, #404]	; (80013fc <main+0x348>)
 8001266:	211e      	movs	r1, #30
 8001268:	201e      	movs	r0, #30
 800126a:	f002 fae4 	bl	8003836 <ST7735_WriteString>
				  hide_apply_flag = 0;
 800126e:	4b62      	ldr	r3, [pc, #392]	; (80013f8 <main+0x344>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]

			  }
			  if (button_status == Short_Press) Menu_Selector = Change_Frequency;
 8001274:	4b5c      	ldr	r3, [pc, #368]	; (80013e8 <main+0x334>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d102      	bne.n	8001282 <main+0x1ce>
 800127c:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <main+0x338>)
 800127e:	2202      	movs	r2, #2
 8001280:	701a      	strb	r2, [r3, #0]
			  if (button_status == Long_Press) Menu_Selector = Change_Wave_Form;
 8001282:	4b59      	ldr	r3, [pc, #356]	; (80013e8 <main+0x334>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b02      	cmp	r3, #2
 8001288:	f040 817a 	bne.w	8001580 <main+0x4cc>
 800128c:	4b57      	ldr	r3, [pc, #348]	; (80013ec <main+0x338>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
			  break;
 8001292:	e175      	b.n	8001580 <main+0x4cc>

		  case Change_Wave_Form:
			  ST7735_WriteString(30, 30, "Change Waveform", Font_7x10, ST7735_DARKGREY, ST7735_BLACK);
 8001294:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <main+0x30c>)
 8001296:	2200      	movs	r2, #0
 8001298:	9202      	str	r2, [sp, #8]
 800129a:	f647 32ef 	movw	r2, #31727	; 0x7bef
 800129e:	9201      	str	r2, [sp, #4]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	9200      	str	r2, [sp, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a56      	ldr	r2, [pc, #344]	; (8001400 <main+0x34c>)
 80012a8:	211e      	movs	r1, #30
 80012aa:	201e      	movs	r0, #30
 80012ac:	f002 fac3 	bl	8003836 <ST7735_WriteString>
			  ST7735_WriteString(25, 50, Str_Buffer, Font_12x18, ST7735_WHITE, ST7735_BLACK);
 80012b0:	4b4f      	ldr	r3, [pc, #316]	; (80013f0 <main+0x33c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	9202      	str	r2, [sp, #8]
 80012b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ba:	9201      	str	r2, [sp, #4]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	9200      	str	r2, [sp, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a48      	ldr	r2, [pc, #288]	; (80013e4 <main+0x330>)
 80012c4:	2132      	movs	r1, #50	; 0x32
 80012c6:	2019      	movs	r0, #25
 80012c8:	f002 fab5 	bl	8003836 <ST7735_WriteString>
			  Change_Position(&waveform_select, MAX_WAVEFORM);
 80012cc:	2103      	movs	r1, #3
 80012ce:	484d      	ldr	r0, [pc, #308]	; (8001404 <main+0x350>)
 80012d0:	f000 f9c8 	bl	8001664 <Change_Position>
			  if (waveform_select == wave_sine) {
 80012d4:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <main+0x350>)
 80012d6:	f993 3000 	ldrsb.w	r3, [r3]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d112      	bne.n	8001304 <main+0x250>
				  SineIcon(18, 92, ST7735_YELLOW);
 80012de:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80012e2:	215c      	movs	r1, #92	; 0x5c
 80012e4:	2012      	movs	r0, #18
 80012e6:	f003 f858 	bl	800439a <SineIcon>
				  SquareIcon(63, 92, ST7735_LIGHTGREY);
 80012ea:	f24c 6218 	movw	r2, #50712	; 0xc618
 80012ee:	215c      	movs	r1, #92	; 0x5c
 80012f0:	203f      	movs	r0, #63	; 0x3f
 80012f2:	f002 ff4c 	bl	800418e <SquareIcon>
				  TriangleIcon(108, 92, ST7735_LIGHTGREY);
 80012f6:	f24c 6218 	movw	r2, #50712	; 0xc618
 80012fa:	215c      	movs	r1, #92	; 0x5c
 80012fc:	206c      	movs	r0, #108	; 0x6c
 80012fe:	f002 ffb7 	bl	8004270 <TriangleIcon>
 8001302:	e02e      	b.n	8001362 <main+0x2ae>
			  }
			  else if (waveform_select == wave_square) {
 8001304:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <main+0x350>)
 8001306:	f993 3000 	ldrsb.w	r3, [r3]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d112      	bne.n	8001334 <main+0x280>
				  SineIcon(18, 92, ST7735_LIGHTGREY);
 800130e:	f24c 6218 	movw	r2, #50712	; 0xc618
 8001312:	215c      	movs	r1, #92	; 0x5c
 8001314:	2012      	movs	r0, #18
 8001316:	f003 f840 	bl	800439a <SineIcon>
				  SquareIcon(63, 92, ST7735_YELLOW);
 800131a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800131e:	215c      	movs	r1, #92	; 0x5c
 8001320:	203f      	movs	r0, #63	; 0x3f
 8001322:	f002 ff34 	bl	800418e <SquareIcon>
				  TriangleIcon(108, 92, ST7735_LIGHTGREY);
 8001326:	f24c 6218 	movw	r2, #50712	; 0xc618
 800132a:	215c      	movs	r1, #92	; 0x5c
 800132c:	206c      	movs	r0, #108	; 0x6c
 800132e:	f002 ff9f 	bl	8004270 <TriangleIcon>
 8001332:	e016      	b.n	8001362 <main+0x2ae>
			  }
			  else if (waveform_select == wave_triangle) {
 8001334:	4b33      	ldr	r3, [pc, #204]	; (8001404 <main+0x350>)
 8001336:	f993 3000 	ldrsb.w	r3, [r3]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d111      	bne.n	8001362 <main+0x2ae>
				  SineIcon(18, 92, ST7735_LIGHTGREY);
 800133e:	f24c 6218 	movw	r2, #50712	; 0xc618
 8001342:	215c      	movs	r1, #92	; 0x5c
 8001344:	2012      	movs	r0, #18
 8001346:	f003 f828 	bl	800439a <SineIcon>
				  SquareIcon(63, 92, ST7735_LIGHTGREY);
 800134a:	f24c 6218 	movw	r2, #50712	; 0xc618
 800134e:	215c      	movs	r1, #92	; 0x5c
 8001350:	203f      	movs	r0, #63	; 0x3f
 8001352:	f002 ff1c 	bl	800418e <SquareIcon>
				  TriangleIcon(108, 92, ST7735_YELLOW);
 8001356:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800135a:	215c      	movs	r1, #92	; 0x5c
 800135c:	206c      	movs	r0, #108	; 0x6c
 800135e:	f002 ff87 	bl	8004270 <TriangleIcon>
			  }

			  if (button_status == Short_Press) {
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <main+0x334>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d11f      	bne.n	80013aa <main+0x2f6>
				  AD9833_SetWaveform(waveform_select);
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <main+0x350>)
 800136c:	f993 3000 	ldrsb.w	r3, [r3]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fc94 	bl	8000ca0 <AD9833_SetWaveform>
				  Menu_Selector = Main_Menu;
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <main+0x338>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
				  ST7735_WriteString(30, 30, "    Apply!     ", Font_7x10, ST7735_DARKGREY, ST7735_BLACK);
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <main+0x30c>)
 8001380:	2200      	movs	r2, #0
 8001382:	9202      	str	r2, [sp, #8]
 8001384:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8001388:	9201      	str	r2, [sp, #4]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	9200      	str	r2, [sp, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <main+0x354>)
 8001392:	211e      	movs	r1, #30
 8001394:	201e      	movs	r0, #30
 8001396:	f002 fa4e 	bl	8003836 <ST7735_WriteString>
				  hide_apply_flag = 1;
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <main+0x344>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
				  curr_time = HAL_GetTick();
 80013a0:	f000 fcec 	bl	8001d7c <HAL_GetTick>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <main+0x340>)
 80013a8:	6013      	str	r3, [r2, #0]
			  }
			  if (button_status == Long_Press) {
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <main+0x334>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	f040 80e8 	bne.w	8001584 <main+0x4d0>
				  Menu_Selector = Main_Menu;
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <main+0x338>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
				  //or something else?
			  }

			  break;
 80013ba:	e0e3      	b.n	8001584 <main+0x4d0>
 80013bc:	20000008 	.word	0x20000008
 80013c0:	2000001c 	.word	0x2000001c
 80013c4:	08005280 	.word	0x08005280
 80013c8:	08005298 	.word	0x08005298
 80013cc:	431bde83 	.word	0x431bde83
 80013d0:	200000d4 	.word	0x200000d4
 80013d4:	10624dd3 	.word	0x10624dd3
 80013d8:	200000da 	.word	0x200000da
 80013dc:	200000d6 	.word	0x200000d6
 80013e0:	080052a8 	.word	0x080052a8
 80013e4:	200000dc 	.word	0x200000dc
 80013e8:	200000d9 	.word	0x200000d9
 80013ec:	200000c0 	.word	0x200000c0
 80013f0:	20000024 	.word	0x20000024
 80013f4:	200000c4 	.word	0x200000c4
 80013f8:	200000c2 	.word	0x200000c2
 80013fc:	080052b8 	.word	0x080052b8
 8001400:	080052c8 	.word	0x080052c8
 8001404:	2000000d 	.word	0x2000000d
 8001408:	080052d8 	.word	0x080052d8

		  case Change_Frequency:
			  ST7735_WriteString(30, 30, "Edit Frequency ", Font_7x10, ST7735_DARKGREY, ST7735_BLACK);
 800140c:	4b5f      	ldr	r3, [pc, #380]	; (800158c <main+0x4d8>)
 800140e:	2200      	movs	r2, #0
 8001410:	9202      	str	r2, [sp, #8]
 8001412:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8001416:	9201      	str	r2, [sp, #4]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	9200      	str	r2, [sp, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a5c      	ldr	r2, [pc, #368]	; (8001590 <main+0x4dc>)
 8001420:	211e      	movs	r1, #30
 8001422:	201e      	movs	r0, #30
 8001424:	f002 fa07 	bl	8003836 <ST7735_WriteString>
			  (short_press_flag) ? Edit_Frequency(edit_pos, &freq) : Change_Position(&edit_pos, MAX_DIGITS);
 8001428:	4b5a      	ldr	r3, [pc, #360]	; (8001594 <main+0x4e0>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <main+0x38c>
 8001430:	4b59      	ldr	r3, [pc, #356]	; (8001598 <main+0x4e4>)
 8001432:	f993 3000 	ldrsb.w	r3, [r3]
 8001436:	4959      	ldr	r1, [pc, #356]	; (800159c <main+0x4e8>)
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f8cd 	bl	80015d8 <Edit_Frequency>
 800143e:	e003      	b.n	8001448 <main+0x394>
 8001440:	2107      	movs	r1, #7
 8001442:	4855      	ldr	r0, [pc, #340]	; (8001598 <main+0x4e4>)
 8001444:	f000 f90e 	bl	8001664 <Change_Position>

			  MHz = freq / 1000000;
 8001448:	4b54      	ldr	r3, [pc, #336]	; (800159c <main+0x4e8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a54      	ldr	r2, [pc, #336]	; (80015a0 <main+0x4ec>)
 800144e:	fba2 2303 	umull	r2, r3, r2, r3
 8001452:	0c9b      	lsrs	r3, r3, #18
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <main+0x4f0>)
 8001458:	801a      	strh	r2, [r3, #0]
			  kHz = freq / 1000 % 1000;
 800145a:	4b50      	ldr	r3, [pc, #320]	; (800159c <main+0x4e8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <main+0x4f4>)
 8001460:	fba2 2303 	umull	r2, r3, r2, r3
 8001464:	099a      	lsrs	r2, r3, #6
 8001466:	4b50      	ldr	r3, [pc, #320]	; (80015a8 <main+0x4f4>)
 8001468:	fba3 1302 	umull	r1, r3, r3, r2
 800146c:	099b      	lsrs	r3, r3, #6
 800146e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	b29a      	uxth	r2, r3
 800147a:	4b4c      	ldr	r3, [pc, #304]	; (80015ac <main+0x4f8>)
 800147c:	801a      	strh	r2, [r3, #0]
			  Hz = freq % 1000;
 800147e:	4b47      	ldr	r3, [pc, #284]	; (800159c <main+0x4e8>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <main+0x4f4>)
 8001484:	fba3 1302 	umull	r1, r3, r3, r2
 8001488:	099b      	lsrs	r3, r3, #6
 800148a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800148e:	fb01 f303 	mul.w	r3, r1, r3
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	b29a      	uxth	r2, r3
 8001496:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <main+0x4fc>)
 8001498:	801a      	strh	r2, [r3, #0]

			  sprintf(Str_Buffer, "%1d,%03d,%03d", MHz, kHz, Hz);
 800149a:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <main+0x4f0>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	4b42      	ldr	r3, [pc, #264]	; (80015ac <main+0x4f8>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <main+0x4fc>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	460b      	mov	r3, r1
 80014ae:	4941      	ldr	r1, [pc, #260]	; (80015b4 <main+0x500>)
 80014b0:	4841      	ldr	r0, [pc, #260]	; (80015b8 <main+0x504>)
 80014b2:	f003 faab 	bl	8004a0c <siprintf>
			  ST7735_WriteStringWithSelect(25, 50, Str_Buffer, Font_12x18, edit_pos, text_color);
 80014b6:	4b38      	ldr	r3, [pc, #224]	; (8001598 <main+0x4e4>)
 80014b8:	f993 3000 	ldrsb.w	r3, [r3]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <main+0x508>)
 80014c0:	493f      	ldr	r1, [pc, #252]	; (80015c0 <main+0x50c>)
 80014c2:	ac02      	add	r4, sp, #8
 80014c4:	c903      	ldmia	r1, {r0, r1}
 80014c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80014ca:	9201      	str	r2, [sp, #4]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	9200      	str	r2, [sp, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a39      	ldr	r2, [pc, #228]	; (80015b8 <main+0x504>)
 80014d4:	2132      	movs	r1, #50	; 0x32
 80014d6:	2019      	movs	r0, #25
 80014d8:	f002 f9f7 	bl	80038ca <ST7735_WriteStringWithSelect>

			  if (button_status == Short_Press) {
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <main+0x510>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d109      	bne.n	80014f8 <main+0x444>
				  short_press_flag = !short_press_flag;
 80014e4:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <main+0x4e0>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf0c      	ite	eq
 80014ec:	2301      	moveq	r3, #1
 80014ee:	2300      	movne	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <main+0x4e0>)
 80014f6:	701a      	strb	r2, [r3, #0]
			  }
			  if (button_status == Long_Press) {
 80014f8:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <main+0x510>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d143      	bne.n	8001588 <main+0x4d4>
				  AD9833_SetFrequency(freq);
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <main+0x4e8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fbed 	bl	8000ce4 <AD9833_SetFrequency>
				  ST7735_WriteString(30, 30, "    Apply!    ", Font_7x10, ST7735_DARKGREY, ST7735_BLACK);
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <main+0x4d8>)
 800150c:	2200      	movs	r2, #0
 800150e:	9202      	str	r2, [sp, #8]
 8001510:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8001514:	9201      	str	r2, [sp, #4]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	9200      	str	r2, [sp, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2a      	ldr	r2, [pc, #168]	; (80015c8 <main+0x514>)
 800151e:	211e      	movs	r1, #30
 8001520:	201e      	movs	r0, #30
 8001522:	f002 f988 	bl	8003836 <ST7735_WriteString>
				  hide_apply_flag = 1;
 8001526:	4b29      	ldr	r3, [pc, #164]	; (80015cc <main+0x518>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
				  curr_time = HAL_GetTick();
 800152c:	f000 fc26 	bl	8001d7c <HAL_GetTick>
 8001530:	4603      	mov	r3, r0
 8001532:	4a27      	ldr	r2, [pc, #156]	; (80015d0 <main+0x51c>)
 8001534:	6013      	str	r3, [r2, #0]
				  Menu_Selector = Main_Menu;
 8001536:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <main+0x520>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
				  short_press_flag = 0;
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <main+0x4e0>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
			  }



			  break;
 8001542:	e021      	b.n	8001588 <main+0x4d4>

		  case Sweep_Mode:
			  ST7735_WriteString(25, 50, Str_Buffer, Font_12x18, ST7735_WHITE, ST7735_BLACK);
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <main+0x508>)
 8001546:	2200      	movs	r2, #0
 8001548:	9202      	str	r2, [sp, #8]
 800154a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800154e:	9201      	str	r2, [sp, #4]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	9200      	str	r2, [sp, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <main+0x504>)
 8001558:	2132      	movs	r1, #50	; 0x32
 800155a:	2019      	movs	r0, #25
 800155c:	f002 f96b 	bl	8003836 <ST7735_WriteString>
			  //TODO: Sweep?

			  break;
 8001560:	e013      	b.n	800158a <main+0x4d6>

		  default:
			  ST7735_WriteString(25, 50, Str_Buffer, Font_12x18, ST7735_WHITE, ST7735_BLACK);
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <main+0x508>)
 8001564:	2200      	movs	r2, #0
 8001566:	9202      	str	r2, [sp, #8]
 8001568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800156c:	9201      	str	r2, [sp, #4]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	9200      	str	r2, [sp, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <main+0x504>)
 8001576:	2132      	movs	r1, #50	; 0x32
 8001578:	2019      	movs	r0, #25
 800157a:	f002 f95c 	bl	8003836 <ST7735_WriteString>
			  break;
 800157e:	e004      	b.n	800158a <main+0x4d6>
			  break;
 8001580:	bf00      	nop
 8001582:	e634      	b.n	80011ee <main+0x13a>
			  break;
 8001584:	bf00      	nop
 8001586:	e632      	b.n	80011ee <main+0x13a>
			  break;
 8001588:	bf00      	nop
	  button_status = Button_Get_Status();
 800158a:	e630      	b.n	80011ee <main+0x13a>
 800158c:	2000001c 	.word	0x2000001c
 8001590:	080052e8 	.word	0x080052e8
 8001594:	200000c1 	.word	0x200000c1
 8001598:	2000000c 	.word	0x2000000c
 800159c:	20000008 	.word	0x20000008
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	200000d4 	.word	0x200000d4
 80015a8:	10624dd3 	.word	0x10624dd3
 80015ac:	200000da 	.word	0x200000da
 80015b0:	200000d6 	.word	0x200000d6
 80015b4:	080052a8 	.word	0x080052a8
 80015b8:	200000dc 	.word	0x200000dc
 80015bc:	20000024 	.word	0x20000024
 80015c0:	20000000 	.word	0x20000000
 80015c4:	200000d9 	.word	0x200000d9
 80015c8:	080052f8 	.word	0x080052f8
 80015cc:	200000c2 	.word	0x200000c2
 80015d0:	200000c4 	.word	0x200000c4
 80015d4:	200000c0 	.word	0x200000c0

080015d8 <Edit_Frequency>:



/* USER CODE BEGIN 4 */
void Edit_Frequency(int8_t position, uint32_t *p_freq)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
	uint32_t pos_to_Hz = int_pow(10, position);
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	4619      	mov	r1, r3
 80015e8:	200a      	movs	r0, #10
 80015ea:	f000 f87d 	bl	80016e8 <int_pow>
 80015ee:	6138      	str	r0, [r7, #16]
	uint32_t edit_value = *p_freq / pos_to_Hz;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	617b      	str	r3, [r7, #20]

	switch(Encoder_Get_Status()) {
 80015fc:	f7ff fc3a 	bl	8000e74 <Encoder_Get_Status>
 8001600:	4603      	mov	r3, r0
 8001602:	2b01      	cmp	r3, #1
 8001604:	d006      	beq.n	8001614 <Edit_Frequency+0x3c>
 8001606:	2b01      	cmp	r3, #1
 8001608:	dc0f      	bgt.n	800162a <Edit_Frequency+0x52>
 800160a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160e:	d005      	beq.n	800161c <Edit_Frequency+0x44>
 8001610:	2b00      	cmp	r3, #0
		  case Decremented:
			  if(edit_value > 0)
				  edit_value--;
			  break;
		  case Neutral:
			  break;
 8001612:	e00a      	b.n	800162a <Edit_Frequency+0x52>
			  edit_value++;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
			  break;
 800161a:	e006      	b.n	800162a <Edit_Frequency+0x52>
			  if(edit_value > 0)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <Edit_Frequency+0x50>
				  edit_value--;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3b01      	subs	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
			  break;
 8001628:	bf00      	nop
	  }

	uint32_t edited_freq = edit_value * pos_to_Hz + *p_freq % pos_to_Hz;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	fb02 f203 	mul.w	r2, r2, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6939      	ldr	r1, [r7, #16]
 8001638:	fbb3 f1f1 	udiv	r1, r3, r1
 800163c:	6938      	ldr	r0, [r7, #16]
 800163e:	fb00 f101 	mul.w	r1, r0, r1
 8001642:	1a5b      	subs	r3, r3, r1
 8001644:	4413      	add	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

	if (edited_freq <= MAX_FREQ_VALUE)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <Edit_Frequency+0x88>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d802      	bhi.n	8001656 <Edit_Frequency+0x7e>
		*p_freq = edited_freq;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	601a      	str	r2, [r3, #0]
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	004c4b40 	.word	0x004c4b40

08001664 <Change_Position>:

void Change_Position(int8_t *edit_pos, uint8_t MAX_POS)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	70fb      	strb	r3, [r7, #3]
	switch(Encoder_Get_Status()) {
 8001670:	f7ff fc00 	bl	8000e74 <Encoder_Get_Status>
 8001674:	4603      	mov	r3, r0
 8001676:	2b01      	cmp	r3, #1
 8001678:	d006      	beq.n	8001688 <Change_Position+0x24>
 800167a:	2b01      	cmp	r3, #1
 800167c:	dc30      	bgt.n	80016e0 <Change_Position+0x7c>
 800167e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001682:	d016      	beq.n	80016b2 <Change_Position+0x4e>
 8001684:	2b00      	cmp	r3, #0
		case Decremented:
			(*edit_pos)++;
			if (*edit_pos >= MAX_POS) *edit_pos = 0;
			break;
		case Neutral:
			break;
 8001686:	e02b      	b.n	80016e0 <Change_Position+0x7c>
			(*edit_pos)--;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f993 3000 	ldrsb.w	r3, [r3]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	3b01      	subs	r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	b25a      	sxtb	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	701a      	strb	r2, [r3, #0]
			if (*edit_pos < 0) *edit_pos = MAX_POS - 1;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f993 3000 	ldrsb.w	r3, [r3]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da1a      	bge.n	80016da <Change_Position+0x76>
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	b25a      	sxtb	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	701a      	strb	r2, [r3, #0]
			break;
 80016b0:	e013      	b.n	80016da <Change_Position+0x76>
			(*edit_pos)++;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f993 3000 	ldrsb.w	r3, [r3]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	3301      	adds	r3, #1
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	b25a      	sxtb	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	701a      	strb	r2, [r3, #0]
			if (*edit_pos >= MAX_POS) *edit_pos = 0;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f993 3000 	ldrsb.w	r3, [r3]
 80016ca:	461a      	mov	r2, r3
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	db05      	blt.n	80016de <Change_Position+0x7a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
			break;
 80016d8:	e001      	b.n	80016de <Change_Position+0x7a>
			break;
 80016da:	bf00      	nop
 80016dc:	e000      	b.n	80016e0 <Change_Position+0x7c>
			break;
 80016de:	bf00      	nop
	}
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <int_pow>:

uint32_t int_pow(uint32_t base, uint8_t exp)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
    uint32_t result = 1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
    while (exp) {
 80016f8:	e011      	b.n	800171e <int_pow+0x36>
        if (exp % 2)
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <int_pow+0x28>
           result *= base;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	fb02 f303 	mul.w	r3, r2, r3
 800170e:	60fb      	str	r3, [r7, #12]
        exp /= 2;
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	70fb      	strb	r3, [r7, #3]
        base *= base;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	fb03 f303 	mul.w	r3, r3, r3
 800171c:	607b      	str	r3, [r7, #4]
    while (exp) {
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ea      	bne.n	80016fa <int_pow+0x12>
    }
    return result;
 8001724:	68fb      	ldr	r3, [r7, #12]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b094      	sub	sp, #80	; 0x50
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 0320 	add.w	r3, r7, #32
 800173e:	2230      	movs	r2, #48	; 0x30
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f003 f95a 	bl	80049fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <SystemClock_Config+0xcc>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	4a27      	ldr	r2, [pc, #156]	; (8001800 <SystemClock_Config+0xcc>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001766:	6413      	str	r3, [r2, #64]	; 0x40
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <SystemClock_Config+0xcc>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <SystemClock_Config+0xd0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001780:	4a20      	ldr	r2, [pc, #128]	; (8001804 <SystemClock_Config+0xd0>)
 8001782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <SystemClock_Config+0xd0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001794:	2301      	movs	r3, #1
 8001796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179e:	2302      	movs	r3, #2
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017a8:	2319      	movs	r3, #25
 80017aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017ac:	23a8      	movs	r3, #168	; 0xa8
 80017ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017b4:	2304      	movs	r3, #4
 80017b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b8:	f107 0320 	add.w	r3, r7, #32
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fda9 	bl	8002314 <HAL_RCC_OscConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017c8:	f000 f81e 	bl	8001808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017cc:	230f      	movs	r3, #15
 80017ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d0:	2302      	movs	r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	2102      	movs	r1, #2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f001 f80b 	bl	8002804 <HAL_RCC_ClockConfig>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017f4:	f000 f808 	bl	8001808 <Error_Handler>
  }
}
 80017f8:	bf00      	nop
 80017fa:	3750      	adds	r7, #80	; 0x50
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40023800 	.word	0x40023800
 8001804:	40007000 	.word	0x40007000

08001808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001810:	e7fe      	b.n	8001810 <Error_Handler+0x8>
	...

08001814 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_SPI1_Init+0x64>)
 800181a:	4a18      	ldr	r2, [pc, #96]	; (800187c <MX_SPI1_Init+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <MX_SPI1_Init+0x64>)
 8001820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_SPI1_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_SPI1_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_SPI1_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_SPI1_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_SPI1_Init+0x64>)
 8001840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001844:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_SPI1_Init+0x64>)
 8001848:	2208      	movs	r2, #8
 800184a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <MX_SPI1_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_SPI1_Init+0x64>)
 8001854:	2200      	movs	r2, #0
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <MX_SPI1_Init+0x64>)
 800185a:	2200      	movs	r2, #0
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_SPI1_Init+0x64>)
 8001860:	220a      	movs	r2, #10
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001864:	4804      	ldr	r0, [pc, #16]	; (8001878 <MX_SPI1_Init+0x64>)
 8001866:	f001 f969 	bl	8002b3c <HAL_SPI_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001870:	f7ff ffca 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000140 	.word	0x20000140
 800187c:	40013000 	.word	0x40013000

08001880 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001884:	4b17      	ldr	r3, [pc, #92]	; (80018e4 <MX_SPI2_Init+0x64>)
 8001886:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <MX_SPI2_Init+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_SPI2_Init+0x64>)
 800188c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001890:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_SPI2_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <MX_SPI2_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;				//see datasheet, when CS is low, CLK is HIGH
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018a0:	2202      	movs	r2, #2
 80018a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;  //default 2, but ad9833 max speed 25 MHz
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018b4:	2210      	movs	r2, #16
 80018b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018cc:	220a      	movs	r2, #10
 80018ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <MX_SPI2_Init+0x64>)
 80018d2:	f001 f933 	bl	8002b3c <HAL_SPI_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018dc:	f7ff ff94 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200000e8 	.word	0x200000e8
 80018e8:	40003800 	.word	0x40003800

080018ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <HAL_SPI_MspInit+0xe8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d12c      	bne.n	8001968 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	4b31      	ldr	r3, [pc, #196]	; (80019d8 <HAL_SPI_MspInit+0xec>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a30      	ldr	r2, [pc, #192]	; (80019d8 <HAL_SPI_MspInit+0xec>)
 8001918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <HAL_SPI_MspInit+0xec>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_SPI_MspInit+0xec>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a29      	ldr	r2, [pc, #164]	; (80019d8 <HAL_SPI_MspInit+0xec>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <HAL_SPI_MspInit+0xec>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ST7735_SCK_Pin|ST7735_SDA_Pin;
 8001946:	23a0      	movs	r3, #160	; 0xa0
 8001948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001956:	2305      	movs	r3, #5
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 031c 	add.w	r3, r7, #28
 800195e:	4619      	mov	r1, r3
 8001960:	481e      	ldr	r0, [pc, #120]	; (80019dc <HAL_SPI_MspInit+0xf0>)
 8001962:	f000 fb21 	bl	8001fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001966:	e031      	b.n	80019cc <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <HAL_SPI_MspInit+0xf4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d12c      	bne.n	80019cc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <HAL_SPI_MspInit+0xec>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <HAL_SPI_MspInit+0xec>)
 800197c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_SPI_MspInit+0xec>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_SPI_MspInit+0xec>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a10      	ldr	r2, [pc, #64]	; (80019d8 <HAL_SPI_MspInit+0xec>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_SPI_MspInit+0xec>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AD9833_SCK_Pin|AD9833_DAT_Pin;
 80019aa:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019bc:	2305      	movs	r3, #5
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4807      	ldr	r0, [pc, #28]	; (80019e4 <HAL_SPI_MspInit+0xf8>)
 80019c8:	f000 faee 	bl	8001fa8 <HAL_GPIO_Init>
}
 80019cc:	bf00      	nop
 80019ce:	3730      	adds	r7, #48	; 0x30
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40013000 	.word	0x40013000
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020000 	.word	0x40020000
 80019e0:	40003800 	.word	0x40003800
 80019e4:	40020400 	.word	0x40020400

080019e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_MspInit+0x4c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <HAL_MspInit+0x4c>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_MspInit+0x4c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <NMI_Handler+0x4>

08001a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a84:	f000 f966 	bl	8001d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a94:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <_sbrk+0x5c>)
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <_sbrk+0x60>)
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <_sbrk+0x64>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <_sbrk+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d207      	bcs.n	8001acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001abc:	f002 ff74 	bl	80049a8 <__errno>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e009      	b.n	8001ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <_sbrk+0x64>)
 8001adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20010000 	.word	0x20010000
 8001aec:	00000400 	.word	0x00000400
 8001af0:	200000c8 	.word	0x200000c8
 8001af4:	200001f8 	.word	0x200001f8

08001af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <SystemInit+0x20>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <SystemInit+0x20>)
 8001b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08c      	sub	sp, #48	; 0x30
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	2224      	movs	r2, #36	; 0x24
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 ff66 	bl	80049fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b38:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <MX_TIM1_Init+0xa8>)
 8001b3a:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <MX_TIM1_Init+0xac>)
 8001b3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <MX_TIM1_Init+0xa8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b44:	4b1f      	ldr	r3, [pc, #124]	; (8001bc4 <MX_TIM1_Init+0xa8>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <MX_TIM1_Init+0xa8>)
 8001b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <MX_TIM1_Init+0xa8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b58:	4b1a      	ldr	r3, [pc, #104]	; (8001bc4 <MX_TIM1_Init+0xa8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <MX_TIM1_Init+0xa8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 8001b84:	2304      	movs	r3, #4
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <MX_TIM1_Init+0xa8>)
 8001b90:	f001 fa64 	bl	800305c <HAL_TIM_Encoder_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b9a:	f7ff fe35 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <MX_TIM1_Init+0xa8>)
 8001bac:	f001 fc30 	bl	8003410 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001bb6:	f7ff fe27 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	3730      	adds	r7, #48	; 0x30
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000198 	.word	0x20000198
 8001bc8:	40010000 	.word	0x40010000

08001bcc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <HAL_TIM_Encoder_MspInit+0x84>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d12c      	bne.n	8001c48 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_TIM_Encoder_MspInit+0x88>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <HAL_TIM_Encoder_MspInit+0x88>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a10      	ldr	r2, [pc, #64]	; (8001c54 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_TIM_Encoder_MspInit+0x88>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_S1_Pin|ENC_S2_Pin;
 8001c26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c44:	f000 f9b0 	bl	8001fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000

08001c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c62:	490e      	ldr	r1, [pc, #56]	; (8001c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c64:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c78:	4c0b      	ldr	r4, [pc, #44]	; (8001ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c86:	f7ff ff37 	bl	8001af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f002 fe93 	bl	80049b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8e:	f7ff fa11 	bl	80010b4 <main>
  bx  lr    
 8001c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c94:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c9c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001ca0:	0800689c 	.word	0x0800689c
  ldr r2, =_sbss
 8001ca4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001ca8:	200001f4 	.word	0x200001f4

08001cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cac:	e7fe      	b.n	8001cac <ADC_IRQHandler>
	...

08001cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <HAL_Init+0x40>)
 8001cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	; (8001cf0 <HAL_Init+0x40>)
 8001cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <HAL_Init+0x40>)
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 f931 	bl	8001f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cde:	200f      	movs	r0, #15
 8001ce0:	f000 f808 	bl	8001cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce4:	f7ff fe80 	bl	80019e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023c00 	.word	0x40023c00

08001cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_InitTick+0x54>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_InitTick+0x58>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f93b 	bl	8001f8e <HAL_SYSTICK_Config>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00e      	b.n	8001d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d80a      	bhi.n	8001d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f000 f911 	bl	8001f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <HAL_InitTick+0x5c>)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e000      	b.n	8001d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000010 	.word	0x20000010
 8001d4c:	20000018 	.word	0x20000018
 8001d50:	20000014 	.word	0x20000014

08001d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_IncTick+0x20>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_IncTick+0x24>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <HAL_IncTick+0x24>)
 8001d66:	6013      	str	r3, [r2, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000018 	.word	0x20000018
 8001d78:	200001e0 	.word	0x200001e0

08001d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_GetTick+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	200001e0 	.word	0x200001e0

08001d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d9c:	f7ff ffee 	bl	8001d7c <HAL_GetTick>
 8001da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dac:	d005      	beq.n	8001dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_Delay+0x44>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dba:	bf00      	nop
 8001dbc:	f7ff ffde 	bl	8001d7c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d8f7      	bhi.n	8001dbc <HAL_Delay+0x28>
  {
  }
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000018 	.word	0x20000018

08001ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0e:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60d3      	str	r3, [r2, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	; (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	; (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f0c:	d301      	bcc.n	8001f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <SysTick_Config+0x40>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f7ff ff8e 	bl	8001e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <SysTick_Config+0x40>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <SysTick_Config+0x40>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff47 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f68:	f7ff ff5c 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	6978      	ldr	r0, [r7, #20]
 8001f74:	f7ff ff8e 	bl	8001e94 <NVIC_EncodePriority>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff5d 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ffb0 	bl	8001efc <SysTick_Config>
 8001f9c:	4603      	mov	r3, r0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	e159      	b.n	8002278 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	f040 8148 	bne.w	8002272 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d005      	beq.n	8001ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d130      	bne.n	800205c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	2203      	movs	r2, #3
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002030:	2201      	movs	r2, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 0201 	and.w	r2, r3, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	2b03      	cmp	r3, #3
 8002066:	d017      	beq.n	8002098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d123      	bne.n	80020ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	08da      	lsrs	r2, r3, #3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3208      	adds	r2, #8
 80020ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	220f      	movs	r2, #15
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	08da      	lsrs	r2, r3, #3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3208      	adds	r2, #8
 80020e6:	69b9      	ldr	r1, [r7, #24]
 80020e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0203 	and.w	r2, r3, #3
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 80a2 	beq.w	8002272 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b57      	ldr	r3, [pc, #348]	; (8002290 <HAL_GPIO_Init+0x2e8>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a56      	ldr	r2, [pc, #344]	; (8002290 <HAL_GPIO_Init+0x2e8>)
 8002138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b54      	ldr	r3, [pc, #336]	; (8002290 <HAL_GPIO_Init+0x2e8>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800214a:	4a52      	ldr	r2, [pc, #328]	; (8002294 <HAL_GPIO_Init+0x2ec>)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3302      	adds	r3, #2
 8002152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	220f      	movs	r2, #15
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a49      	ldr	r2, [pc, #292]	; (8002298 <HAL_GPIO_Init+0x2f0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <HAL_GPIO_Init+0x202>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a48      	ldr	r2, [pc, #288]	; (800229c <HAL_GPIO_Init+0x2f4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_Init+0x1fe>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a47      	ldr	r2, [pc, #284]	; (80022a0 <HAL_GPIO_Init+0x2f8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00d      	beq.n	80021a2 <HAL_GPIO_Init+0x1fa>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a46      	ldr	r2, [pc, #280]	; (80022a4 <HAL_GPIO_Init+0x2fc>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <HAL_GPIO_Init+0x1f6>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a45      	ldr	r2, [pc, #276]	; (80022a8 <HAL_GPIO_Init+0x300>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_GPIO_Init+0x1f2>
 8002196:	2304      	movs	r3, #4
 8002198:	e008      	b.n	80021ac <HAL_GPIO_Init+0x204>
 800219a:	2307      	movs	r3, #7
 800219c:	e006      	b.n	80021ac <HAL_GPIO_Init+0x204>
 800219e:	2303      	movs	r3, #3
 80021a0:	e004      	b.n	80021ac <HAL_GPIO_Init+0x204>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_Init+0x204>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_GPIO_Init+0x204>
 80021aa:	2300      	movs	r3, #0
 80021ac:	69fa      	ldr	r2, [r7, #28]
 80021ae:	f002 0203 	and.w	r2, r2, #3
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	4093      	lsls	r3, r2
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021bc:	4935      	ldr	r1, [pc, #212]	; (8002294 <HAL_GPIO_Init+0x2ec>)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ca:	4b38      	ldr	r3, [pc, #224]	; (80022ac <HAL_GPIO_Init+0x304>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ee:	4a2f      	ldr	r2, [pc, #188]	; (80022ac <HAL_GPIO_Init+0x304>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_GPIO_Init+0x304>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002218:	4a24      	ldr	r2, [pc, #144]	; (80022ac <HAL_GPIO_Init+0x304>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_GPIO_Init+0x304>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002242:	4a1a      	ldr	r2, [pc, #104]	; (80022ac <HAL_GPIO_Init+0x304>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <HAL_GPIO_Init+0x304>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800226c:	4a0f      	ldr	r2, [pc, #60]	; (80022ac <HAL_GPIO_Init+0x304>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	2b0f      	cmp	r3, #15
 800227c:	f67f aea2 	bls.w	8001fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3724      	adds	r7, #36	; 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	40013800 	.word	0x40013800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020400 	.word	0x40020400
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020c00 	.word	0x40020c00
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40013c00 	.word	0x40013c00

080022b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e001      	b.n	80022d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
 80022ec:	4613      	mov	r3, r2
 80022ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f0:	787b      	ldrb	r3, [r7, #1]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022fc:	e003      	b.n	8002306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022fe:	887b      	ldrh	r3, [r7, #2]
 8002300:	041a      	lsls	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	619a      	str	r2, [r3, #24]
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e264      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d075      	beq.n	800241e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002332:	4ba3      	ldr	r3, [pc, #652]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b04      	cmp	r3, #4
 800233c:	d00c      	beq.n	8002358 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800233e:	4ba0      	ldr	r3, [pc, #640]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002346:	2b08      	cmp	r3, #8
 8002348:	d112      	bne.n	8002370 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234a:	4b9d      	ldr	r3, [pc, #628]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002356:	d10b      	bne.n	8002370 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	4b99      	ldr	r3, [pc, #612]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d05b      	beq.n	800241c <HAL_RCC_OscConfig+0x108>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d157      	bne.n	800241c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e23f      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002378:	d106      	bne.n	8002388 <HAL_RCC_OscConfig+0x74>
 800237a:	4b91      	ldr	r3, [pc, #580]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a90      	ldr	r2, [pc, #576]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e01d      	b.n	80023c4 <HAL_RCC_OscConfig+0xb0>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0x98>
 8002392:	4b8b      	ldr	r3, [pc, #556]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a8a      	ldr	r2, [pc, #552]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b88      	ldr	r3, [pc, #544]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a87      	ldr	r2, [pc, #540]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0xb0>
 80023ac:	4b84      	ldr	r3, [pc, #528]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a83      	ldr	r2, [pc, #524]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b81      	ldr	r3, [pc, #516]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a80      	ldr	r2, [pc, #512]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff fcd6 	bl	8001d7c <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d4:	f7ff fcd2 	bl	8001d7c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e204      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	4b76      	ldr	r3, [pc, #472]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0xc0>
 80023f2:	e014      	b.n	800241e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff fcc2 	bl	8001d7c <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff fcbe 	bl	8001d7c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e1f0      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	4b6c      	ldr	r3, [pc, #432]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0xe8>
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d063      	beq.n	80024f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800242a:	4b65      	ldr	r3, [pc, #404]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002436:	4b62      	ldr	r3, [pc, #392]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800243e:	2b08      	cmp	r3, #8
 8002440:	d11c      	bne.n	800247c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002442:	4b5f      	ldr	r3, [pc, #380]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d116      	bne.n	800247c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	4b5c      	ldr	r3, [pc, #368]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d005      	beq.n	8002466 <HAL_RCC_OscConfig+0x152>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d001      	beq.n	8002466 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e1c4      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002466:	4b56      	ldr	r3, [pc, #344]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4952      	ldr	r1, [pc, #328]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002476:	4313      	orrs	r3, r2
 8002478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	e03a      	b.n	80024f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d020      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002484:	4b4f      	ldr	r3, [pc, #316]	; (80025c4 <HAL_RCC_OscConfig+0x2b0>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7ff fc77 	bl	8001d7c <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002492:	f7ff fc73 	bl	8001d7c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e1a5      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	4b46      	ldr	r3, [pc, #280]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b0:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4940      	ldr	r1, [pc, #256]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]
 80024c4:	e015      	b.n	80024f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c6:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <HAL_RCC_OscConfig+0x2b0>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7ff fc56 	bl	8001d7c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d4:	f7ff fc52 	bl	8001d7c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e184      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d030      	beq.n	8002560 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d016      	beq.n	8002534 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002506:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <HAL_RCC_OscConfig+0x2b4>)
 8002508:	2201      	movs	r2, #1
 800250a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7ff fc36 	bl	8001d7c <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002514:	f7ff fc32 	bl	8001d7c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e164      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x200>
 8002532:	e015      	b.n	8002560 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCC_OscConfig+0x2b4>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253a:	f7ff fc1f 	bl	8001d7c <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002542:	f7ff fc1b 	bl	8001d7c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e14d      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002554:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a0 	beq.w	80026ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10f      	bne.n	800259e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258c:	6413      	str	r3, [r2, #64]	; 0x40
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_RCC_OscConfig+0x2ac>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259a:	2301      	movs	r3, #1
 800259c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_OscConfig+0x2b8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d121      	bne.n	80025ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_RCC_OscConfig+0x2b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_RCC_OscConfig+0x2b8>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b6:	f7ff fbe1 	bl	8001d7c <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	e011      	b.n	80025e2 <HAL_RCC_OscConfig+0x2ce>
 80025be:	bf00      	nop
 80025c0:	40023800 	.word	0x40023800
 80025c4:	42470000 	.word	0x42470000
 80025c8:	42470e80 	.word	0x42470e80
 80025cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d0:	f7ff fbd4 	bl	8001d7c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e106      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e2:	4b85      	ldr	r3, [pc, #532]	; (80027f8 <HAL_RCC_OscConfig+0x4e4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d106      	bne.n	8002604 <HAL_RCC_OscConfig+0x2f0>
 80025f6:	4b81      	ldr	r3, [pc, #516]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	4a80      	ldr	r2, [pc, #512]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6713      	str	r3, [r2, #112]	; 0x70
 8002602:	e01c      	b.n	800263e <HAL_RCC_OscConfig+0x32a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b05      	cmp	r3, #5
 800260a:	d10c      	bne.n	8002626 <HAL_RCC_OscConfig+0x312>
 800260c:	4b7b      	ldr	r3, [pc, #492]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a7a      	ldr	r2, [pc, #488]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
 8002618:	4b78      	ldr	r3, [pc, #480]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a77      	ldr	r2, [pc, #476]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	e00b      	b.n	800263e <HAL_RCC_OscConfig+0x32a>
 8002626:	4b75      	ldr	r3, [pc, #468]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	4a74      	ldr	r2, [pc, #464]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	6713      	str	r3, [r2, #112]	; 0x70
 8002632:	4b72      	ldr	r3, [pc, #456]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a71      	ldr	r2, [pc, #452]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 8002638:	f023 0304 	bic.w	r3, r3, #4
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d015      	beq.n	8002672 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7ff fb99 	bl	8001d7c <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7ff fb95 	bl	8001d7c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0c5      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	4b65      	ldr	r3, [pc, #404]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0ee      	beq.n	800264e <HAL_RCC_OscConfig+0x33a>
 8002670:	e014      	b.n	800269c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002672:	f7ff fb83 	bl	8001d7c <HAL_GetTick>
 8002676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002678:	e00a      	b.n	8002690 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800267a:	f7ff fb7f 	bl	8001d7c <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	f241 3288 	movw	r2, #5000	; 0x1388
 8002688:	4293      	cmp	r3, r2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e0af      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002690:	4b5a      	ldr	r3, [pc, #360]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1ee      	bne.n	800267a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800269c:	7dfb      	ldrb	r3, [r7, #23]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4b56      	ldr	r3, [pc, #344]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a55      	ldr	r2, [pc, #340]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 80026a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 809b 	beq.w	80027ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026b8:	4b50      	ldr	r3, [pc, #320]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d05c      	beq.n	800277e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d141      	bne.n	8002750 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026cc:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <HAL_RCC_OscConfig+0x4ec>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7ff fb53 	bl	8001d7c <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026da:	f7ff fb4f 	bl	8001d7c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e081      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ec:	4b43      	ldr	r3, [pc, #268]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	019b      	lsls	r3, r3, #6
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	085b      	lsrs	r3, r3, #1
 8002710:	3b01      	subs	r3, #1
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	061b      	lsls	r3, r3, #24
 800271c:	4937      	ldr	r1, [pc, #220]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002722:	4b37      	ldr	r3, [pc, #220]	; (8002800 <HAL_RCC_OscConfig+0x4ec>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7ff fb28 	bl	8001d7c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7ff fb24 	bl	8001d7c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e056      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x41c>
 800274e:	e04e      	b.n	80027ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <HAL_RCC_OscConfig+0x4ec>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7ff fb11 	bl	8001d7c <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275e:	f7ff fb0d 	bl	8001d7c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e03f      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002770:	4b22      	ldr	r3, [pc, #136]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x44a>
 800277c:	e037      	b.n	80027ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e032      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800278a:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_RCC_OscConfig+0x4e8>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d028      	beq.n	80027ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d121      	bne.n	80027ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d11a      	bne.n	80027ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027ba:	4013      	ands	r3, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d111      	bne.n	80027ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	3b01      	subs	r3, #1
 80027d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d107      	bne.n	80027ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40007000 	.word	0x40007000
 80027fc:	40023800 	.word	0x40023800
 8002800:	42470060 	.word	0x42470060

08002804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0cc      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002818:	4b68      	ldr	r3, [pc, #416]	; (80029bc <HAL_RCC_ClockConfig+0x1b8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d90c      	bls.n	8002840 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b65      	ldr	r3, [pc, #404]	; (80029bc <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b63      	ldr	r3, [pc, #396]	; (80029bc <HAL_RCC_ClockConfig+0x1b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0b8      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002858:	4b59      	ldr	r3, [pc, #356]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a58      	ldr	r2, [pc, #352]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002862:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002870:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a52      	ldr	r2, [pc, #328]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800287a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800287c:	4b50      	ldr	r3, [pc, #320]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	494d      	ldr	r1, [pc, #308]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d044      	beq.n	8002924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d119      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e07f      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d003      	beq.n	80028c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	4b3f      	ldr	r3, [pc, #252]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e06f      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d2:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e067      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e2:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f023 0203 	bic.w	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4934      	ldr	r1, [pc, #208]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f4:	f7ff fa42 	bl	8001d7c <HAL_GetTick>
 80028f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fc:	f7ff fa3e 	bl	8001d7c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e04f      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 020c 	and.w	r2, r3, #12
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	429a      	cmp	r2, r3
 8002922:	d1eb      	bne.n	80028fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002924:	4b25      	ldr	r3, [pc, #148]	; (80029bc <HAL_RCC_ClockConfig+0x1b8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d20c      	bcs.n	800294c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b22      	ldr	r3, [pc, #136]	; (80029bc <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e032      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4916      	ldr	r1, [pc, #88]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	490e      	ldr	r1, [pc, #56]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800298a:	f000 f821 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 800298e:	4602      	mov	r2, r0
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	490a      	ldr	r1, [pc, #40]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 800299c:	5ccb      	ldrb	r3, [r1, r3]
 800299e:	fa22 f303 	lsr.w	r3, r2, r3
 80029a2:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x1c8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff f9a2 	bl	8001cf4 <HAL_InitTick>

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023c00 	.word	0x40023c00
 80029c0:	40023800 	.word	0x40023800
 80029c4:	08005308 	.word	0x08005308
 80029c8:	20000010 	.word	0x20000010
 80029cc:	20000014 	.word	0x20000014

080029d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d0:	b5b0      	push	{r4, r5, r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029d6:	2100      	movs	r1, #0
 80029d8:	6079      	str	r1, [r7, #4]
 80029da:	2100      	movs	r1, #0
 80029dc:	60f9      	str	r1, [r7, #12]
 80029de:	2100      	movs	r1, #0
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029e2:	2100      	movs	r1, #0
 80029e4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e6:	4952      	ldr	r1, [pc, #328]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x160>)
 80029e8:	6889      	ldr	r1, [r1, #8]
 80029ea:	f001 010c 	and.w	r1, r1, #12
 80029ee:	2908      	cmp	r1, #8
 80029f0:	d00d      	beq.n	8002a0e <HAL_RCC_GetSysClockFreq+0x3e>
 80029f2:	2908      	cmp	r1, #8
 80029f4:	f200 8094 	bhi.w	8002b20 <HAL_RCC_GetSysClockFreq+0x150>
 80029f8:	2900      	cmp	r1, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x32>
 80029fc:	2904      	cmp	r1, #4
 80029fe:	d003      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x38>
 8002a00:	e08e      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a02:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x164>)
 8002a04:	60bb      	str	r3, [r7, #8]
       break;
 8002a06:	e08e      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a08:	4b4b      	ldr	r3, [pc, #300]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a0a:	60bb      	str	r3, [r7, #8]
      break;
 8002a0c:	e08b      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a0e:	4948      	ldr	r1, [pc, #288]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a10:	6849      	ldr	r1, [r1, #4]
 8002a12:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002a16:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a18:	4945      	ldr	r1, [pc, #276]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a1a:	6849      	ldr	r1, [r1, #4]
 8002a1c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002a20:	2900      	cmp	r1, #0
 8002a22:	d024      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a24:	4942      	ldr	r1, [pc, #264]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a26:	6849      	ldr	r1, [r1, #4]
 8002a28:	0989      	lsrs	r1, r1, #6
 8002a2a:	4608      	mov	r0, r1
 8002a2c:	f04f 0100 	mov.w	r1, #0
 8002a30:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002a34:	f04f 0500 	mov.w	r5, #0
 8002a38:	ea00 0204 	and.w	r2, r0, r4
 8002a3c:	ea01 0305 	and.w	r3, r1, r5
 8002a40:	493d      	ldr	r1, [pc, #244]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a42:	fb01 f003 	mul.w	r0, r1, r3
 8002a46:	2100      	movs	r1, #0
 8002a48:	fb01 f102 	mul.w	r1, r1, r2
 8002a4c:	1844      	adds	r4, r0, r1
 8002a4e:	493a      	ldr	r1, [pc, #232]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x168>)
 8002a50:	fba2 0101 	umull	r0, r1, r2, r1
 8002a54:	1863      	adds	r3, r4, r1
 8002a56:	4619      	mov	r1, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	f7fd ff14 	bl	800088c <__aeabi_uldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4613      	mov	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	e04a      	b.n	8002b04 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6e:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	099b      	lsrs	r3, r3, #6
 8002a74:	461a      	mov	r2, r3
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	ea02 0400 	and.w	r4, r2, r0
 8002a86:	ea03 0501 	and.w	r5, r3, r1
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	014b      	lsls	r3, r1, #5
 8002a98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a9c:	0142      	lsls	r2, r0, #5
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	1b00      	subs	r0, r0, r4
 8002aa4:	eb61 0105 	sbc.w	r1, r1, r5
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	018b      	lsls	r3, r1, #6
 8002ab2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ab6:	0182      	lsls	r2, r0, #6
 8002ab8:	1a12      	subs	r2, r2, r0
 8002aba:	eb63 0301 	sbc.w	r3, r3, r1
 8002abe:	f04f 0000 	mov.w	r0, #0
 8002ac2:	f04f 0100 	mov.w	r1, #0
 8002ac6:	00d9      	lsls	r1, r3, #3
 8002ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002acc:	00d0      	lsls	r0, r2, #3
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	1912      	adds	r2, r2, r4
 8002ad4:	eb45 0303 	adc.w	r3, r5, r3
 8002ad8:	f04f 0000 	mov.w	r0, #0
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	0299      	lsls	r1, r3, #10
 8002ae2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ae6:	0290      	lsls	r0, r2, #10
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	461a      	mov	r2, r3
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	f7fd fec8 	bl	800088c <__aeabi_uldivmod>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4613      	mov	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	60bb      	str	r3, [r7, #8]
      break;
 8002b1e:	e002      	b.n	8002b26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b22:	60bb      	str	r3, [r7, #8]
      break;
 8002b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b26:	68bb      	ldr	r3, [r7, #8]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b30:	40023800 	.word	0x40023800
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	017d7840 	.word	0x017d7840

08002b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e07b      	b.n	8002c46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d108      	bne.n	8002b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b5e:	d009      	beq.n	8002b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
 8002b66:	e005      	b.n	8002b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fe feac 	bl	80018ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002baa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf8:	ea42 0103 	orr.w	r1, r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	f003 0104 	and.w	r1, r3, #4
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	f003 0210 	and.w	r2, r3, #16
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b088      	sub	sp, #32
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_SPI_Transmit+0x22>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e126      	b.n	8002ebe <HAL_SPI_Transmit+0x270>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c78:	f7ff f880 	bl	8001d7c <HAL_GetTick>
 8002c7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d002      	beq.n	8002c94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c92:	e10b      	b.n	8002eac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_SPI_Transmit+0x52>
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ca4:	e102      	b.n	8002eac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cec:	d10f      	bne.n	8002d0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	d007      	beq.n	8002d2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d34:	d14b      	bne.n	8002dce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_SPI_Transmit+0xf6>
 8002d3e:	8afb      	ldrh	r3, [r7, #22]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d13e      	bne.n	8002dc2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	881a      	ldrh	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	1c9a      	adds	r2, r3, #2
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d68:	e02b      	b.n	8002dc2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d112      	bne.n	8002d9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	881a      	ldrh	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	1c9a      	adds	r2, r3, #2
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d9c:	e011      	b.n	8002dc2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d9e:	f7fe ffed 	bl	8001d7c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d803      	bhi.n	8002db6 <HAL_SPI_Transmit+0x168>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d102      	bne.n	8002dbc <HAL_SPI_Transmit+0x16e>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dc0:	e074      	b.n	8002eac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1ce      	bne.n	8002d6a <HAL_SPI_Transmit+0x11c>
 8002dcc:	e04c      	b.n	8002e68 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_SPI_Transmit+0x18e>
 8002dd6:	8afb      	ldrh	r3, [r7, #22]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d140      	bne.n	8002e5e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	7812      	ldrb	r2, [r2, #0]
 8002de8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e02:	e02c      	b.n	8002e5e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d113      	bne.n	8002e3a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e38:	e011      	b.n	8002e5e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e3a:	f7fe ff9f 	bl	8001d7c <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d803      	bhi.n	8002e52 <HAL_SPI_Transmit+0x204>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e50:	d102      	bne.n	8002e58 <HAL_SPI_Transmit+0x20a>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e5c:	e026      	b.n	8002eac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1cd      	bne.n	8002e04 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	6839      	ldr	r1, [r7, #0]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 f8b3 	bl	8002fd8 <SPI_EndRxTxTransaction>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e000      	b.n	8002eac <HAL_SPI_Transmit+0x25e>
  }

error:
 8002eaa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ebc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ed8:	f7fe ff50 	bl	8001d7c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ee8:	f7fe ff48 	bl	8001d7c <HAL_GetTick>
 8002eec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eee:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	015b      	lsls	r3, r3, #5
 8002ef4:	0d1b      	lsrs	r3, r3, #20
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	fb02 f303 	mul.w	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002efe:	e054      	b.n	8002faa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d050      	beq.n	8002faa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f08:	f7fe ff38 	bl	8001d7c <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d902      	bls.n	8002f1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d13d      	bne.n	8002f9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f36:	d111      	bne.n	8002f5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f40:	d004      	beq.n	8002f4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4a:	d107      	bne.n	8002f5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f64:	d10f      	bne.n	8002f86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e017      	b.n	8002fca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d19b      	bne.n	8002f00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3720      	adds	r7, #32
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000010 	.word	0x20000010

08002fd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <SPI_EndRxTxTransaction+0x7c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a1b      	ldr	r2, [pc, #108]	; (8003058 <SPI_EndRxTxTransaction+0x80>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	0d5b      	lsrs	r3, r3, #21
 8002ff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
 8002ff8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003002:	d112      	bne.n	800302a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2200      	movs	r2, #0
 800300c:	2180      	movs	r1, #128	; 0x80
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff ff5a 	bl	8002ec8 <SPI_WaitFlagStateUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d016      	beq.n	8003048 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	f043 0220 	orr.w	r2, r3, #32
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e00f      	b.n	800304a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	3b01      	subs	r3, #1
 8003034:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003040:	2b80      	cmp	r3, #128	; 0x80
 8003042:	d0f2      	beq.n	800302a <SPI_EndRxTxTransaction+0x52>
 8003044:	e000      	b.n	8003048 <SPI_EndRxTxTransaction+0x70>
        break;
 8003046:	bf00      	nop
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000010 	.word	0x20000010
 8003058:	165e9f81 	.word	0x165e9f81

0800305c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e097      	b.n	80031a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d106      	bne.n	800308a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7fe fda1 	bl	8001bcc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030a0:	f023 0307 	bic.w	r3, r3, #7
 80030a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3304      	adds	r3, #4
 80030ae:	4619      	mov	r1, r3
 80030b0:	4610      	mov	r0, r2
 80030b2:	f000 f907 	bl	80032c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	4313      	orrs	r3, r2
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80030fc:	f023 030c 	bic.w	r3, r3, #12
 8003100:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003108:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800310c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	4313      	orrs	r3, r2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	011a      	lsls	r2, r3, #4
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	031b      	lsls	r3, r3, #12
 800312c:	4313      	orrs	r3, r2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800313a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003142:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	4313      	orrs	r3, r2
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d110      	bne.n	80031fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d102      	bne.n	80031e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80031de:	7b7b      	ldrb	r3, [r7, #13]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d001      	beq.n	80031e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e069      	b.n	80032bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f8:	e031      	b.n	800325e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d110      	bne.n	8003222 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003200:	7bbb      	ldrb	r3, [r7, #14]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d102      	bne.n	800320c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003206:	7b3b      	ldrb	r3, [r7, #12]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d001      	beq.n	8003210 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e055      	b.n	80032bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003220:	e01d      	b.n	800325e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d108      	bne.n	800323a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003228:	7bbb      	ldrb	r3, [r7, #14]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d105      	bne.n	800323a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800322e:	7b7b      	ldrb	r3, [r7, #13]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d102      	bne.n	800323a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003234:	7b3b      	ldrb	r3, [r7, #12]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d001      	beq.n	800323e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e03e      	b.n	80032bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_TIM_Encoder_Start+0xc4>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d008      	beq.n	800327c <HAL_TIM_Encoder_Start+0xd4>
 800326a:	e00f      	b.n	800328c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2201      	movs	r2, #1
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f8a5 	bl	80033c4 <TIM_CCxChannelCmd>
      break;
 800327a:	e016      	b.n	80032aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2201      	movs	r2, #1
 8003282:	2104      	movs	r1, #4
 8003284:	4618      	mov	r0, r3
 8003286:	f000 f89d 	bl	80033c4 <TIM_CCxChannelCmd>
      break;
 800328a:	e00e      	b.n	80032aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2201      	movs	r2, #1
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f895 	bl	80033c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	2104      	movs	r1, #4
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f88e 	bl	80033c4 <TIM_CCxChannelCmd>
      break;
 80032a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a34      	ldr	r2, [pc, #208]	; (80033a8 <TIM_Base_SetConfig+0xe4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00f      	beq.n	80032fc <TIM_Base_SetConfig+0x38>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e2:	d00b      	beq.n	80032fc <TIM_Base_SetConfig+0x38>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a31      	ldr	r2, [pc, #196]	; (80033ac <TIM_Base_SetConfig+0xe8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d007      	beq.n	80032fc <TIM_Base_SetConfig+0x38>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a30      	ldr	r2, [pc, #192]	; (80033b0 <TIM_Base_SetConfig+0xec>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <TIM_Base_SetConfig+0x38>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a2f      	ldr	r2, [pc, #188]	; (80033b4 <TIM_Base_SetConfig+0xf0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d108      	bne.n	800330e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003302:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a25      	ldr	r2, [pc, #148]	; (80033a8 <TIM_Base_SetConfig+0xe4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d01b      	beq.n	800334e <TIM_Base_SetConfig+0x8a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331c:	d017      	beq.n	800334e <TIM_Base_SetConfig+0x8a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a22      	ldr	r2, [pc, #136]	; (80033ac <TIM_Base_SetConfig+0xe8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <TIM_Base_SetConfig+0x8a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a21      	ldr	r2, [pc, #132]	; (80033b0 <TIM_Base_SetConfig+0xec>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00f      	beq.n	800334e <TIM_Base_SetConfig+0x8a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a20      	ldr	r2, [pc, #128]	; (80033b4 <TIM_Base_SetConfig+0xf0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00b      	beq.n	800334e <TIM_Base_SetConfig+0x8a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <TIM_Base_SetConfig+0xf4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <TIM_Base_SetConfig+0x8a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <TIM_Base_SetConfig+0xf8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d003      	beq.n	800334e <TIM_Base_SetConfig+0x8a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <TIM_Base_SetConfig+0xfc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d108      	bne.n	8003360 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a08      	ldr	r2, [pc, #32]	; (80033a8 <TIM_Base_SetConfig+0xe4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d103      	bne.n	8003394 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	615a      	str	r2, [r3, #20]
}
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010000 	.word	0x40010000
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40000c00 	.word	0x40000c00
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800

080033c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	2201      	movs	r2, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a1a      	ldr	r2, [r3, #32]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	401a      	ands	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a1a      	ldr	r2, [r3, #32]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003424:	2302      	movs	r3, #2
 8003426:	e050      	b.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d018      	beq.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003474:	d013      	beq.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00e      	beq.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a16      	ldr	r2, [pc, #88]	; (80034e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d009      	beq.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d004      	beq.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d10c      	bne.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40010000 	.word	0x40010000
 80034dc:	40000400 	.word	0x40000400
 80034e0:	40000800 	.word	0x40000800
 80034e4:	40000c00 	.word	0x40000c00
 80034e8:	40014000 	.word	0x40014000

080034ec <ST7735_Select>:
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay


static void ST7735_Select()
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80034f0:	2200      	movs	r2, #0
 80034f2:	2140      	movs	r1, #64	; 0x40
 80034f4:	4802      	ldr	r0, [pc, #8]	; (8003500 <ST7735_Select+0x14>)
 80034f6:	f7fe fef3 	bl	80022e0 <HAL_GPIO_WritePin>
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40020400 	.word	0x40020400

08003504 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8003508:	2201      	movs	r2, #1
 800350a:	2140      	movs	r1, #64	; 0x40
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <ST7735_Unselect+0x14>)
 800350e:	f7fe fee7 	bl	80022e0 <HAL_GPIO_WritePin>
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40020400 	.word	0x40020400

0800351c <ST7735_Reset>:

static void ST7735_Reset()
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8003520:	2200      	movs	r2, #0
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	4806      	ldr	r0, [pc, #24]	; (8003540 <ST7735_Reset+0x24>)
 8003526:	f7fe fedb 	bl	80022e0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800352a:	2005      	movs	r0, #5
 800352c:	f7fe fc32 	bl	8001d94 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8003530:	2201      	movs	r2, #1
 8003532:	2180      	movs	r1, #128	; 0x80
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <ST7735_Reset+0x24>)
 8003536:	f7fe fed3 	bl	80022e0 <HAL_GPIO_WritePin>
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40020400 	.word	0x40020400

08003544 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800354e:	2200      	movs	r2, #0
 8003550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003554:	4806      	ldr	r0, [pc, #24]	; (8003570 <ST7735_WriteCommand+0x2c>)
 8003556:	f7fe fec3 	bl	80022e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800355a:	1df9      	adds	r1, r7, #7
 800355c:	f04f 33ff 	mov.w	r3, #4294967295
 8003560:	2201      	movs	r2, #1
 8003562:	4804      	ldr	r0, [pc, #16]	; (8003574 <ST7735_WriteCommand+0x30>)
 8003564:	f7ff fb73 	bl	8002c4e <HAL_SPI_Transmit>
}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40020400 	.word	0x40020400
 8003574:	20000140 	.word	0x20000140

08003578 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003582:	2201      	movs	r2, #1
 8003584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003588:	4807      	ldr	r0, [pc, #28]	; (80035a8 <ST7735_WriteData+0x30>)
 800358a:	f7fe fea9 	bl	80022e0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	b29a      	uxth	r2, r3
 8003592:	f04f 33ff 	mov.w	r3, #4294967295
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4804      	ldr	r0, [pc, #16]	; (80035ac <ST7735_WriteData+0x34>)
 800359a:	f7ff fb58 	bl	8002c4e <HAL_SPI_Transmit>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40020400 	.word	0x40020400
 80035ac:	20000140 	.word	0x20000140

080035b0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80035c2:	e034      	b.n	800362e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	607a      	str	r2, [r7, #4]
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80035ce:	7afb      	ldrb	r3, [r7, #11]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ffb7 	bl	8003544 <ST7735_WriteCommand>

        numArgs = *addr++;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80035e0:	7abb      	ldrb	r3, [r7, #10]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80035ea:	7abb      	ldrb	r3, [r7, #10]
 80035ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035f0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80035f2:	7abb      	ldrb	r3, [r7, #10]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80035f8:	7abb      	ldrb	r3, [r7, #10]
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ffbb 	bl	8003578 <ST7735_WriteData>
            addr += numArgs;
 8003602:	7abb      	ldrb	r3, [r7, #10]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	4413      	add	r3, r2
 8003608:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800360a:	89bb      	ldrh	r3, [r7, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800361a:	89bb      	ldrh	r3, [r7, #12]
 800361c:	2bff      	cmp	r3, #255	; 0xff
 800361e:	d102      	bne.n	8003626 <ST7735_ExecuteCommandList+0x76>
 8003620:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003624:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8003626:	89bb      	ldrh	r3, [r7, #12]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fe fbb3 	bl	8001d94 <HAL_Delay>
    while(numCommands--) {
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	1e5a      	subs	r2, r3, #1
 8003632:	73fa      	strb	r2, [r7, #15]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1c5      	bne.n	80035c4 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003642:	b590      	push	{r4, r7, lr}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	4604      	mov	r4, r0
 800364a:	4608      	mov	r0, r1
 800364c:	4611      	mov	r1, r2
 800364e:	461a      	mov	r2, r3
 8003650:	4623      	mov	r3, r4
 8003652:	71fb      	strb	r3, [r7, #7]
 8003654:	4603      	mov	r3, r0
 8003656:	71bb      	strb	r3, [r7, #6]
 8003658:	460b      	mov	r3, r1
 800365a:	717b      	strb	r3, [r7, #5]
 800365c:	4613      	mov	r3, r2
 800365e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003660:	202a      	movs	r0, #42	; 0x2a
 8003662:	f7ff ff6f 	bl	8003544 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8003666:	2300      	movs	r3, #0
 8003668:	733b      	strb	r3, [r7, #12]
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	737b      	strb	r3, [r7, #13]
 800366e:	2300      	movs	r3, #0
 8003670:	73bb      	strb	r3, [r7, #14]
 8003672:	797b      	ldrb	r3, [r7, #5]
 8003674:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003676:	f107 030c 	add.w	r3, r7, #12
 800367a:	2104      	movs	r1, #4
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ff7b 	bl	8003578 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003682:	202b      	movs	r0, #43	; 0x2b
 8003684:	f7ff ff5e 	bl	8003544 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8003688:	79bb      	ldrb	r3, [r7, #6]
 800368a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800368c:	793b      	ldrb	r3, [r7, #4]
 800368e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003690:	f107 030c 	add.w	r3, r7, #12
 8003694:	2104      	movs	r1, #4
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff ff6e 	bl	8003578 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800369c:	202c      	movs	r0, #44	; 0x2c
 800369e:	f7ff ff51 	bl	8003544 <ST7735_WriteCommand>
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd90      	pop	{r4, r7, pc}
	...

080036ac <ST7735_Init>:

void ST7735_Init()
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
    ST7735_Select();
 80036b0:	f7ff ff1c 	bl	80034ec <ST7735_Select>
    ST7735_Reset();
 80036b4:	f7ff ff32 	bl	800351c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80036b8:	4806      	ldr	r0, [pc, #24]	; (80036d4 <ST7735_Init+0x28>)
 80036ba:	f7ff ff79 	bl	80035b0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80036be:	4806      	ldr	r0, [pc, #24]	; (80036d8 <ST7735_Init+0x2c>)
 80036c0:	f7ff ff76 	bl	80035b0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80036c4:	4805      	ldr	r0, [pc, #20]	; (80036dc <ST7735_Init+0x30>)
 80036c6:	f7ff ff73 	bl	80035b0 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80036ca:	f7ff ff1b 	bl	8003504 <ST7735_Unselect>
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	080067e0 	.word	0x080067e0
 80036d8:	0800681c 	.word	0x0800681c
 80036dc:	0800682c 	.word	0x0800682c

080036e0 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	80fb      	strh	r3, [r7, #6]
 80036ea:	460b      	mov	r3, r1
 80036ec:	80bb      	strh	r3, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	2b9f      	cmp	r3, #159	; 0x9f
 80036f6:	d823      	bhi.n	8003740 <ST7735_DrawPixel+0x60>
 80036f8:	88bb      	ldrh	r3, [r7, #4]
 80036fa:	2b7f      	cmp	r3, #127	; 0x7f
 80036fc:	d820      	bhi.n	8003740 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 80036fe:	f7ff fef5 	bl	80034ec <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	b2d8      	uxtb	r0, r3
 8003706:	88bb      	ldrh	r3, [r7, #4]
 8003708:	b2d9      	uxtb	r1, r3
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	3301      	adds	r3, #1
 8003710:	b2da      	uxtb	r2, r3
 8003712:	88bb      	ldrh	r3, [r7, #4]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	3301      	adds	r3, #1
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f7ff ff92 	bl	8003642 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800371e:	887b      	ldrh	r3, [r7, #2]
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	b29b      	uxth	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	733b      	strb	r3, [r7, #12]
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800372e:	f107 030c 	add.w	r3, r7, #12
 8003732:	2102      	movs	r1, #2
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff1f 	bl	8003578 <ST7735_WriteData>

    ST7735_Unselect();
 800373a:	f7ff fee3 	bl	8003504 <ST7735_Unselect>
 800373e:	e000      	b.n	8003742 <ST7735_DrawPixel+0x62>
        return;
 8003740:	bf00      	nop
}
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003748:	b082      	sub	sp, #8
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b089      	sub	sp, #36	; 0x24
 800374e:	af00      	add	r7, sp, #0
 8003750:	637b      	str	r3, [r7, #52]	; 0x34
 8003752:	4603      	mov	r3, r0
 8003754:	80fb      	strh	r3, [r7, #6]
 8003756:	460b      	mov	r3, r1
 8003758:	80bb      	strh	r3, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	b2d8      	uxtb	r0, r3
 8003762:	88bb      	ldrh	r3, [r7, #4]
 8003764:	b2d9      	uxtb	r1, r3
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	b2da      	uxtb	r2, r3
 800376a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800376e:	4413      	add	r3, r2
 8003770:	b2db      	uxtb	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b2dc      	uxtb	r4, r3
 8003776:	88bb      	ldrh	r3, [r7, #4]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800377e:	4413      	add	r3, r2
 8003780:	b2db      	uxtb	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b2db      	uxtb	r3, r3
 8003786:	4622      	mov	r2, r4
 8003788:	f7ff ff5b 	bl	8003642 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	e043      	b.n	800381a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8003792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	3b20      	subs	r3, #32
 8003798:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	4619      	mov	r1, r3
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	440b      	add	r3, r1
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	e029      	b.n	8003808 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00e      	beq.n	80037e2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80037c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80037c6:	0a1b      	lsrs	r3, r3, #8
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	743b      	strb	r3, [r7, #16]
 80037ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80037d4:	f107 0310 	add.w	r3, r7, #16
 80037d8:	2102      	movs	r1, #2
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff fecc 	bl	8003578 <ST7735_WriteData>
 80037e0:	e00f      	b.n	8003802 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80037e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	733b      	strb	r3, [r7, #12]
 80037ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80037f6:	f107 030c 	add.w	r3, r7, #12
 80037fa:	2102      	movs	r1, #2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff febb 	bl	8003578 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	3301      	adds	r3, #1
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800380c:	461a      	mov	r2, r3
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	4293      	cmp	r3, r2
 8003812:	d3cf      	bcc.n	80037b4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	3301      	adds	r3, #1
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800381e:	461a      	mov	r2, r3
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4293      	cmp	r3, r2
 8003824:	d3b5      	bcc.n	8003792 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8003826:	bf00      	nop
 8003828:	bf00      	nop
 800382a:	3724      	adds	r7, #36	; 0x24
 800382c:	46bd      	mov	sp, r7
 800382e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003832:	b002      	add	sp, #8
 8003834:	4770      	bx	lr

08003836 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003836:	b082      	sub	sp, #8
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af04      	add	r7, sp, #16
 800383e:	603a      	str	r2, [r7, #0]
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	4603      	mov	r3, r0
 8003844:	80fb      	strh	r3, [r7, #6]
 8003846:	460b      	mov	r3, r1
 8003848:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800384a:	f7ff fe4f 	bl	80034ec <ST7735_Select>

    while(*str) {
 800384e:	e02d      	b.n	80038ac <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	7d3a      	ldrb	r2, [r7, #20]
 8003854:	4413      	add	r3, r2
 8003856:	2b9f      	cmp	r3, #159	; 0x9f
 8003858:	dd13      	ble.n	8003882 <ST7735_WriteString+0x4c>
            x = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800385e:	7d7b      	ldrb	r3, [r7, #21]
 8003860:	b29a      	uxth	r2, r3
 8003862:	88bb      	ldrh	r3, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8003868:	88bb      	ldrh	r3, [r7, #4]
 800386a:	7d7a      	ldrb	r2, [r7, #21]
 800386c:	4413      	add	r3, r2
 800386e:	2b7f      	cmp	r3, #127	; 0x7f
 8003870:	dc21      	bgt.n	80038b6 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b20      	cmp	r3, #32
 8003878:	d103      	bne.n	8003882 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	3301      	adds	r3, #1
 800387e:	603b      	str	r3, [r7, #0]
                continue;
 8003880:	e014      	b.n	80038ac <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	88b9      	ldrh	r1, [r7, #4]
 8003888:	88f8      	ldrh	r0, [r7, #6]
 800388a:	8c3b      	ldrh	r3, [r7, #32]
 800388c:	9302      	str	r3, [sp, #8]
 800388e:	8bbb      	ldrh	r3, [r7, #28]
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f7ff ff56 	bl	8003748 <ST7735_WriteChar>
        x += font.width;
 800389c:	7d3b      	ldrb	r3, [r7, #20]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	4413      	add	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
        str++;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	603b      	str	r3, [r7, #0]
    while(*str) {
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1cd      	bne.n	8003850 <ST7735_WriteString+0x1a>
 80038b4:	e000      	b.n	80038b8 <ST7735_WriteString+0x82>
                break;
 80038b6:	bf00      	nop
    }

    ST7735_Unselect();
 80038b8:	f7ff fe24 	bl	8003504 <ST7735_Unselect>
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038c6:	b002      	add	sp, #8
 80038c8:	4770      	bx	lr

080038ca <ST7735_WriteStringWithSelect>:


void ST7735_WriteStringWithSelect(uint16_t x, uint16_t y, const char* str, FontDef font, uint8_t select_pos, Color_TypeDef color)
{
 80038ca:	b082      	sub	sp, #8
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af04      	add	r7, sp, #16
 80038d2:	603a      	str	r2, [r7, #0]
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	4603      	mov	r3, r0
 80038d8:	80fb      	strh	r3, [r7, #6]
 80038da:	460b      	mov	r3, r1
 80038dc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80038de:	f7ff fe05 	bl	80034ec <ST7735_Select>

    uint8_t pos_counter = 6;
 80038e2:	2306      	movs	r3, #6
 80038e4:	73fb      	strb	r3, [r7, #15]

    while(*str) {
 80038e6:	e059      	b.n	800399c <ST7735_WriteStringWithSelect+0xd2>
        if (x + font.width >= ST7735_WIDTH) {
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80038ee:	4413      	add	r3, r2
 80038f0:	2b9f      	cmp	r3, #159	; 0x9f
 80038f2:	dd15      	ble.n	8003920 <ST7735_WriteStringWithSelect+0x56>
            x = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80038f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	88bb      	ldrh	r3, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= ST7735_HEIGHT) {
 8003904:	88bb      	ldrh	r3, [r7, #4]
 8003906:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800390a:	4413      	add	r3, r2
 800390c:	2b7f      	cmp	r3, #127	; 0x7f
 800390e:	dc4a      	bgt.n	80039a6 <ST7735_WriteStringWithSelect+0xdc>
                break;
            }

            if(*str == ' ') {
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b20      	cmp	r3, #32
 8003916:	d103      	bne.n	8003920 <ST7735_WriteStringWithSelect+0x56>
                // skip spaces in the beginning of the new line
                str++;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	603b      	str	r3, [r7, #0]
                continue;
 800391e:	e03d      	b.n	800399c <ST7735_WriteStringWithSelect+0xd2>
            }
        }
        if (pos_counter == select_pos && (*str >= '0' && *str <= '9'))
 8003920:	7bfa      	ldrb	r2, [r7, #15]
 8003922:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003926:	429a      	cmp	r2, r3
 8003928:	d116      	bne.n	8003958 <ST7735_WriteStringWithSelect+0x8e>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b2f      	cmp	r3, #47	; 0x2f
 8003930:	d912      	bls.n	8003958 <ST7735_WriteStringWithSelect+0x8e>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b39      	cmp	r3, #57	; 0x39
 8003938:	d80e      	bhi.n	8003958 <ST7735_WriteStringWithSelect+0x8e>
        	ST7735_WriteChar(x, y, *str, font, color.selectText, color.selectBackground);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	781c      	ldrb	r4, [r3, #0]
 800393e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003940:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003942:	88b9      	ldrh	r1, [r7, #4]
 8003944:	88f8      	ldrh	r0, [r7, #6]
 8003946:	9202      	str	r2, [sp, #8]
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	4622      	mov	r2, r4
 8003952:	f7ff fef9 	bl	8003748 <ST7735_WriteChar>
 8003956:	e00d      	b.n	8003974 <ST7735_WriteStringWithSelect+0xaa>
        else
        	ST7735_WriteChar(x, y, *str, font, color.mainText, color.mainBackground);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	781c      	ldrb	r4, [r3, #0]
 800395c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800395e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8003960:	88b9      	ldrh	r1, [r7, #4]
 8003962:	88f8      	ldrh	r0, [r7, #6]
 8003964:	9202      	str	r2, [sp, #8]
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	4622      	mov	r2, r4
 8003970:	f7ff feea 	bl	8003748 <ST7735_WriteChar>

        if (*str >= '0' && *str <= '9') pos_counter--;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b2f      	cmp	r3, #47	; 0x2f
 800397a:	d906      	bls.n	800398a <ST7735_WriteStringWithSelect+0xc0>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b39      	cmp	r3, #57	; 0x39
 8003982:	d802      	bhi.n	800398a <ST7735_WriteStringWithSelect+0xc0>
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	3b01      	subs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]

        x += font.width;
 800398a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800398e:	b29a      	uxth	r2, r3
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	4413      	add	r3, r2
 8003994:	80fb      	strh	r3, [r7, #6]
        str++;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	3301      	adds	r3, #1
 800399a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1a1      	bne.n	80038e8 <ST7735_WriteStringWithSelect+0x1e>
 80039a4:	e000      	b.n	80039a8 <ST7735_WriteStringWithSelect+0xde>
                break;
 80039a6:	bf00      	nop
    }

    ST7735_Unselect();
 80039a8:	f7ff fdac 	bl	8003504 <ST7735_Unselect>
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80039b6:	b002      	add	sp, #8
 80039b8:	4770      	bx	lr
	...

080039bc <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4604      	mov	r4, r0
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4623      	mov	r3, r4
 80039cc:	80fb      	strh	r3, [r7, #6]
 80039ce:	4603      	mov	r3, r0
 80039d0:	80bb      	strh	r3, [r7, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	807b      	strh	r3, [r7, #2]
 80039d6:	4613      	mov	r3, r2
 80039d8:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	2b9f      	cmp	r3, #159	; 0x9f
 80039de:	d858      	bhi.n	8003a92 <ST7735_FillRectangle+0xd6>
 80039e0:	88bb      	ldrh	r3, [r7, #4]
 80039e2:	2b7f      	cmp	r3, #127	; 0x7f
 80039e4:	d855      	bhi.n	8003a92 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	887b      	ldrh	r3, [r7, #2]
 80039ea:	4413      	add	r3, r2
 80039ec:	2ba0      	cmp	r3, #160	; 0xa0
 80039ee:	dd03      	ble.n	80039f8 <ST7735_FillRectangle+0x3c>
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80039f6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80039f8:	88ba      	ldrh	r2, [r7, #4]
 80039fa:	883b      	ldrh	r3, [r7, #0]
 80039fc:	4413      	add	r3, r2
 80039fe:	2b80      	cmp	r3, #128	; 0x80
 8003a00:	dd03      	ble.n	8003a0a <ST7735_FillRectangle+0x4e>
 8003a02:	88bb      	ldrh	r3, [r7, #4]
 8003a04:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003a08:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8003a0a:	f7ff fd6f 	bl	80034ec <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	b2d8      	uxtb	r0, r3
 8003a12:	88bb      	ldrh	r3, [r7, #4]
 8003a14:	b2d9      	uxtb	r1, r3
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	4413      	add	r3, r2
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b2dc      	uxtb	r4, r3
 8003a26:	88bb      	ldrh	r3, [r7, #4]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	883b      	ldrh	r3, [r7, #0]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	4622      	mov	r2, r4
 8003a38:	f7ff fe03 	bl	8003642 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8003a3c:	8c3b      	ldrh	r3, [r7, #32]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	733b      	strb	r3, [r7, #12]
 8003a46:	8c3b      	ldrh	r3, [r7, #32]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a52:	4812      	ldr	r0, [pc, #72]	; (8003a9c <ST7735_FillRectangle+0xe0>)
 8003a54:	f7fe fc44 	bl	80022e0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8003a58:	883b      	ldrh	r3, [r7, #0]
 8003a5a:	80bb      	strh	r3, [r7, #4]
 8003a5c:	e013      	b.n	8003a86 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8003a5e:	887b      	ldrh	r3, [r7, #2]
 8003a60:	80fb      	strh	r3, [r7, #6]
 8003a62:	e00a      	b.n	8003a7a <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003a64:	f107 010c 	add.w	r1, r7, #12
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	480c      	ldr	r0, [pc, #48]	; (8003aa0 <ST7735_FillRectangle+0xe4>)
 8003a70:	f7ff f8ed 	bl	8002c4e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	80fb      	strh	r3, [r7, #6]
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f1      	bne.n	8003a64 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8003a80:	88bb      	ldrh	r3, [r7, #4]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	80bb      	strh	r3, [r7, #4]
 8003a86:	88bb      	ldrh	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e8      	bne.n	8003a5e <ST7735_FillRectangle+0xa2>
        }
    }
    ST7735_Unselect();
 8003a8c:	f7ff fd3a 	bl	8003504 <ST7735_Unselect>
 8003a90:	e000      	b.n	8003a94 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003a92:	bf00      	nop
}
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd90      	pop	{r4, r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40020400 	.word	0x40020400
 8003aa0:	20000140 	.word	0x20000140

08003aa4 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	4603      	mov	r3, r0
 8003aac:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	22a0      	movs	r2, #160	; 0xa0
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f7ff ff7f 	bl	80039bc <ST7735_FillRectangle>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data)
{
 8003ac6:	b590      	push	{r4, r7, lr}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	4604      	mov	r4, r0
 8003ace:	4608      	mov	r0, r1
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	80fb      	strh	r3, [r7, #6]
 8003ad8:	4603      	mov	r3, r0
 8003ada:	80bb      	strh	r3, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	803b      	strh	r3, [r7, #0]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	2b9f      	cmp	r3, #159	; 0x9f
 8003ae8:	d831      	bhi.n	8003b4e <ST7735_DrawImage+0x88>
 8003aea:	88bb      	ldrh	r3, [r7, #4]
 8003aec:	2b7f      	cmp	r3, #127	; 0x7f
 8003aee:	d82e      	bhi.n	8003b4e <ST7735_DrawImage+0x88>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8003af0:	88fa      	ldrh	r2, [r7, #6]
 8003af2:	887b      	ldrh	r3, [r7, #2]
 8003af4:	4413      	add	r3, r2
 8003af6:	2ba0      	cmp	r3, #160	; 0xa0
 8003af8:	dc2b      	bgt.n	8003b52 <ST7735_DrawImage+0x8c>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8003afa:	88ba      	ldrh	r2, [r7, #4]
 8003afc:	883b      	ldrh	r3, [r7, #0]
 8003afe:	4413      	add	r3, r2
 8003b00:	2b80      	cmp	r3, #128	; 0x80
 8003b02:	dc28      	bgt.n	8003b56 <ST7735_DrawImage+0x90>

    ST7735_Select();
 8003b04:	f7ff fcf2 	bl	80034ec <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	b2d8      	uxtb	r0, r3
 8003b0c:	88bb      	ldrh	r3, [r7, #4]
 8003b0e:	b2d9      	uxtb	r1, r3
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	887b      	ldrh	r3, [r7, #2]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b2dc      	uxtb	r4, r3
 8003b20:	88bb      	ldrh	r3, [r7, #4]
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	883b      	ldrh	r3, [r7, #0]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	4413      	add	r3, r2
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	4622      	mov	r2, r4
 8003b32:	f7ff fd86 	bl	8003642 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	883a      	ldrh	r2, [r7, #0]
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4619      	mov	r1, r3
 8003b42:	69b8      	ldr	r0, [r7, #24]
 8003b44:	f7ff fd18 	bl	8003578 <ST7735_WriteData>
    ST7735_Unselect();
 8003b48:	f7ff fcdc 	bl	8003504 <ST7735_Unselect>
 8003b4c:	e004      	b.n	8003b58 <ST7735_DrawImage+0x92>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <ST7735_DrawImage+0x92>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <ST7735_DrawImage+0x92>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8003b56:	bf00      	nop
}
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd90      	pop	{r4, r7, pc}

08003b5e <ST7735_DrawHLine>:
    ST7735_Unselect();
}


void ST7735_DrawHLine(uint8_t x, uint8_t x1, uint8_t y, uint16_t color)
{
 8003b5e:	b590      	push	{r4, r7, lr}
 8003b60:	b085      	sub	sp, #20
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4604      	mov	r4, r0
 8003b66:	4608      	mov	r0, r1
 8003b68:	4611      	mov	r1, r2
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4623      	mov	r3, r4
 8003b6e:	71fb      	strb	r3, [r7, #7]
 8003b70:	4603      	mov	r3, r0
 8003b72:	71bb      	strb	r3, [r7, #6]
 8003b74:	460b      	mov	r3, r1
 8003b76:	717b      	strb	r3, [r7, #5]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	807b      	strh	r3, [r7, #2]
	ST7735_Select();
 8003b7c:	f7ff fcb6 	bl	80034ec <ST7735_Select>
	uint16_t len = x1-x;
 8003b80:	79bb      	ldrb	r3, [r7, #6]
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	817b      	strh	r3, [r7, #10]
	uint8_t data[] = {color >> 8, color & 0xFF};
 8003b8c:	887b      	ldrh	r3, [r7, #2]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	723b      	strb	r3, [r7, #8]
 8003b96:	887b      	ldrh	r3, [r7, #2]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	727b      	strb	r3, [r7, #9]
	ST7735_SetAddressWindow(x,y,x1,y);
 8003b9c:	797b      	ldrb	r3, [r7, #5]
 8003b9e:	79ba      	ldrb	r2, [r7, #6]
 8003ba0:	7979      	ldrb	r1, [r7, #5]
 8003ba2:	79f8      	ldrb	r0, [r7, #7]
 8003ba4:	f7ff fd4d 	bl	8003642 <ST7735_SetAddressWindow>
	for(int i = 0; i < len; i++) {
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e008      	b.n	8003bc0 <ST7735_DrawHLine+0x62>
		ST7735_WriteData(data, sizeof(data));
 8003bae:	f107 0308 	add.w	r3, r7, #8
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fcdf 	bl	8003578 <ST7735_WriteData>
	for(int i = 0; i < len; i++) {
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	897b      	ldrh	r3, [r7, #10]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	dbf2      	blt.n	8003bae <ST7735_DrawHLine+0x50>
	}
	ST7735_Unselect();
 8003bc8:	f7ff fc9c 	bl	8003504 <ST7735_Unselect>
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd90      	pop	{r4, r7, pc}

08003bd4 <ST7735_DrawVLine>:

void ST7735_DrawVLine(uint8_t x, uint8_t y, uint8_t y1, uint16_t color)
{
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4604      	mov	r4, r0
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4623      	mov	r3, r4
 8003be4:	71fb      	strb	r3, [r7, #7]
 8003be6:	4603      	mov	r3, r0
 8003be8:	71bb      	strb	r3, [r7, #6]
 8003bea:	460b      	mov	r3, r1
 8003bec:	717b      	strb	r3, [r7, #5]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	807b      	strh	r3, [r7, #2]
	ST7735_Select();
 8003bf2:	f7ff fc7b 	bl	80034ec <ST7735_Select>
	uint16_t len = y1-y;
 8003bf6:	797b      	ldrb	r3, [r7, #5]
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	79bb      	ldrb	r3, [r7, #6]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	817b      	strh	r3, [r7, #10]
	uint8_t data[] = {color >> 8, color & 0xFF};
 8003c02:	887b      	ldrh	r3, [r7, #2]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	723b      	strb	r3, [r7, #8]
 8003c0c:	887b      	ldrh	r3, [r7, #2]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	727b      	strb	r3, [r7, #9]
	ST7735_SetAddressWindow(x,y,x,y1);
 8003c12:	797b      	ldrb	r3, [r7, #5]
 8003c14:	79fa      	ldrb	r2, [r7, #7]
 8003c16:	79b9      	ldrb	r1, [r7, #6]
 8003c18:	79f8      	ldrb	r0, [r7, #7]
 8003c1a:	f7ff fd12 	bl	8003642 <ST7735_SetAddressWindow>
	for(int i = 0;i < len; i++) {
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	e008      	b.n	8003c36 <ST7735_DrawVLine+0x62>
		ST7735_WriteData(data, sizeof(data));
 8003c24:	f107 0308 	add.w	r3, r7, #8
 8003c28:	2102      	movs	r1, #2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fca4 	bl	8003578 <ST7735_WriteData>
	for(int i = 0;i < len; i++) {
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	3301      	adds	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	897b      	ldrh	r3, [r7, #10]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	dbf2      	blt.n	8003c24 <ST7735_DrawVLine+0x50>
	}
	ST7735_Unselect();
 8003c3e:	f7ff fc61 	bl	8003504 <ST7735_Unselect>
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd90      	pop	{r4, r7, pc}

08003c4a <ST7735_DrawLine>:

void ST7735_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8003c4a:	b590      	push	{r4, r7, lr}
 8003c4c:	b087      	sub	sp, #28
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	4604      	mov	r4, r0
 8003c52:	4608      	mov	r0, r1
 8003c54:	4611      	mov	r1, r2
 8003c56:	461a      	mov	r2, r3
 8003c58:	4623      	mov	r3, r4
 8003c5a:	80fb      	strh	r3, [r7, #6]
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	80bb      	strh	r3, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	807b      	strh	r3, [r7, #2]
 8003c64:	4613      	mov	r3, r2
 8003c66:	803b      	strh	r3, [r7, #0]
	int16_t dx = x2-x1;
 8003c68:	887a      	ldrh	r2, [r7, #2]
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	82bb      	strh	r3, [r7, #20]
	int16_t dy = y2-y1;
 8003c72:	883a      	ldrh	r2, [r7, #0]
 8003c74:	88bb      	ldrh	r3, [r7, #4]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	827b      	strh	r3, [r7, #18]
	int16_t dxsym = (dx > 0) ? 1 : -1;
 8003c7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	dd01      	ble.n	8003c88 <ST7735_DrawLine+0x3e>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e001      	b.n	8003c8c <ST7735_DrawLine+0x42>
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	823b      	strh	r3, [r7, #16]
	int16_t dysym = (dy > 0) ? 1 : -1;
 8003c8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	dd01      	ble.n	8003c9a <ST7735_DrawLine+0x50>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e001      	b.n	8003c9e <ST7735_DrawLine+0x54>
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9e:	81fb      	strh	r3, [r7, #14]

	if (dx == 0) {
 8003ca0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d119      	bne.n	8003cdc <ST7735_DrawLine+0x92>
		(y2 > y1) ? ST7735_DrawVLine(x1, y1, y2, color) : ST7735_DrawVLine(x1, y2, y1, color);
 8003ca8:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003cac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	dd09      	ble.n	8003cc8 <ST7735_DrawLine+0x7e>
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	b2d8      	uxtb	r0, r3
 8003cb8:	88bb      	ldrh	r3, [r7, #4]
 8003cba:	b2d9      	uxtb	r1, r3
 8003cbc:	883b      	ldrh	r3, [r7, #0]
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cc2:	f7ff ff87 	bl	8003bd4 <ST7735_DrawVLine>
		return;
 8003cc6:	e0a4      	b.n	8003e12 <ST7735_DrawLine+0x1c8>
		(y2 > y1) ? ST7735_DrawVLine(x1, y1, y2, color) : ST7735_DrawVLine(x1, y2, y1, color);
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	b2d8      	uxtb	r0, r3
 8003ccc:	883b      	ldrh	r3, [r7, #0]
 8003cce:	b2d9      	uxtb	r1, r3
 8003cd0:	88bb      	ldrh	r3, [r7, #4]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cd6:	f7ff ff7d 	bl	8003bd4 <ST7735_DrawVLine>
		return;
 8003cda:	e09a      	b.n	8003e12 <ST7735_DrawLine+0x1c8>
	}
	if (dy == 0) {
 8003cdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d119      	bne.n	8003d18 <ST7735_DrawLine+0xce>
		(x2 > x1) ? ST7735_DrawHLine(x1, x2, y1, color) : ST7735_DrawHLine(x2, x1, y1, color);
 8003ce4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003ce8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	dd09      	ble.n	8003d04 <ST7735_DrawLine+0xba>
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	b2d8      	uxtb	r0, r3
 8003cf4:	887b      	ldrh	r3, [r7, #2]
 8003cf6:	b2d9      	uxtb	r1, r3
 8003cf8:	88bb      	ldrh	r3, [r7, #4]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cfe:	f7ff ff2e 	bl	8003b5e <ST7735_DrawHLine>
		return;
 8003d02:	e086      	b.n	8003e12 <ST7735_DrawLine+0x1c8>
		(x2 > x1) ? ST7735_DrawHLine(x1, x2, y1, color) : ST7735_DrawHLine(x2, x1, y1, color);
 8003d04:	887b      	ldrh	r3, [r7, #2]
 8003d06:	b2d8      	uxtb	r0, r3
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	b2d9      	uxtb	r1, r3
 8003d0c:	88bb      	ldrh	r3, [r7, #4]
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d12:	f7ff ff24 	bl	8003b5e <ST7735_DrawHLine>
		return;
 8003d16:	e07c      	b.n	8003e12 <ST7735_DrawLine+0x1c8>
	}

	dx *= dxsym;
 8003d18:	8aba      	ldrh	r2, [r7, #20]
 8003d1a:	8a3b      	ldrh	r3, [r7, #16]
 8003d1c:	fb12 f303 	smulbb	r3, r2, r3
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	82bb      	strh	r3, [r7, #20]
	dy *= dysym;
 8003d24:	8a7a      	ldrh	r2, [r7, #18]
 8003d26:	89fb      	ldrh	r3, [r7, #14]
 8003d28:	fb12 f303 	smulbb	r3, r2, r3
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	827b      	strh	r3, [r7, #18]
	int16_t dx2 = dx << 1;
 8003d30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	81bb      	strh	r3, [r7, #12]
	int16_t dy2 = dy << 1;
 8003d38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	817b      	strh	r3, [r7, #10]
	int16_t di;

	if (dx >= dy) {
 8003d40:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003d44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	db2e      	blt.n	8003daa <ST7735_DrawLine+0x160>
		di = dy2 - dx;
 8003d4c:	897a      	ldrh	r2, [r7, #10]
 8003d4e:	8abb      	ldrh	r3, [r7, #20]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	82fb      	strh	r3, [r7, #22]
		while (x1 != x2) {
 8003d56:	e021      	b.n	8003d9c <ST7735_DrawLine+0x152>
			ST7735_DrawPixel(x1, y1, color);
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	88b9      	ldrh	r1, [r7, #4]
 8003d5c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fcbe 	bl	80036e0 <ST7735_DrawPixel>
			x1 += dxsym;
 8003d64:	88fa      	ldrh	r2, [r7, #6]
 8003d66:	8a3b      	ldrh	r3, [r7, #16]
 8003d68:	4413      	add	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	80fb      	strh	r3, [r7, #6]
			if (di < 0) {
 8003d6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	da05      	bge.n	8003d82 <ST7735_DrawLine+0x138>
				di += dy2;
 8003d76:	8afa      	ldrh	r2, [r7, #22]
 8003d78:	897b      	ldrh	r3, [r7, #10]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	82fb      	strh	r3, [r7, #22]
 8003d80:	e00c      	b.n	8003d9c <ST7735_DrawLine+0x152>
			}
			else {
				di += dy2 - dx2;
 8003d82:	897a      	ldrh	r2, [r7, #10]
 8003d84:	89bb      	ldrh	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	8afb      	ldrh	r3, [r7, #22]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	82fb      	strh	r3, [r7, #22]
				y1 += dysym;
 8003d92:	88ba      	ldrh	r2, [r7, #4]
 8003d94:	89fb      	ldrh	r3, [r7, #14]
 8003d96:	4413      	add	r3, r2
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	80bb      	strh	r3, [r7, #4]
		while (x1 != x2) {
 8003d9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003da0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d1d7      	bne.n	8003d58 <ST7735_DrawLine+0x10e>
 8003da8:	e02d      	b.n	8003e06 <ST7735_DrawLine+0x1bc>
			}
		}
	}
	else {
		di = dx2 - dy;
 8003daa:	89ba      	ldrh	r2, [r7, #12]
 8003dac:	8a7b      	ldrh	r3, [r7, #18]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	82fb      	strh	r3, [r7, #22]
		while (y1 != y2) {
 8003db4:	e021      	b.n	8003dfa <ST7735_DrawLine+0x1b0>
			ST7735_DrawPixel(x1, y1, color);
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	88b9      	ldrh	r1, [r7, #4]
 8003dba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fc8f 	bl	80036e0 <ST7735_DrawPixel>
			y1 += dysym;
 8003dc2:	88ba      	ldrh	r2, [r7, #4]
 8003dc4:	89fb      	ldrh	r3, [r7, #14]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	80bb      	strh	r3, [r7, #4]
			if (di < 0) {
 8003dcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	da05      	bge.n	8003de0 <ST7735_DrawLine+0x196>
				di += dx2;
 8003dd4:	8afa      	ldrh	r2, [r7, #22]
 8003dd6:	89bb      	ldrh	r3, [r7, #12]
 8003dd8:	4413      	add	r3, r2
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	82fb      	strh	r3, [r7, #22]
 8003dde:	e00c      	b.n	8003dfa <ST7735_DrawLine+0x1b0>
			}
			else {
				di += dx2 - dy2;
 8003de0:	89ba      	ldrh	r2, [r7, #12]
 8003de2:	897b      	ldrh	r3, [r7, #10]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	8afb      	ldrh	r3, [r7, #22]
 8003dea:	4413      	add	r3, r2
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	82fb      	strh	r3, [r7, #22]
				x1 += dxsym;
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	8a3b      	ldrh	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	80fb      	strh	r3, [r7, #6]
		while (y1 != y2) {
 8003dfa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003dfe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d1d7      	bne.n	8003db6 <ST7735_DrawLine+0x16c>
			}
		}
	}
	ST7735_DrawPixel(x1, y1, color);
 8003e06:	88fb      	ldrh	r3, [r7, #6]
 8003e08:	88b9      	ldrh	r1, [r7, #4]
 8003e0a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fc67 	bl	80036e0 <ST7735_DrawPixel>
}
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd90      	pop	{r4, r7, pc}

08003e18 <ST7735_drawCircleHelper>:

void ST7735_drawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8003e18:	b590      	push	{r4, r7, lr}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4604      	mov	r4, r0
 8003e20:	4608      	mov	r0, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	461a      	mov	r2, r3
 8003e26:	4623      	mov	r3, r4
 8003e28:	80fb      	strh	r3, [r7, #6]
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	80bb      	strh	r3, [r7, #4]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	807b      	strh	r3, [r7, #2]
 8003e32:	4613      	mov	r3, r2
 8003e34:	707b      	strb	r3, [r7, #1]
  int16_t f = 1 - r;
 8003e36:	887b      	ldrh	r3, [r7, #2]
 8003e38:	f1c3 0301 	rsb	r3, r3, #1
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8003e40:	2301      	movs	r3, #1
 8003e42:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8003e44:	887b      	ldrh	r3, [r7, #2]
 8003e46:	461a      	mov	r2, r3
 8003e48:	03d2      	lsls	r2, r2, #15
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	827b      	strh	r3, [r7, #18]
  int16_t x = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	823b      	strh	r3, [r7, #16]
  int16_t y = r;
 8003e56:	887b      	ldrh	r3, [r7, #2]
 8003e58:	81fb      	strh	r3, [r7, #14]

  while (x < y) {
 8003e5a:	e095      	b.n	8003f88 <ST7735_drawCircleHelper+0x170>
    if (f >= 0) {
 8003e5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	db0e      	blt.n	8003e82 <ST7735_drawCircleHelper+0x6a>
      y--;
 8003e64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8003e70:	8a7b      	ldrh	r3, [r7, #18]
 8003e72:	3302      	adds	r3, #2
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	827b      	strh	r3, [r7, #18]
      f += ddF_y;
 8003e78:	8afa      	ldrh	r2, [r7, #22]
 8003e7a:	8a7b      	ldrh	r3, [r7, #18]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8003e82:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3301      	adds	r3, #1
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8003e8e:	8abb      	ldrh	r3, [r7, #20]
 8003e90:	3302      	adds	r3, #2
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	82bb      	strh	r3, [r7, #20]
    f += ddF_x;
 8003e96:	8afa      	ldrh	r2, [r7, #22]
 8003e98:	8abb      	ldrh	r3, [r7, #20]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	82fb      	strh	r3, [r7, #22]
    if (cornername & 0x4) {
 8003ea0:	787b      	ldrb	r3, [r7, #1]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d017      	beq.n	8003eda <ST7735_drawCircleHelper+0xc2>
    	ST7735_DrawPixel(x0 + x, y0 + y, color);
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	8a3b      	ldrh	r3, [r7, #16]
 8003eae:	4413      	add	r3, r2
 8003eb0:	b298      	uxth	r0, r3
 8003eb2:	88ba      	ldrh	r2, [r7, #4]
 8003eb4:	89fb      	ldrh	r3, [r7, #14]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f7ff fc0f 	bl	80036e0 <ST7735_DrawPixel>
    	ST7735_DrawPixel(x0 + y, y0 + x, color);
 8003ec2:	88fa      	ldrh	r2, [r7, #6]
 8003ec4:	89fb      	ldrh	r3, [r7, #14]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	b298      	uxth	r0, r3
 8003eca:	88ba      	ldrh	r2, [r7, #4]
 8003ecc:	8a3b      	ldrh	r3, [r7, #16]
 8003ece:	4413      	add	r3, r2
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f7ff fc03 	bl	80036e0 <ST7735_DrawPixel>
    }
    if (cornername & 0x2) {
 8003eda:	787b      	ldrb	r3, [r7, #1]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d017      	beq.n	8003f14 <ST7735_drawCircleHelper+0xfc>
    	ST7735_DrawPixel(x0 + x, y0 - y, color);
 8003ee4:	88fa      	ldrh	r2, [r7, #6]
 8003ee6:	8a3b      	ldrh	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	b298      	uxth	r0, r3
 8003eec:	88ba      	ldrh	r2, [r7, #4]
 8003eee:	89fb      	ldrh	r3, [r7, #14]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f7ff fbf2 	bl	80036e0 <ST7735_DrawPixel>
    	ST7735_DrawPixel(x0 + y, y0 - x, color);
 8003efc:	88fa      	ldrh	r2, [r7, #6]
 8003efe:	89fb      	ldrh	r3, [r7, #14]
 8003f00:	4413      	add	r3, r2
 8003f02:	b298      	uxth	r0, r3
 8003f04:	88ba      	ldrh	r2, [r7, #4]
 8003f06:	8a3b      	ldrh	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f7ff fbe6 	bl	80036e0 <ST7735_DrawPixel>
    }
    if (cornername & 0x8) {
 8003f14:	787b      	ldrb	r3, [r7, #1]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d017      	beq.n	8003f4e <ST7735_drawCircleHelper+0x136>
    	ST7735_DrawPixel(x0 - y, y0 + x, color);
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	89fb      	ldrh	r3, [r7, #14]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	b298      	uxth	r0, r3
 8003f26:	88ba      	ldrh	r2, [r7, #4]
 8003f28:	8a3b      	ldrh	r3, [r7, #16]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f30:	4619      	mov	r1, r3
 8003f32:	f7ff fbd5 	bl	80036e0 <ST7735_DrawPixel>
    	ST7735_DrawPixel(x0 - x, y0 + y, color);
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	8a3b      	ldrh	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	b298      	uxth	r0, r3
 8003f3e:	88ba      	ldrh	r2, [r7, #4]
 8003f40:	89fb      	ldrh	r3, [r7, #14]
 8003f42:	4413      	add	r3, r2
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f7ff fbc9 	bl	80036e0 <ST7735_DrawPixel>
    }
    if (cornername & 0x1) {
 8003f4e:	787b      	ldrb	r3, [r7, #1]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d017      	beq.n	8003f88 <ST7735_drawCircleHelper+0x170>
    	ST7735_DrawPixel(x0 - y, y0 - x, color);
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	89fb      	ldrh	r3, [r7, #14]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	b298      	uxth	r0, r3
 8003f60:	88ba      	ldrh	r2, [r7, #4]
 8003f62:	8a3b      	ldrh	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f7ff fbb8 	bl	80036e0 <ST7735_DrawPixel>
    	ST7735_DrawPixel(x0 - x, y0 - y, color);
 8003f70:	88fa      	ldrh	r2, [r7, #6]
 8003f72:	8a3b      	ldrh	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	b298      	uxth	r0, r3
 8003f78:	88ba      	ldrh	r2, [r7, #4]
 8003f7a:	89fb      	ldrh	r3, [r7, #14]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003f82:	4619      	mov	r1, r3
 8003f84:	f7ff fbac 	bl	80036e0 <ST7735_DrawPixel>
  while (x < y) {
 8003f88:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003f8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	f6ff af63 	blt.w	8003e5c <ST7735_drawCircleHelper+0x44>
    }
  }
}
 8003f96:	bf00      	nop
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd90      	pop	{r4, r7, pc}

08003fa0 <ST7735_drawRoundRect>:


void ST7735_drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8003fa0:	b590      	push	{r4, r7, lr}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	4608      	mov	r0, r1
 8003faa:	4611      	mov	r1, r2
 8003fac:	461a      	mov	r2, r3
 8003fae:	4623      	mov	r3, r4
 8003fb0:	80fb      	strh	r3, [r7, #6]
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	80bb      	strh	r3, [r7, #4]
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	807b      	strh	r3, [r7, #2]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	803b      	strh	r3, [r7, #0]
  int16_t max_radius = ((w < h) ? w : h) / 2;
 8003fbe:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003fc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	bfa8      	it	ge
 8003fca:	4613      	movge	r3, r2
 8003fcc:	b21b      	sxth	r3, r3
 8003fce:	0fda      	lsrs	r2, r3, #31
 8003fd0:	4413      	add	r3, r2
 8003fd2:	105b      	asrs	r3, r3, #1
 8003fd4:	81fb      	strh	r3, [r7, #14]
  if (r > max_radius)
 8003fd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	dd01      	ble.n	8003fe6 <ST7735_drawRoundRect+0x46>
	  r = max_radius;
 8003fe2:	89fb      	ldrh	r3, [r7, #14]
 8003fe4:	843b      	strh	r3, [r7, #32]

  ST7735_DrawHLine(x + r, x + r + w - 2 * r, y, color);         // Top
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	8c3b      	ldrh	r3, [r7, #32]
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	b2d8      	uxtb	r0, r3
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	8c3b      	ldrh	r3, [r7, #32]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	887b      	ldrh	r3, [r7, #2]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	4413      	add	r3, r2
 8004004:	b2da      	uxtb	r2, r3
 8004006:	8c3b      	ldrh	r3, [r7, #32]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	b2db      	uxtb	r3, r3
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	b2d9      	uxtb	r1, r3
 8004012:	88bb      	ldrh	r3, [r7, #4]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004018:	f7ff fda1 	bl	8003b5e <ST7735_DrawHLine>
  ST7735_DrawHLine(x + r, x + r + w - 2 * r, y + h - 1, color); // Bottom
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	b2da      	uxtb	r2, r3
 8004020:	8c3b      	ldrh	r3, [r7, #32]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	4413      	add	r3, r2
 8004026:	b2d8      	uxtb	r0, r3
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	b2da      	uxtb	r2, r3
 800402c:	8c3b      	ldrh	r3, [r7, #32]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	4413      	add	r3, r2
 8004032:	b2da      	uxtb	r2, r3
 8004034:	887b      	ldrh	r3, [r7, #2]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	4413      	add	r3, r2
 800403a:	b2da      	uxtb	r2, r3
 800403c:	8c3b      	ldrh	r3, [r7, #32]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	b2db      	uxtb	r3, r3
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	b2d9      	uxtb	r1, r3
 8004048:	88bb      	ldrh	r3, [r7, #4]
 800404a:	b2da      	uxtb	r2, r3
 800404c:	883b      	ldrh	r3, [r7, #0]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	4413      	add	r3, r2
 8004052:	b2db      	uxtb	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b2da      	uxtb	r2, r3
 8004058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800405a:	f7ff fd80 	bl	8003b5e <ST7735_DrawHLine>
  ST7735_DrawVLine(x, y + r, y + r + h - 2 * r, color);         // Left
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	b2d8      	uxtb	r0, r3
 8004062:	88bb      	ldrh	r3, [r7, #4]
 8004064:	b2da      	uxtb	r2, r3
 8004066:	8c3b      	ldrh	r3, [r7, #32]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	4413      	add	r3, r2
 800406c:	b2d9      	uxtb	r1, r3
 800406e:	88bb      	ldrh	r3, [r7, #4]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	8c3b      	ldrh	r3, [r7, #32]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	4413      	add	r3, r2
 8004078:	b2da      	uxtb	r2, r3
 800407a:	883b      	ldrh	r3, [r7, #0]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	4413      	add	r3, r2
 8004080:	b2da      	uxtb	r2, r3
 8004082:	8c3b      	ldrh	r3, [r7, #32]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	b2db      	uxtb	r3, r3
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	b2da      	uxtb	r2, r3
 800408e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004090:	f7ff fda0 	bl	8003bd4 <ST7735_DrawVLine>
  ST7735_DrawVLine(x + w - 1, y + r, y + r + h - 2 * r, color); // Right
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	b2da      	uxtb	r2, r3
 8004098:	887b      	ldrh	r3, [r7, #2]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	4413      	add	r3, r2
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b2d8      	uxtb	r0, r3
 80040a4:	88bb      	ldrh	r3, [r7, #4]
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	8c3b      	ldrh	r3, [r7, #32]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	4413      	add	r3, r2
 80040ae:	b2d9      	uxtb	r1, r3
 80040b0:	88bb      	ldrh	r3, [r7, #4]
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	8c3b      	ldrh	r3, [r7, #32]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	883b      	ldrh	r3, [r7, #0]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	4413      	add	r3, r2
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	8c3b      	ldrh	r3, [r7, #32]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040d2:	f7ff fd7f 	bl	8003bd4 <ST7735_DrawVLine>

  ST7735_drawCircleHelper(x + r, y + r, r, 1, color);
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	8c3b      	ldrh	r3, [r7, #32]
 80040da:	4413      	add	r3, r2
 80040dc:	b29b      	uxth	r3, r3
 80040de:	b218      	sxth	r0, r3
 80040e0:	88ba      	ldrh	r2, [r7, #4]
 80040e2:	8c3b      	ldrh	r3, [r7, #32]
 80040e4:	4413      	add	r3, r2
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	b219      	sxth	r1, r3
 80040ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80040ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	2301      	movs	r3, #1
 80040f4:	f7ff fe90 	bl	8003e18 <ST7735_drawCircleHelper>
  ST7735_drawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 80040f8:	88fa      	ldrh	r2, [r7, #6]
 80040fa:	887b      	ldrh	r3, [r7, #2]
 80040fc:	4413      	add	r3, r2
 80040fe:	b29a      	uxth	r2, r3
 8004100:	8c3b      	ldrh	r3, [r7, #32]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29b      	uxth	r3, r3
 800410a:	b218      	sxth	r0, r3
 800410c:	88ba      	ldrh	r2, [r7, #4]
 800410e:	8c3b      	ldrh	r3, [r7, #32]
 8004110:	4413      	add	r3, r2
 8004112:	b29b      	uxth	r3, r3
 8004114:	b219      	sxth	r1, r3
 8004116:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800411a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	2302      	movs	r3, #2
 8004120:	f7ff fe7a 	bl	8003e18 <ST7735_drawCircleHelper>
  ST7735_drawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8004124:	88fa      	ldrh	r2, [r7, #6]
 8004126:	887b      	ldrh	r3, [r7, #2]
 8004128:	4413      	add	r3, r2
 800412a:	b29a      	uxth	r2, r3
 800412c:	8c3b      	ldrh	r3, [r7, #32]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29b      	uxth	r3, r3
 8004136:	b218      	sxth	r0, r3
 8004138:	88ba      	ldrh	r2, [r7, #4]
 800413a:	883b      	ldrh	r3, [r7, #0]
 800413c:	4413      	add	r3, r2
 800413e:	b29a      	uxth	r2, r3
 8004140:	8c3b      	ldrh	r3, [r7, #32]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	b29b      	uxth	r3, r3
 8004146:	3b01      	subs	r3, #1
 8004148:	b29b      	uxth	r3, r3
 800414a:	b219      	sxth	r1, r3
 800414c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	2304      	movs	r3, #4
 8004156:	f7ff fe5f 	bl	8003e18 <ST7735_drawCircleHelper>
  ST7735_drawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 800415a:	88fa      	ldrh	r2, [r7, #6]
 800415c:	8c3b      	ldrh	r3, [r7, #32]
 800415e:	4413      	add	r3, r2
 8004160:	b29b      	uxth	r3, r3
 8004162:	b218      	sxth	r0, r3
 8004164:	88ba      	ldrh	r2, [r7, #4]
 8004166:	883b      	ldrh	r3, [r7, #0]
 8004168:	4413      	add	r3, r2
 800416a:	b29a      	uxth	r2, r3
 800416c:	8c3b      	ldrh	r3, [r7, #32]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29b      	uxth	r3, r3
 8004176:	b219      	sxth	r1, r3
 8004178:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800417c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	2308      	movs	r3, #8
 8004182:	f7ff fe49 	bl	8003e18 <ST7735_drawCircleHelper>
}
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	bd90      	pop	{r4, r7, pc}

0800418e <SquareIcon>:




void SquareIcon(uint8_t x, uint8_t y, uint16_t color)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af02      	add	r7, sp, #8
 8004194:	4603      	mov	r3, r0
 8004196:	71fb      	strb	r3, [r7, #7]
 8004198:	460b      	mov	r3, r1
 800419a:	71bb      	strb	r3, [r7, #6]
 800419c:	4613      	mov	r3, r2
 800419e:	80bb      	strh	r3, [r7, #4]
	ST7735_drawRoundRect(x, y, 32, 32, 7, color);
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	b218      	sxth	r0, r3
 80041a4:	79bb      	ldrb	r3, [r7, #6]
 80041a6:	b219      	sxth	r1, r3
 80041a8:	88bb      	ldrh	r3, [r7, #4]
 80041aa:	9301      	str	r3, [sp, #4]
 80041ac:	2307      	movs	r3, #7
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2320      	movs	r3, #32
 80041b2:	2220      	movs	r2, #32
 80041b4:	f7ff fef4 	bl	8003fa0 <ST7735_drawRoundRect>
	ST7735_drawRoundRect(x+1, y+1, 30, 30, 5, color);
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3301      	adds	r3, #1
 80041be:	b29b      	uxth	r3, r3
 80041c0:	b218      	sxth	r0, r3
 80041c2:	79bb      	ldrb	r3, [r7, #6]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3301      	adds	r3, #1
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	b219      	sxth	r1, r3
 80041cc:	88bb      	ldrh	r3, [r7, #4]
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	2305      	movs	r3, #5
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	231e      	movs	r3, #30
 80041d6:	221e      	movs	r2, #30
 80041d8:	f7ff fee2 	bl	8003fa0 <ST7735_drawRoundRect>
	ST7735_FillRectangle(x+4, y+6, 2, 12, color);
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3304      	adds	r3, #4
 80041e2:	b298      	uxth	r0, r3
 80041e4:	79bb      	ldrb	r3, [r7, #6]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3306      	adds	r3, #6
 80041ea:	b299      	uxth	r1, r3
 80041ec:	88bb      	ldrh	r3, [r7, #4]
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	230c      	movs	r3, #12
 80041f2:	2202      	movs	r2, #2
 80041f4:	f7ff fbe2 	bl	80039bc <ST7735_FillRectangle>
	ST7735_FillRectangle(x+4, y+6, 11, 2, color);
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3304      	adds	r3, #4
 80041fe:	b298      	uxth	r0, r3
 8004200:	79bb      	ldrb	r3, [r7, #6]
 8004202:	b29b      	uxth	r3, r3
 8004204:	3306      	adds	r3, #6
 8004206:	b299      	uxth	r1, r3
 8004208:	88bb      	ldrh	r3, [r7, #4]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	2302      	movs	r3, #2
 800420e:	220b      	movs	r2, #11
 8004210:	f7ff fbd4 	bl	80039bc <ST7735_FillRectangle>
	ST7735_FillRectangle(x+15, y+6, 2, 20, color);
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	b29b      	uxth	r3, r3
 8004218:	330f      	adds	r3, #15
 800421a:	b298      	uxth	r0, r3
 800421c:	79bb      	ldrb	r3, [r7, #6]
 800421e:	b29b      	uxth	r3, r3
 8004220:	3306      	adds	r3, #6
 8004222:	b299      	uxth	r1, r3
 8004224:	88bb      	ldrh	r3, [r7, #4]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2314      	movs	r3, #20
 800422a:	2202      	movs	r2, #2
 800422c:	f7ff fbc6 	bl	80039bc <ST7735_FillRectangle>
	ST7735_FillRectangle(x+15, y+24, 12, 2, color);
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	b29b      	uxth	r3, r3
 8004234:	330f      	adds	r3, #15
 8004236:	b298      	uxth	r0, r3
 8004238:	79bb      	ldrb	r3, [r7, #6]
 800423a:	b29b      	uxth	r3, r3
 800423c:	3318      	adds	r3, #24
 800423e:	b299      	uxth	r1, r3
 8004240:	88bb      	ldrh	r3, [r7, #4]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	2302      	movs	r3, #2
 8004246:	220c      	movs	r2, #12
 8004248:	f7ff fbb8 	bl	80039bc <ST7735_FillRectangle>
	ST7735_FillRectangle(x+26, y+14, 2, 12, color);
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	b29b      	uxth	r3, r3
 8004250:	331a      	adds	r3, #26
 8004252:	b298      	uxth	r0, r3
 8004254:	79bb      	ldrb	r3, [r7, #6]
 8004256:	b29b      	uxth	r3, r3
 8004258:	330e      	adds	r3, #14
 800425a:	b299      	uxth	r1, r3
 800425c:	88bb      	ldrh	r3, [r7, #4]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	230c      	movs	r3, #12
 8004262:	2202      	movs	r2, #2
 8004264:	f7ff fbaa 	bl	80039bc <ST7735_FillRectangle>
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <TriangleIcon>:

void TriangleIcon(uint8_t x, uint8_t y, uint16_t color)
{
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b087      	sub	sp, #28
 8004274:	af02      	add	r7, sp, #8
 8004276:	4603      	mov	r3, r0
 8004278:	71fb      	strb	r3, [r7, #7]
 800427a:	460b      	mov	r3, r1
 800427c:	71bb      	strb	r3, [r7, #6]
 800427e:	4613      	mov	r3, r2
 8004280:	80bb      	strh	r3, [r7, #4]
	ST7735_drawRoundRect(x, y, 32, 32, 7, color);
 8004282:	79fb      	ldrb	r3, [r7, #7]
 8004284:	b218      	sxth	r0, r3
 8004286:	79bb      	ldrb	r3, [r7, #6]
 8004288:	b219      	sxth	r1, r3
 800428a:	88bb      	ldrh	r3, [r7, #4]
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	2307      	movs	r3, #7
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	2320      	movs	r3, #32
 8004294:	2220      	movs	r2, #32
 8004296:	f7ff fe83 	bl	8003fa0 <ST7735_drawRoundRect>
	ST7735_drawRoundRect(x + 1, y + 1, 30, 30, 5, color);
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	b29b      	uxth	r3, r3
 800429e:	3301      	adds	r3, #1
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	b218      	sxth	r0, r3
 80042a4:	79bb      	ldrb	r3, [r7, #6]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3301      	adds	r3, #1
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	b219      	sxth	r1, r3
 80042ae:	88bb      	ldrh	r3, [r7, #4]
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	2305      	movs	r3, #5
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	231e      	movs	r3, #30
 80042b8:	221e      	movs	r2, #30
 80042ba:	f7ff fe71 	bl	8003fa0 <ST7735_drawRoundRect>
	for (uint16_t a = 0; a < 3; a++) {
 80042be:	2300      	movs	r3, #0
 80042c0:	81fb      	strh	r3, [r7, #14]
 80042c2:	e062      	b.n	800438a <TriangleIcon+0x11a>
		ST7735_DrawLine(x + 9, y + 3 + a, x + 3, y + 14 + a, color);
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3309      	adds	r3, #9
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	b218      	sxth	r0, r3
 80042ce:	79bb      	ldrb	r3, [r7, #6]
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	89fb      	ldrh	r3, [r7, #14]
 80042d4:	4413      	add	r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3303      	adds	r3, #3
 80042da:	b29b      	uxth	r3, r3
 80042dc:	b219      	sxth	r1, r3
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3303      	adds	r3, #3
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	b21c      	sxth	r4, r3
 80042e8:	79bb      	ldrb	r3, [r7, #6]
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	89fb      	ldrh	r3, [r7, #14]
 80042ee:	4413      	add	r3, r2
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	330e      	adds	r3, #14
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	b21a      	sxth	r2, r3
 80042f8:	88bb      	ldrh	r3, [r7, #4]
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	4622      	mov	r2, r4
 8004300:	f7ff fca3 	bl	8003c4a <ST7735_DrawLine>
		ST7735_DrawLine(x + 21, y + 26 + a, x + 9, y + 3 + a, color);
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	b29b      	uxth	r3, r3
 8004308:	3315      	adds	r3, #21
 800430a:	b29b      	uxth	r3, r3
 800430c:	b218      	sxth	r0, r3
 800430e:	79bb      	ldrb	r3, [r7, #6]
 8004310:	b29a      	uxth	r2, r3
 8004312:	89fb      	ldrh	r3, [r7, #14]
 8004314:	4413      	add	r3, r2
 8004316:	b29b      	uxth	r3, r3
 8004318:	331a      	adds	r3, #26
 800431a:	b29b      	uxth	r3, r3
 800431c:	b219      	sxth	r1, r3
 800431e:	79fb      	ldrb	r3, [r7, #7]
 8004320:	b29b      	uxth	r3, r3
 8004322:	3309      	adds	r3, #9
 8004324:	b29b      	uxth	r3, r3
 8004326:	b21c      	sxth	r4, r3
 8004328:	79bb      	ldrb	r3, [r7, #6]
 800432a:	b29a      	uxth	r2, r3
 800432c:	89fb      	ldrh	r3, [r7, #14]
 800432e:	4413      	add	r3, r2
 8004330:	b29b      	uxth	r3, r3
 8004332:	3303      	adds	r3, #3
 8004334:	b29b      	uxth	r3, r3
 8004336:	b21a      	sxth	r2, r3
 8004338:	88bb      	ldrh	r3, [r7, #4]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	4613      	mov	r3, r2
 800433e:	4622      	mov	r2, r4
 8004340:	f7ff fc83 	bl	8003c4a <ST7735_DrawLine>
		ST7735_DrawLine(x + 28, y + 15 + a, x + 21, y + 26 + a, color);
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	b29b      	uxth	r3, r3
 8004348:	331c      	adds	r3, #28
 800434a:	b29b      	uxth	r3, r3
 800434c:	b218      	sxth	r0, r3
 800434e:	79bb      	ldrb	r3, [r7, #6]
 8004350:	b29a      	uxth	r2, r3
 8004352:	89fb      	ldrh	r3, [r7, #14]
 8004354:	4413      	add	r3, r2
 8004356:	b29b      	uxth	r3, r3
 8004358:	330f      	adds	r3, #15
 800435a:	b29b      	uxth	r3, r3
 800435c:	b219      	sxth	r1, r3
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	b29b      	uxth	r3, r3
 8004362:	3315      	adds	r3, #21
 8004364:	b29b      	uxth	r3, r3
 8004366:	b21c      	sxth	r4, r3
 8004368:	79bb      	ldrb	r3, [r7, #6]
 800436a:	b29a      	uxth	r2, r3
 800436c:	89fb      	ldrh	r3, [r7, #14]
 800436e:	4413      	add	r3, r2
 8004370:	b29b      	uxth	r3, r3
 8004372:	331a      	adds	r3, #26
 8004374:	b29b      	uxth	r3, r3
 8004376:	b21a      	sxth	r2, r3
 8004378:	88bb      	ldrh	r3, [r7, #4]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	4622      	mov	r2, r4
 8004380:	f7ff fc63 	bl	8003c4a <ST7735_DrawLine>
	for (uint16_t a = 0; a < 3; a++) {
 8004384:	89fb      	ldrh	r3, [r7, #14]
 8004386:	3301      	adds	r3, #1
 8004388:	81fb      	strh	r3, [r7, #14]
 800438a:	89fb      	ldrh	r3, [r7, #14]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d999      	bls.n	80042c4 <TriangleIcon+0x54>
	}
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bd90      	pop	{r4, r7, pc}

0800439a <SineIcon>:




void SineIcon(uint8_t x, uint8_t y, uint16_t color)
{
 800439a:	b590      	push	{r4, r7, lr}
 800439c:	f2ad 5d64 	subw	sp, sp, #1380	; 0x564
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	4604      	mov	r4, r0
 80043a4:	4608      	mov	r0, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	1dfb      	adds	r3, r7, #7
 80043aa:	4622      	mov	r2, r4
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	1dbb      	adds	r3, r7, #6
 80043b0:	4602      	mov	r2, r0
 80043b2:	701a      	strb	r2, [r3, #0]
 80043b4:	1d3b      	adds	r3, r7, #4
 80043b6:	460a      	mov	r2, r1
 80043b8:	801a      	strh	r2, [r3, #0]
	uint16_t Color = ((color & 0xFF00) >> 8) | ((color & 0xFF) << 8);
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b21a      	sxth	r2, r3
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	b21b      	sxth	r3, r3
 80043cc:	4313      	orrs	r3, r2
 80043ce:	b21b      	sxth	r3, r3
 80043d0:	f8a7 3556 	strh.w	r3, [r7, #1366]	; 0x556
	uint16_t Sine_Icon_only[676] = {
 80043d4:	f107 030c 	add.w	r3, r7, #12
 80043d8:	4618      	mov	r0, r3
 80043da:	f44f 63a9 	mov.w	r3, #1352	; 0x548
 80043de:	461a      	mov	r2, r3
 80043e0:	2100      	movs	r1, #0
 80043e2:	f000 fb0b 	bl	80049fc <memset>
 80043e6:	f107 030c 	add.w	r3, r7, #12
 80043ea:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80043ee:	815a      	strh	r2, [r3, #10]
 80043f0:	f107 030c 	add.w	r3, r7, #12
 80043f4:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80043f8:	819a      	strh	r2, [r3, #12]
 80043fa:	f107 030c 	add.w	r3, r7, #12
 80043fe:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004402:	81da      	strh	r2, [r3, #14]
 8004404:	f107 030c 	add.w	r3, r7, #12
 8004408:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800440c:	879a      	strh	r2, [r3, #60]	; 0x3c
 800440e:	f107 030c 	add.w	r3, r7, #12
 8004412:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004416:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004418:	f107 030c 	add.w	r3, r7, #12
 800441c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004420:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8004424:	f107 030c 	add.w	r3, r7, #12
 8004428:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800442c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8004430:	f107 030c 	add.w	r3, r7, #12
 8004434:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004438:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800443c:	f107 030c 	add.w	r3, r7, #12
 8004440:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004444:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8004448:	f107 030c 	add.w	r3, r7, #12
 800444c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004450:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8004454:	f107 030c 	add.w	r3, r7, #12
 8004458:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800445c:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8004460:	f107 030c 	add.w	r3, r7, #12
 8004464:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004468:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800446c:	f107 030c 	add.w	r3, r7, #12
 8004470:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004474:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8004478:	f107 030c 	add.w	r3, r7, #12
 800447c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004480:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8004484:	f107 030c 	add.w	r3, r7, #12
 8004488:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800448c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8004490:	f107 030c 	add.w	r3, r7, #12
 8004494:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004498:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800449c:	f107 030c 	add.w	r3, r7, #12
 80044a0:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80044a4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 80044a8:	f107 030c 	add.w	r3, r7, #12
 80044ac:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80044b0:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
 80044b4:	f107 030c 	add.w	r3, r7, #12
 80044b8:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80044bc:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
 80044c0:	f107 030c 	add.w	r3, r7, #12
 80044c4:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80044c8:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
 80044cc:	f107 030c 	add.w	r3, r7, #12
 80044d0:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80044d4:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
 80044d8:	f107 030c 	add.w	r3, r7, #12
 80044dc:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80044e0:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
 80044e4:	f107 030c 	add.w	r3, r7, #12
 80044e8:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80044ec:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
 80044f0:	f107 030c 	add.w	r3, r7, #12
 80044f4:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80044f8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
 80044fc:	f107 030c 	add.w	r3, r7, #12
 8004500:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004504:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
 8004508:	f107 030c 	add.w	r3, r7, #12
 800450c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004510:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
 8004514:	f107 030c 	add.w	r3, r7, #12
 8004518:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800451c:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 8004520:	f107 030c 	add.w	r3, r7, #12
 8004524:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004528:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
 800452c:	f107 030c 	add.w	r3, r7, #12
 8004530:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004534:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
 8004538:	f107 030c 	add.w	r3, r7, #12
 800453c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004540:	f8a3 216e 	strh.w	r2, [r3, #366]	; 0x16e
 8004544:	f107 030c 	add.w	r3, r7, #12
 8004548:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800454c:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
 8004550:	f107 030c 	add.w	r3, r7, #12
 8004554:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004558:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
 800455c:	f107 030c 	add.w	r3, r7, #12
 8004560:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004564:	f8a3 2180 	strh.w	r2, [r3, #384]	; 0x180
 8004568:	f107 030c 	add.w	r3, r7, #12
 800456c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004570:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
 8004574:	f107 030c 	add.w	r3, r7, #12
 8004578:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800457c:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004588:	f8a3 21a4 	strh.w	r2, [r3, #420]	; 0x1a4
 800458c:	f107 030c 	add.w	r3, r7, #12
 8004590:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004594:	f8a3 21b4 	strh.w	r2, [r3, #436]	; 0x1b4
 8004598:	f107 030c 	add.w	r3, r7, #12
 800459c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80045a0:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
 80045a4:	f107 030c 	add.w	r3, r7, #12
 80045a8:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80045ac:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
 80045b0:	f107 030c 	add.w	r3, r7, #12
 80045b4:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80045b8:	f8a3 21d6 	strh.w	r2, [r3, #470]	; 0x1d6
 80045bc:	f107 030c 	add.w	r3, r7, #12
 80045c0:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80045c4:	f8a3 21d8 	strh.w	r2, [r3, #472]	; 0x1d8
 80045c8:	f107 030c 	add.w	r3, r7, #12
 80045cc:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80045d0:	f8a3 21ea 	strh.w	r2, [r3, #490]	; 0x1ea
 80045d4:	f107 030c 	add.w	r3, r7, #12
 80045d8:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80045dc:	f8a3 21ec 	strh.w	r2, [r3, #492]	; 0x1ec
 80045e0:	f107 030c 	add.w	r3, r7, #12
 80045e4:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80045e8:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80045f4:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
 80045f8:	f107 030c 	add.w	r3, r7, #12
 80045fc:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004600:	f8a3 221e 	strh.w	r2, [r3, #542]	; 0x21e
 8004604:	f107 030c 	add.w	r3, r7, #12
 8004608:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800460c:	f8a3 2220 	strh.w	r2, [r3, #544]	; 0x220
 8004610:	f107 030c 	add.w	r3, r7, #12
 8004614:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004618:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
 800461c:	f107 030c 	add.w	r3, r7, #12
 8004620:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004624:	f8a3 223e 	strh.w	r2, [r3, #574]	; 0x23e
 8004628:	f107 030c 	add.w	r3, r7, #12
 800462c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004630:	f8a3 2252 	strh.w	r2, [r3, #594]	; 0x252
 8004634:	f107 030c 	add.w	r3, r7, #12
 8004638:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800463c:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004648:	f8a3 2256 	strh.w	r2, [r3, #598]	; 0x256
 800464c:	f107 030c 	add.w	r3, r7, #12
 8004650:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004654:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
 8004658:	f107 030c 	add.w	r3, r7, #12
 800465c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004660:	f8a3 2272 	strh.w	r2, [r3, #626]	; 0x272
 8004664:	f107 030c 	add.w	r3, r7, #12
 8004668:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800466c:	f8a3 2288 	strh.w	r2, [r3, #648]	; 0x288
 8004670:	f107 030c 	add.w	r3, r7, #12
 8004674:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004678:	f8a3 228a 	strh.w	r2, [r3, #650]	; 0x28a
 800467c:	f107 030c 	add.w	r3, r7, #12
 8004680:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004684:	f8a3 22a0 	strh.w	r2, [r3, #672]	; 0x2a0
 8004688:	f107 030c 	add.w	r3, r7, #12
 800468c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004690:	f8a3 22a2 	strh.w	r2, [r3, #674]	; 0x2a2
 8004694:	f107 030c 	add.w	r3, r7, #12
 8004698:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800469c:	f8a3 22bc 	strh.w	r2, [r3, #700]	; 0x2bc
 80046a0:	f107 030c 	add.w	r3, r7, #12
 80046a4:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80046a8:	f8a3 22be 	strh.w	r2, [r3, #702]	; 0x2be
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80046b4:	f8a3 22d4 	strh.w	r2, [r3, #724]	; 0x2d4
 80046b8:	f107 030c 	add.w	r3, r7, #12
 80046bc:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80046c0:	f8a3 22d6 	strh.w	r2, [r3, #726]	; 0x2d6
 80046c4:	f107 030c 	add.w	r3, r7, #12
 80046c8:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80046cc:	f8a3 22f2 	strh.w	r2, [r3, #754]	; 0x2f2
 80046d0:	f107 030c 	add.w	r3, r7, #12
 80046d4:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80046d8:	f8a3 22f4 	strh.w	r2, [r3, #756]	; 0x2f4
 80046dc:	f107 030c 	add.w	r3, r7, #12
 80046e0:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80046e4:	f8a3 2308 	strh.w	r2, [r3, #776]	; 0x308
 80046e8:	f107 030c 	add.w	r3, r7, #12
 80046ec:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80046f0:	f8a3 230a 	strh.w	r2, [r3, #778]	; 0x30a
 80046f4:	f107 030c 	add.w	r3, r7, #12
 80046f8:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80046fc:	f8a3 2326 	strh.w	r2, [r3, #806]	; 0x326
 8004700:	f107 030c 	add.w	r3, r7, #12
 8004704:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004708:	f8a3 2328 	strh.w	r2, [r3, #808]	; 0x328
 800470c:	f107 030c 	add.w	r3, r7, #12
 8004710:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004714:	f8a3 233a 	strh.w	r2, [r3, #826]	; 0x33a
 8004718:	f107 030c 	add.w	r3, r7, #12
 800471c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004720:	f8a3 233c 	strh.w	r2, [r3, #828]	; 0x33c
 8004724:	f107 030c 	add.w	r3, r7, #12
 8004728:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800472c:	f8a3 233e 	strh.w	r2, [r3, #830]	; 0x33e
 8004730:	f107 030c 	add.w	r3, r7, #12
 8004734:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004738:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a
 800473c:	f107 030c 	add.w	r3, r7, #12
 8004740:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004744:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
 8004748:	f107 030c 	add.w	r3, r7, #12
 800474c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004750:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
 8004754:	f107 030c 	add.w	r3, r7, #12
 8004758:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800475c:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
 8004760:	f107 030c 	add.w	r3, r7, #12
 8004764:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004768:	f8a3 2390 	strh.w	r2, [r3, #912]	; 0x390
 800476c:	f107 030c 	add.w	r3, r7, #12
 8004770:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004774:	f8a3 2392 	strh.w	r2, [r3, #914]	; 0x392
 8004778:	f107 030c 	add.w	r3, r7, #12
 800477c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004780:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
 8004784:	f107 030c 	add.w	r3, r7, #12
 8004788:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800478c:	f8a3 23a4 	strh.w	r2, [r3, #932]	; 0x3a4
 8004790:	f107 030c 	add.w	r3, r7, #12
 8004794:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004798:	f8a3 23c4 	strh.w	r2, [r3, #964]	; 0x3c4
 800479c:	f107 030c 	add.w	r3, r7, #12
 80047a0:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80047a4:	f8a3 23c6 	strh.w	r2, [r3, #966]	; 0x3c6
 80047a8:	f107 030c 	add.w	r3, r7, #12
 80047ac:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80047b0:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4
 80047b4:	f107 030c 	add.w	r3, r7, #12
 80047b8:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80047bc:	f8a3 23d6 	strh.w	r2, [r3, #982]	; 0x3d6
 80047c0:	f107 030c 	add.w	r3, r7, #12
 80047c4:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80047c8:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
 80047cc:	f107 030c 	add.w	r3, r7, #12
 80047d0:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80047d4:	f8a3 23f8 	strh.w	r2, [r3, #1016]	; 0x3f8
 80047d8:	f107 030c 	add.w	r3, r7, #12
 80047dc:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80047e0:	f8a3 23fa 	strh.w	r2, [r3, #1018]	; 0x3fa
 80047e4:	f107 030c 	add.w	r3, r7, #12
 80047e8:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80047ec:	f8a3 23fc 	strh.w	r2, [r3, #1020]	; 0x3fc
 80047f0:	f107 030c 	add.w	r3, r7, #12
 80047f4:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80047f8:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
 80047fc:	f107 030c 	add.w	r3, r7, #12
 8004800:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004804:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
 8004808:	f107 030c 	add.w	r3, r7, #12
 800480c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004810:	f8a3 242e 	strh.w	r2, [r3, #1070]	; 0x42e
 8004814:	f107 030c 	add.w	r3, r7, #12
 8004818:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800481c:	f8a3 2430 	strh.w	r2, [r3, #1072]	; 0x430
 8004820:	f107 030c 	add.w	r3, r7, #12
 8004824:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004828:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
 800482c:	f107 030c 	add.w	r3, r7, #12
 8004830:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004834:	f8a3 243e 	strh.w	r2, [r3, #1086]	; 0x43e
 8004838:	f107 030c 	add.w	r3, r7, #12
 800483c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004840:	f8a3 2462 	strh.w	r2, [r3, #1122]	; 0x462
 8004844:	f107 030c 	add.w	r3, r7, #12
 8004848:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800484c:	f8a3 2464 	strh.w	r2, [r3, #1124]	; 0x464
 8004850:	f107 030c 	add.w	r3, r7, #12
 8004854:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004858:	f8a3 246e 	strh.w	r2, [r3, #1134]	; 0x46e
 800485c:	f107 030c 	add.w	r3, r7, #12
 8004860:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004864:	f8a3 2470 	strh.w	r2, [r3, #1136]	; 0x470
 8004868:	f107 030c 	add.w	r3, r7, #12
 800486c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004870:	f8a3 2498 	strh.w	r2, [r3, #1176]	; 0x498
 8004874:	f107 030c 	add.w	r3, r7, #12
 8004878:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800487c:	f8a3 249a 	strh.w	r2, [r3, #1178]	; 0x49a
 8004880:	f107 030c 	add.w	r3, r7, #12
 8004884:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004888:	f8a3 24a2 	strh.w	r2, [r3, #1186]	; 0x4a2
 800488c:	f107 030c 	add.w	r3, r7, #12
 8004890:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004894:	f8a3 24a4 	strh.w	r2, [r3, #1188]	; 0x4a4
 8004898:	f107 030c 	add.w	r3, r7, #12
 800489c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80048a0:	f8a3 24cc 	strh.w	r2, [r3, #1228]	; 0x4cc
 80048a4:	f107 030c 	add.w	r3, r7, #12
 80048a8:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80048ac:	f8a3 24ce 	strh.w	r2, [r3, #1230]	; 0x4ce
 80048b0:	f107 030c 	add.w	r3, r7, #12
 80048b4:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80048b8:	f8a3 24d0 	strh.w	r2, [r3, #1232]	; 0x4d0
 80048bc:	f107 030c 	add.w	r3, r7, #12
 80048c0:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80048c4:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4
 80048c8:	f107 030c 	add.w	r3, r7, #12
 80048cc:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80048d0:	f8a3 24d6 	strh.w	r2, [r3, #1238]	; 0x4d6
 80048d4:	f107 030c 	add.w	r3, r7, #12
 80048d8:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80048dc:	f8a3 2502 	strh.w	r2, [r3, #1282]	; 0x502
 80048e0:	f107 030c 	add.w	r3, r7, #12
 80048e4:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80048e8:	f8a3 2504 	strh.w	r2, [r3, #1284]	; 0x504
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 80048f4:	f8a3 2506 	strh.w	r2, [r3, #1286]	; 0x506
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004900:	f8a3 2508 	strh.w	r2, [r3, #1288]	; 0x508
 8004904:	f107 030c 	add.w	r3, r7, #12
 8004908:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 800490c:	f8a3 250a 	strh.w	r2, [r3, #1290]	; 0x50a
 8004910:	f107 030c 	add.w	r3, r7, #12
 8004914:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004918:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
 800491c:	f107 030c 	add.w	r3, r7, #12
 8004920:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004924:	f8a3 253a 	strh.w	r2, [r3, #1338]	; 0x53a
 8004928:	f107 030c 	add.w	r3, r7, #12
 800492c:	f8b7 2556 	ldrh.w	r2, [r7, #1366]	; 0x556
 8004930:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, Color, Color, Color, 0x0000, Color, Color, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0270 (624) pixels
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0280 (640) pixels
		0x0000, Color, Color, Color, Color, Color, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0290 (656) pixels
		0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, Color, Color, Color, 0x0000,   // 0x02A0 (672) pixels
	};
	ST7735_drawRoundRect(x, y, 32, 32, 7, color);
 8004934:	1dfb      	adds	r3, r7, #7
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	b218      	sxth	r0, r3
 800493a:	1dbb      	adds	r3, r7, #6
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	b219      	sxth	r1, r3
 8004940:	1d3b      	adds	r3, r7, #4
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	2307      	movs	r3, #7
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	2320      	movs	r3, #32
 800494c:	2220      	movs	r2, #32
 800494e:	f7ff fb27 	bl	8003fa0 <ST7735_drawRoundRect>
	ST7735_drawRoundRect(x+1, y+1, 30, 30, 5, color);
 8004952:	1dfb      	adds	r3, r7, #7
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	3301      	adds	r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	b218      	sxth	r0, r3
 800495e:	1dbb      	adds	r3, r7, #6
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	3301      	adds	r3, #1
 8004966:	b29b      	uxth	r3, r3
 8004968:	b219      	sxth	r1, r3
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	9301      	str	r3, [sp, #4]
 8004970:	2305      	movs	r3, #5
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	231e      	movs	r3, #30
 8004976:	221e      	movs	r2, #30
 8004978:	f7ff fb12 	bl	8003fa0 <ST7735_drawRoundRect>
	ST7735_DrawImage(x+3, y+3, 26, 26, Sine_Icon_only);
 800497c:	1dfb      	adds	r3, r7, #7
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	3303      	adds	r3, #3
 8004984:	b298      	uxth	r0, r3
 8004986:	1dbb      	adds	r3, r7, #6
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	3303      	adds	r3, #3
 800498e:	b299      	uxth	r1, r3
 8004990:	f107 030c 	add.w	r3, r7, #12
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	231a      	movs	r3, #26
 8004998:	221a      	movs	r2, #26
 800499a:	f7ff f894 	bl	8003ac6 <ST7735_DrawImage>
}
 800499e:	bf00      	nop
 80049a0:	f207 575c 	addw	r7, r7, #1372	; 0x55c
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd90      	pop	{r4, r7, pc}

080049a8 <__errno>:
 80049a8:	4b01      	ldr	r3, [pc, #4]	; (80049b0 <__errno+0x8>)
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	2000002c 	.word	0x2000002c

080049b4 <__libc_init_array>:
 80049b4:	b570      	push	{r4, r5, r6, lr}
 80049b6:	4d0d      	ldr	r5, [pc, #52]	; (80049ec <__libc_init_array+0x38>)
 80049b8:	4c0d      	ldr	r4, [pc, #52]	; (80049f0 <__libc_init_array+0x3c>)
 80049ba:	1b64      	subs	r4, r4, r5
 80049bc:	10a4      	asrs	r4, r4, #2
 80049be:	2600      	movs	r6, #0
 80049c0:	42a6      	cmp	r6, r4
 80049c2:	d109      	bne.n	80049d8 <__libc_init_array+0x24>
 80049c4:	4d0b      	ldr	r5, [pc, #44]	; (80049f4 <__libc_init_array+0x40>)
 80049c6:	4c0c      	ldr	r4, [pc, #48]	; (80049f8 <__libc_init_array+0x44>)
 80049c8:	f000 fc4e 	bl	8005268 <_init>
 80049cc:	1b64      	subs	r4, r4, r5
 80049ce:	10a4      	asrs	r4, r4, #2
 80049d0:	2600      	movs	r6, #0
 80049d2:	42a6      	cmp	r6, r4
 80049d4:	d105      	bne.n	80049e2 <__libc_init_array+0x2e>
 80049d6:	bd70      	pop	{r4, r5, r6, pc}
 80049d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049dc:	4798      	blx	r3
 80049de:	3601      	adds	r6, #1
 80049e0:	e7ee      	b.n	80049c0 <__libc_init_array+0xc>
 80049e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e6:	4798      	blx	r3
 80049e8:	3601      	adds	r6, #1
 80049ea:	e7f2      	b.n	80049d2 <__libc_init_array+0x1e>
 80049ec:	08006894 	.word	0x08006894
 80049f0:	08006894 	.word	0x08006894
 80049f4:	08006894 	.word	0x08006894
 80049f8:	08006898 	.word	0x08006898

080049fc <memset>:
 80049fc:	4402      	add	r2, r0
 80049fe:	4603      	mov	r3, r0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d100      	bne.n	8004a06 <memset+0xa>
 8004a04:	4770      	bx	lr
 8004a06:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0a:	e7f9      	b.n	8004a00 <memset+0x4>

08004a0c <siprintf>:
 8004a0c:	b40e      	push	{r1, r2, r3}
 8004a0e:	b500      	push	{lr}
 8004a10:	b09c      	sub	sp, #112	; 0x70
 8004a12:	ab1d      	add	r3, sp, #116	; 0x74
 8004a14:	9002      	str	r0, [sp, #8]
 8004a16:	9006      	str	r0, [sp, #24]
 8004a18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a1c:	4809      	ldr	r0, [pc, #36]	; (8004a44 <siprintf+0x38>)
 8004a1e:	9107      	str	r1, [sp, #28]
 8004a20:	9104      	str	r1, [sp, #16]
 8004a22:	4909      	ldr	r1, [pc, #36]	; (8004a48 <siprintf+0x3c>)
 8004a24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a28:	9105      	str	r1, [sp, #20]
 8004a2a:	6800      	ldr	r0, [r0, #0]
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	a902      	add	r1, sp, #8
 8004a30:	f000 f868 	bl	8004b04 <_svfiprintf_r>
 8004a34:	9b02      	ldr	r3, [sp, #8]
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	b01c      	add	sp, #112	; 0x70
 8004a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a40:	b003      	add	sp, #12
 8004a42:	4770      	bx	lr
 8004a44:	2000002c 	.word	0x2000002c
 8004a48:	ffff0208 	.word	0xffff0208

08004a4c <__ssputs_r>:
 8004a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	688e      	ldr	r6, [r1, #8]
 8004a52:	429e      	cmp	r6, r3
 8004a54:	4682      	mov	sl, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	4690      	mov	r8, r2
 8004a5a:	461f      	mov	r7, r3
 8004a5c:	d838      	bhi.n	8004ad0 <__ssputs_r+0x84>
 8004a5e:	898a      	ldrh	r2, [r1, #12]
 8004a60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a64:	d032      	beq.n	8004acc <__ssputs_r+0x80>
 8004a66:	6825      	ldr	r5, [r4, #0]
 8004a68:	6909      	ldr	r1, [r1, #16]
 8004a6a:	eba5 0901 	sub.w	r9, r5, r1
 8004a6e:	6965      	ldr	r5, [r4, #20]
 8004a70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a78:	3301      	adds	r3, #1
 8004a7a:	444b      	add	r3, r9
 8004a7c:	106d      	asrs	r5, r5, #1
 8004a7e:	429d      	cmp	r5, r3
 8004a80:	bf38      	it	cc
 8004a82:	461d      	movcc	r5, r3
 8004a84:	0553      	lsls	r3, r2, #21
 8004a86:	d531      	bpl.n	8004aec <__ssputs_r+0xa0>
 8004a88:	4629      	mov	r1, r5
 8004a8a:	f000 fb47 	bl	800511c <_malloc_r>
 8004a8e:	4606      	mov	r6, r0
 8004a90:	b950      	cbnz	r0, 8004aa8 <__ssputs_r+0x5c>
 8004a92:	230c      	movs	r3, #12
 8004a94:	f8ca 3000 	str.w	r3, [sl]
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a9e:	81a3      	strh	r3, [r4, #12]
 8004aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa8:	6921      	ldr	r1, [r4, #16]
 8004aaa:	464a      	mov	r2, r9
 8004aac:	f000 fabe 	bl	800502c <memcpy>
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aba:	81a3      	strh	r3, [r4, #12]
 8004abc:	6126      	str	r6, [r4, #16]
 8004abe:	6165      	str	r5, [r4, #20]
 8004ac0:	444e      	add	r6, r9
 8004ac2:	eba5 0509 	sub.w	r5, r5, r9
 8004ac6:	6026      	str	r6, [r4, #0]
 8004ac8:	60a5      	str	r5, [r4, #8]
 8004aca:	463e      	mov	r6, r7
 8004acc:	42be      	cmp	r6, r7
 8004ace:	d900      	bls.n	8004ad2 <__ssputs_r+0x86>
 8004ad0:	463e      	mov	r6, r7
 8004ad2:	4632      	mov	r2, r6
 8004ad4:	6820      	ldr	r0, [r4, #0]
 8004ad6:	4641      	mov	r1, r8
 8004ad8:	f000 fab6 	bl	8005048 <memmove>
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	6822      	ldr	r2, [r4, #0]
 8004ae0:	1b9b      	subs	r3, r3, r6
 8004ae2:	4432      	add	r2, r6
 8004ae4:	60a3      	str	r3, [r4, #8]
 8004ae6:	6022      	str	r2, [r4, #0]
 8004ae8:	2000      	movs	r0, #0
 8004aea:	e7db      	b.n	8004aa4 <__ssputs_r+0x58>
 8004aec:	462a      	mov	r2, r5
 8004aee:	f000 fb6f 	bl	80051d0 <_realloc_r>
 8004af2:	4606      	mov	r6, r0
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d1e1      	bne.n	8004abc <__ssputs_r+0x70>
 8004af8:	6921      	ldr	r1, [r4, #16]
 8004afa:	4650      	mov	r0, sl
 8004afc:	f000 fabe 	bl	800507c <_free_r>
 8004b00:	e7c7      	b.n	8004a92 <__ssputs_r+0x46>
	...

08004b04 <_svfiprintf_r>:
 8004b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	4698      	mov	r8, r3
 8004b0a:	898b      	ldrh	r3, [r1, #12]
 8004b0c:	061b      	lsls	r3, r3, #24
 8004b0e:	b09d      	sub	sp, #116	; 0x74
 8004b10:	4607      	mov	r7, r0
 8004b12:	460d      	mov	r5, r1
 8004b14:	4614      	mov	r4, r2
 8004b16:	d50e      	bpl.n	8004b36 <_svfiprintf_r+0x32>
 8004b18:	690b      	ldr	r3, [r1, #16]
 8004b1a:	b963      	cbnz	r3, 8004b36 <_svfiprintf_r+0x32>
 8004b1c:	2140      	movs	r1, #64	; 0x40
 8004b1e:	f000 fafd 	bl	800511c <_malloc_r>
 8004b22:	6028      	str	r0, [r5, #0]
 8004b24:	6128      	str	r0, [r5, #16]
 8004b26:	b920      	cbnz	r0, 8004b32 <_svfiprintf_r+0x2e>
 8004b28:	230c      	movs	r3, #12
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	e0d1      	b.n	8004cd6 <_svfiprintf_r+0x1d2>
 8004b32:	2340      	movs	r3, #64	; 0x40
 8004b34:	616b      	str	r3, [r5, #20]
 8004b36:	2300      	movs	r3, #0
 8004b38:	9309      	str	r3, [sp, #36]	; 0x24
 8004b3a:	2320      	movs	r3, #32
 8004b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b44:	2330      	movs	r3, #48	; 0x30
 8004b46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004cf0 <_svfiprintf_r+0x1ec>
 8004b4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b4e:	f04f 0901 	mov.w	r9, #1
 8004b52:	4623      	mov	r3, r4
 8004b54:	469a      	mov	sl, r3
 8004b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b5a:	b10a      	cbz	r2, 8004b60 <_svfiprintf_r+0x5c>
 8004b5c:	2a25      	cmp	r2, #37	; 0x25
 8004b5e:	d1f9      	bne.n	8004b54 <_svfiprintf_r+0x50>
 8004b60:	ebba 0b04 	subs.w	fp, sl, r4
 8004b64:	d00b      	beq.n	8004b7e <_svfiprintf_r+0x7a>
 8004b66:	465b      	mov	r3, fp
 8004b68:	4622      	mov	r2, r4
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	4638      	mov	r0, r7
 8004b6e:	f7ff ff6d 	bl	8004a4c <__ssputs_r>
 8004b72:	3001      	adds	r0, #1
 8004b74:	f000 80aa 	beq.w	8004ccc <_svfiprintf_r+0x1c8>
 8004b78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b7a:	445a      	add	r2, fp
 8004b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80a2 	beq.w	8004ccc <_svfiprintf_r+0x1c8>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b92:	f10a 0a01 	add.w	sl, sl, #1
 8004b96:	9304      	str	r3, [sp, #16]
 8004b98:	9307      	str	r3, [sp, #28]
 8004b9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004ba0:	4654      	mov	r4, sl
 8004ba2:	2205      	movs	r2, #5
 8004ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba8:	4851      	ldr	r0, [pc, #324]	; (8004cf0 <_svfiprintf_r+0x1ec>)
 8004baa:	f7fb fb19 	bl	80001e0 <memchr>
 8004bae:	9a04      	ldr	r2, [sp, #16]
 8004bb0:	b9d8      	cbnz	r0, 8004bea <_svfiprintf_r+0xe6>
 8004bb2:	06d0      	lsls	r0, r2, #27
 8004bb4:	bf44      	itt	mi
 8004bb6:	2320      	movmi	r3, #32
 8004bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bbc:	0711      	lsls	r1, r2, #28
 8004bbe:	bf44      	itt	mi
 8004bc0:	232b      	movmi	r3, #43	; 0x2b
 8004bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bca:	2b2a      	cmp	r3, #42	; 0x2a
 8004bcc:	d015      	beq.n	8004bfa <_svfiprintf_r+0xf6>
 8004bce:	9a07      	ldr	r2, [sp, #28]
 8004bd0:	4654      	mov	r4, sl
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	f04f 0c0a 	mov.w	ip, #10
 8004bd8:	4621      	mov	r1, r4
 8004bda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bde:	3b30      	subs	r3, #48	; 0x30
 8004be0:	2b09      	cmp	r3, #9
 8004be2:	d94e      	bls.n	8004c82 <_svfiprintf_r+0x17e>
 8004be4:	b1b0      	cbz	r0, 8004c14 <_svfiprintf_r+0x110>
 8004be6:	9207      	str	r2, [sp, #28]
 8004be8:	e014      	b.n	8004c14 <_svfiprintf_r+0x110>
 8004bea:	eba0 0308 	sub.w	r3, r0, r8
 8004bee:	fa09 f303 	lsl.w	r3, r9, r3
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	9304      	str	r3, [sp, #16]
 8004bf6:	46a2      	mov	sl, r4
 8004bf8:	e7d2      	b.n	8004ba0 <_svfiprintf_r+0x9c>
 8004bfa:	9b03      	ldr	r3, [sp, #12]
 8004bfc:	1d19      	adds	r1, r3, #4
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	9103      	str	r1, [sp, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	bfbb      	ittet	lt
 8004c06:	425b      	neglt	r3, r3
 8004c08:	f042 0202 	orrlt.w	r2, r2, #2
 8004c0c:	9307      	strge	r3, [sp, #28]
 8004c0e:	9307      	strlt	r3, [sp, #28]
 8004c10:	bfb8      	it	lt
 8004c12:	9204      	strlt	r2, [sp, #16]
 8004c14:	7823      	ldrb	r3, [r4, #0]
 8004c16:	2b2e      	cmp	r3, #46	; 0x2e
 8004c18:	d10c      	bne.n	8004c34 <_svfiprintf_r+0x130>
 8004c1a:	7863      	ldrb	r3, [r4, #1]
 8004c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c1e:	d135      	bne.n	8004c8c <_svfiprintf_r+0x188>
 8004c20:	9b03      	ldr	r3, [sp, #12]
 8004c22:	1d1a      	adds	r2, r3, #4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	9203      	str	r2, [sp, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bfb8      	it	lt
 8004c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c30:	3402      	adds	r4, #2
 8004c32:	9305      	str	r3, [sp, #20]
 8004c34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d00 <_svfiprintf_r+0x1fc>
 8004c38:	7821      	ldrb	r1, [r4, #0]
 8004c3a:	2203      	movs	r2, #3
 8004c3c:	4650      	mov	r0, sl
 8004c3e:	f7fb facf 	bl	80001e0 <memchr>
 8004c42:	b140      	cbz	r0, 8004c56 <_svfiprintf_r+0x152>
 8004c44:	2340      	movs	r3, #64	; 0x40
 8004c46:	eba0 000a 	sub.w	r0, r0, sl
 8004c4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004c4e:	9b04      	ldr	r3, [sp, #16]
 8004c50:	4303      	orrs	r3, r0
 8004c52:	3401      	adds	r4, #1
 8004c54:	9304      	str	r3, [sp, #16]
 8004c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c5a:	4826      	ldr	r0, [pc, #152]	; (8004cf4 <_svfiprintf_r+0x1f0>)
 8004c5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c60:	2206      	movs	r2, #6
 8004c62:	f7fb fabd 	bl	80001e0 <memchr>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d038      	beq.n	8004cdc <_svfiprintf_r+0x1d8>
 8004c6a:	4b23      	ldr	r3, [pc, #140]	; (8004cf8 <_svfiprintf_r+0x1f4>)
 8004c6c:	bb1b      	cbnz	r3, 8004cb6 <_svfiprintf_r+0x1b2>
 8004c6e:	9b03      	ldr	r3, [sp, #12]
 8004c70:	3307      	adds	r3, #7
 8004c72:	f023 0307 	bic.w	r3, r3, #7
 8004c76:	3308      	adds	r3, #8
 8004c78:	9303      	str	r3, [sp, #12]
 8004c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c7c:	4433      	add	r3, r6
 8004c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c80:	e767      	b.n	8004b52 <_svfiprintf_r+0x4e>
 8004c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c86:	460c      	mov	r4, r1
 8004c88:	2001      	movs	r0, #1
 8004c8a:	e7a5      	b.n	8004bd8 <_svfiprintf_r+0xd4>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	3401      	adds	r4, #1
 8004c90:	9305      	str	r3, [sp, #20]
 8004c92:	4619      	mov	r1, r3
 8004c94:	f04f 0c0a 	mov.w	ip, #10
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c9e:	3a30      	subs	r2, #48	; 0x30
 8004ca0:	2a09      	cmp	r2, #9
 8004ca2:	d903      	bls.n	8004cac <_svfiprintf_r+0x1a8>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0c5      	beq.n	8004c34 <_svfiprintf_r+0x130>
 8004ca8:	9105      	str	r1, [sp, #20]
 8004caa:	e7c3      	b.n	8004c34 <_svfiprintf_r+0x130>
 8004cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e7f0      	b.n	8004c98 <_svfiprintf_r+0x194>
 8004cb6:	ab03      	add	r3, sp, #12
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	462a      	mov	r2, r5
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <_svfiprintf_r+0x1f8>)
 8004cbe:	a904      	add	r1, sp, #16
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	f3af 8000 	nop.w
 8004cc6:	1c42      	adds	r2, r0, #1
 8004cc8:	4606      	mov	r6, r0
 8004cca:	d1d6      	bne.n	8004c7a <_svfiprintf_r+0x176>
 8004ccc:	89ab      	ldrh	r3, [r5, #12]
 8004cce:	065b      	lsls	r3, r3, #25
 8004cd0:	f53f af2c 	bmi.w	8004b2c <_svfiprintf_r+0x28>
 8004cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cd6:	b01d      	add	sp, #116	; 0x74
 8004cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cdc:	ab03      	add	r3, sp, #12
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	462a      	mov	r2, r5
 8004ce2:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <_svfiprintf_r+0x1f8>)
 8004ce4:	a904      	add	r1, sp, #16
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	f000 f87a 	bl	8004de0 <_printf_i>
 8004cec:	e7eb      	b.n	8004cc6 <_svfiprintf_r+0x1c2>
 8004cee:	bf00      	nop
 8004cf0:	08006857 	.word	0x08006857
 8004cf4:	08006861 	.word	0x08006861
 8004cf8:	00000000 	.word	0x00000000
 8004cfc:	08004a4d 	.word	0x08004a4d
 8004d00:	0800685d 	.word	0x0800685d

08004d04 <_printf_common>:
 8004d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d08:	4616      	mov	r6, r2
 8004d0a:	4699      	mov	r9, r3
 8004d0c:	688a      	ldr	r2, [r1, #8]
 8004d0e:	690b      	ldr	r3, [r1, #16]
 8004d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d14:	4293      	cmp	r3, r2
 8004d16:	bfb8      	it	lt
 8004d18:	4613      	movlt	r3, r2
 8004d1a:	6033      	str	r3, [r6, #0]
 8004d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d20:	4607      	mov	r7, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	b10a      	cbz	r2, 8004d2a <_printf_common+0x26>
 8004d26:	3301      	adds	r3, #1
 8004d28:	6033      	str	r3, [r6, #0]
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	0699      	lsls	r1, r3, #26
 8004d2e:	bf42      	ittt	mi
 8004d30:	6833      	ldrmi	r3, [r6, #0]
 8004d32:	3302      	addmi	r3, #2
 8004d34:	6033      	strmi	r3, [r6, #0]
 8004d36:	6825      	ldr	r5, [r4, #0]
 8004d38:	f015 0506 	ands.w	r5, r5, #6
 8004d3c:	d106      	bne.n	8004d4c <_printf_common+0x48>
 8004d3e:	f104 0a19 	add.w	sl, r4, #25
 8004d42:	68e3      	ldr	r3, [r4, #12]
 8004d44:	6832      	ldr	r2, [r6, #0]
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	42ab      	cmp	r3, r5
 8004d4a:	dc26      	bgt.n	8004d9a <_printf_common+0x96>
 8004d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d50:	1e13      	subs	r3, r2, #0
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	bf18      	it	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	0692      	lsls	r2, r2, #26
 8004d5a:	d42b      	bmi.n	8004db4 <_printf_common+0xb0>
 8004d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d60:	4649      	mov	r1, r9
 8004d62:	4638      	mov	r0, r7
 8004d64:	47c0      	blx	r8
 8004d66:	3001      	adds	r0, #1
 8004d68:	d01e      	beq.n	8004da8 <_printf_common+0xa4>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	68e5      	ldr	r5, [r4, #12]
 8004d6e:	6832      	ldr	r2, [r6, #0]
 8004d70:	f003 0306 	and.w	r3, r3, #6
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	bf08      	it	eq
 8004d78:	1aad      	subeq	r5, r5, r2
 8004d7a:	68a3      	ldr	r3, [r4, #8]
 8004d7c:	6922      	ldr	r2, [r4, #16]
 8004d7e:	bf0c      	ite	eq
 8004d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d84:	2500      	movne	r5, #0
 8004d86:	4293      	cmp	r3, r2
 8004d88:	bfc4      	itt	gt
 8004d8a:	1a9b      	subgt	r3, r3, r2
 8004d8c:	18ed      	addgt	r5, r5, r3
 8004d8e:	2600      	movs	r6, #0
 8004d90:	341a      	adds	r4, #26
 8004d92:	42b5      	cmp	r5, r6
 8004d94:	d11a      	bne.n	8004dcc <_printf_common+0xc8>
 8004d96:	2000      	movs	r0, #0
 8004d98:	e008      	b.n	8004dac <_printf_common+0xa8>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	4652      	mov	r2, sl
 8004d9e:	4649      	mov	r1, r9
 8004da0:	4638      	mov	r0, r7
 8004da2:	47c0      	blx	r8
 8004da4:	3001      	adds	r0, #1
 8004da6:	d103      	bne.n	8004db0 <_printf_common+0xac>
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db0:	3501      	adds	r5, #1
 8004db2:	e7c6      	b.n	8004d42 <_printf_common+0x3e>
 8004db4:	18e1      	adds	r1, r4, r3
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	2030      	movs	r0, #48	; 0x30
 8004dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dbe:	4422      	add	r2, r4
 8004dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dc8:	3302      	adds	r3, #2
 8004dca:	e7c7      	b.n	8004d5c <_printf_common+0x58>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	4622      	mov	r2, r4
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	47c0      	blx	r8
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	d0e6      	beq.n	8004da8 <_printf_common+0xa4>
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7d9      	b.n	8004d92 <_printf_common+0x8e>
	...

08004de0 <_printf_i>:
 8004de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	460c      	mov	r4, r1
 8004de6:	4691      	mov	r9, r2
 8004de8:	7e27      	ldrb	r7, [r4, #24]
 8004dea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004dec:	2f78      	cmp	r7, #120	; 0x78
 8004dee:	4680      	mov	r8, r0
 8004df0:	469a      	mov	sl, r3
 8004df2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004df6:	d807      	bhi.n	8004e08 <_printf_i+0x28>
 8004df8:	2f62      	cmp	r7, #98	; 0x62
 8004dfa:	d80a      	bhi.n	8004e12 <_printf_i+0x32>
 8004dfc:	2f00      	cmp	r7, #0
 8004dfe:	f000 80d8 	beq.w	8004fb2 <_printf_i+0x1d2>
 8004e02:	2f58      	cmp	r7, #88	; 0x58
 8004e04:	f000 80a3 	beq.w	8004f4e <_printf_i+0x16e>
 8004e08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e10:	e03a      	b.n	8004e88 <_printf_i+0xa8>
 8004e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e16:	2b15      	cmp	r3, #21
 8004e18:	d8f6      	bhi.n	8004e08 <_printf_i+0x28>
 8004e1a:	a001      	add	r0, pc, #4	; (adr r0, 8004e20 <_printf_i+0x40>)
 8004e1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e20:	08004e79 	.word	0x08004e79
 8004e24:	08004e8d 	.word	0x08004e8d
 8004e28:	08004e09 	.word	0x08004e09
 8004e2c:	08004e09 	.word	0x08004e09
 8004e30:	08004e09 	.word	0x08004e09
 8004e34:	08004e09 	.word	0x08004e09
 8004e38:	08004e8d 	.word	0x08004e8d
 8004e3c:	08004e09 	.word	0x08004e09
 8004e40:	08004e09 	.word	0x08004e09
 8004e44:	08004e09 	.word	0x08004e09
 8004e48:	08004e09 	.word	0x08004e09
 8004e4c:	08004f99 	.word	0x08004f99
 8004e50:	08004ebd 	.word	0x08004ebd
 8004e54:	08004f7b 	.word	0x08004f7b
 8004e58:	08004e09 	.word	0x08004e09
 8004e5c:	08004e09 	.word	0x08004e09
 8004e60:	08004fbb 	.word	0x08004fbb
 8004e64:	08004e09 	.word	0x08004e09
 8004e68:	08004ebd 	.word	0x08004ebd
 8004e6c:	08004e09 	.word	0x08004e09
 8004e70:	08004e09 	.word	0x08004e09
 8004e74:	08004f83 	.word	0x08004f83
 8004e78:	680b      	ldr	r3, [r1, #0]
 8004e7a:	1d1a      	adds	r2, r3, #4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	600a      	str	r2, [r1, #0]
 8004e80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0a3      	b.n	8004fd4 <_printf_i+0x1f4>
 8004e8c:	6825      	ldr	r5, [r4, #0]
 8004e8e:	6808      	ldr	r0, [r1, #0]
 8004e90:	062e      	lsls	r6, r5, #24
 8004e92:	f100 0304 	add.w	r3, r0, #4
 8004e96:	d50a      	bpl.n	8004eae <_printf_i+0xce>
 8004e98:	6805      	ldr	r5, [r0, #0]
 8004e9a:	600b      	str	r3, [r1, #0]
 8004e9c:	2d00      	cmp	r5, #0
 8004e9e:	da03      	bge.n	8004ea8 <_printf_i+0xc8>
 8004ea0:	232d      	movs	r3, #45	; 0x2d
 8004ea2:	426d      	negs	r5, r5
 8004ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ea8:	485e      	ldr	r0, [pc, #376]	; (8005024 <_printf_i+0x244>)
 8004eaa:	230a      	movs	r3, #10
 8004eac:	e019      	b.n	8004ee2 <_printf_i+0x102>
 8004eae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004eb2:	6805      	ldr	r5, [r0, #0]
 8004eb4:	600b      	str	r3, [r1, #0]
 8004eb6:	bf18      	it	ne
 8004eb8:	b22d      	sxthne	r5, r5
 8004eba:	e7ef      	b.n	8004e9c <_printf_i+0xbc>
 8004ebc:	680b      	ldr	r3, [r1, #0]
 8004ebe:	6825      	ldr	r5, [r4, #0]
 8004ec0:	1d18      	adds	r0, r3, #4
 8004ec2:	6008      	str	r0, [r1, #0]
 8004ec4:	0628      	lsls	r0, r5, #24
 8004ec6:	d501      	bpl.n	8004ecc <_printf_i+0xec>
 8004ec8:	681d      	ldr	r5, [r3, #0]
 8004eca:	e002      	b.n	8004ed2 <_printf_i+0xf2>
 8004ecc:	0669      	lsls	r1, r5, #25
 8004ece:	d5fb      	bpl.n	8004ec8 <_printf_i+0xe8>
 8004ed0:	881d      	ldrh	r5, [r3, #0]
 8004ed2:	4854      	ldr	r0, [pc, #336]	; (8005024 <_printf_i+0x244>)
 8004ed4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ed6:	bf0c      	ite	eq
 8004ed8:	2308      	moveq	r3, #8
 8004eda:	230a      	movne	r3, #10
 8004edc:	2100      	movs	r1, #0
 8004ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ee2:	6866      	ldr	r6, [r4, #4]
 8004ee4:	60a6      	str	r6, [r4, #8]
 8004ee6:	2e00      	cmp	r6, #0
 8004ee8:	bfa2      	ittt	ge
 8004eea:	6821      	ldrge	r1, [r4, #0]
 8004eec:	f021 0104 	bicge.w	r1, r1, #4
 8004ef0:	6021      	strge	r1, [r4, #0]
 8004ef2:	b90d      	cbnz	r5, 8004ef8 <_printf_i+0x118>
 8004ef4:	2e00      	cmp	r6, #0
 8004ef6:	d04d      	beq.n	8004f94 <_printf_i+0x1b4>
 8004ef8:	4616      	mov	r6, r2
 8004efa:	fbb5 f1f3 	udiv	r1, r5, r3
 8004efe:	fb03 5711 	mls	r7, r3, r1, r5
 8004f02:	5dc7      	ldrb	r7, [r0, r7]
 8004f04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f08:	462f      	mov	r7, r5
 8004f0a:	42bb      	cmp	r3, r7
 8004f0c:	460d      	mov	r5, r1
 8004f0e:	d9f4      	bls.n	8004efa <_printf_i+0x11a>
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d10b      	bne.n	8004f2c <_printf_i+0x14c>
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	07df      	lsls	r7, r3, #31
 8004f18:	d508      	bpl.n	8004f2c <_printf_i+0x14c>
 8004f1a:	6923      	ldr	r3, [r4, #16]
 8004f1c:	6861      	ldr	r1, [r4, #4]
 8004f1e:	4299      	cmp	r1, r3
 8004f20:	bfde      	ittt	le
 8004f22:	2330      	movle	r3, #48	; 0x30
 8004f24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f2c:	1b92      	subs	r2, r2, r6
 8004f2e:	6122      	str	r2, [r4, #16]
 8004f30:	f8cd a000 	str.w	sl, [sp]
 8004f34:	464b      	mov	r3, r9
 8004f36:	aa03      	add	r2, sp, #12
 8004f38:	4621      	mov	r1, r4
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	f7ff fee2 	bl	8004d04 <_printf_common>
 8004f40:	3001      	adds	r0, #1
 8004f42:	d14c      	bne.n	8004fde <_printf_i+0x1fe>
 8004f44:	f04f 30ff 	mov.w	r0, #4294967295
 8004f48:	b004      	add	sp, #16
 8004f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4e:	4835      	ldr	r0, [pc, #212]	; (8005024 <_printf_i+0x244>)
 8004f50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	680e      	ldr	r6, [r1, #0]
 8004f58:	061f      	lsls	r7, r3, #24
 8004f5a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f5e:	600e      	str	r6, [r1, #0]
 8004f60:	d514      	bpl.n	8004f8c <_printf_i+0x1ac>
 8004f62:	07d9      	lsls	r1, r3, #31
 8004f64:	bf44      	itt	mi
 8004f66:	f043 0320 	orrmi.w	r3, r3, #32
 8004f6a:	6023      	strmi	r3, [r4, #0]
 8004f6c:	b91d      	cbnz	r5, 8004f76 <_printf_i+0x196>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	f023 0320 	bic.w	r3, r3, #32
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	2310      	movs	r3, #16
 8004f78:	e7b0      	b.n	8004edc <_printf_i+0xfc>
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	f043 0320 	orr.w	r3, r3, #32
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	2378      	movs	r3, #120	; 0x78
 8004f84:	4828      	ldr	r0, [pc, #160]	; (8005028 <_printf_i+0x248>)
 8004f86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f8a:	e7e3      	b.n	8004f54 <_printf_i+0x174>
 8004f8c:	065e      	lsls	r6, r3, #25
 8004f8e:	bf48      	it	mi
 8004f90:	b2ad      	uxthmi	r5, r5
 8004f92:	e7e6      	b.n	8004f62 <_printf_i+0x182>
 8004f94:	4616      	mov	r6, r2
 8004f96:	e7bb      	b.n	8004f10 <_printf_i+0x130>
 8004f98:	680b      	ldr	r3, [r1, #0]
 8004f9a:	6826      	ldr	r6, [r4, #0]
 8004f9c:	6960      	ldr	r0, [r4, #20]
 8004f9e:	1d1d      	adds	r5, r3, #4
 8004fa0:	600d      	str	r5, [r1, #0]
 8004fa2:	0635      	lsls	r5, r6, #24
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	d501      	bpl.n	8004fac <_printf_i+0x1cc>
 8004fa8:	6018      	str	r0, [r3, #0]
 8004faa:	e002      	b.n	8004fb2 <_printf_i+0x1d2>
 8004fac:	0671      	lsls	r1, r6, #25
 8004fae:	d5fb      	bpl.n	8004fa8 <_printf_i+0x1c8>
 8004fb0:	8018      	strh	r0, [r3, #0]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	6123      	str	r3, [r4, #16]
 8004fb6:	4616      	mov	r6, r2
 8004fb8:	e7ba      	b.n	8004f30 <_printf_i+0x150>
 8004fba:	680b      	ldr	r3, [r1, #0]
 8004fbc:	1d1a      	adds	r2, r3, #4
 8004fbe:	600a      	str	r2, [r1, #0]
 8004fc0:	681e      	ldr	r6, [r3, #0]
 8004fc2:	6862      	ldr	r2, [r4, #4]
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f7fb f90a 	bl	80001e0 <memchr>
 8004fcc:	b108      	cbz	r0, 8004fd2 <_printf_i+0x1f2>
 8004fce:	1b80      	subs	r0, r0, r6
 8004fd0:	6060      	str	r0, [r4, #4]
 8004fd2:	6863      	ldr	r3, [r4, #4]
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fdc:	e7a8      	b.n	8004f30 <_printf_i+0x150>
 8004fde:	6923      	ldr	r3, [r4, #16]
 8004fe0:	4632      	mov	r2, r6
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	4640      	mov	r0, r8
 8004fe6:	47d0      	blx	sl
 8004fe8:	3001      	adds	r0, #1
 8004fea:	d0ab      	beq.n	8004f44 <_printf_i+0x164>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	079b      	lsls	r3, r3, #30
 8004ff0:	d413      	bmi.n	800501a <_printf_i+0x23a>
 8004ff2:	68e0      	ldr	r0, [r4, #12]
 8004ff4:	9b03      	ldr	r3, [sp, #12]
 8004ff6:	4298      	cmp	r0, r3
 8004ff8:	bfb8      	it	lt
 8004ffa:	4618      	movlt	r0, r3
 8004ffc:	e7a4      	b.n	8004f48 <_printf_i+0x168>
 8004ffe:	2301      	movs	r3, #1
 8005000:	4632      	mov	r2, r6
 8005002:	4649      	mov	r1, r9
 8005004:	4640      	mov	r0, r8
 8005006:	47d0      	blx	sl
 8005008:	3001      	adds	r0, #1
 800500a:	d09b      	beq.n	8004f44 <_printf_i+0x164>
 800500c:	3501      	adds	r5, #1
 800500e:	68e3      	ldr	r3, [r4, #12]
 8005010:	9903      	ldr	r1, [sp, #12]
 8005012:	1a5b      	subs	r3, r3, r1
 8005014:	42ab      	cmp	r3, r5
 8005016:	dcf2      	bgt.n	8004ffe <_printf_i+0x21e>
 8005018:	e7eb      	b.n	8004ff2 <_printf_i+0x212>
 800501a:	2500      	movs	r5, #0
 800501c:	f104 0619 	add.w	r6, r4, #25
 8005020:	e7f5      	b.n	800500e <_printf_i+0x22e>
 8005022:	bf00      	nop
 8005024:	08006868 	.word	0x08006868
 8005028:	08006879 	.word	0x08006879

0800502c <memcpy>:
 800502c:	440a      	add	r2, r1
 800502e:	4291      	cmp	r1, r2
 8005030:	f100 33ff 	add.w	r3, r0, #4294967295
 8005034:	d100      	bne.n	8005038 <memcpy+0xc>
 8005036:	4770      	bx	lr
 8005038:	b510      	push	{r4, lr}
 800503a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800503e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005042:	4291      	cmp	r1, r2
 8005044:	d1f9      	bne.n	800503a <memcpy+0xe>
 8005046:	bd10      	pop	{r4, pc}

08005048 <memmove>:
 8005048:	4288      	cmp	r0, r1
 800504a:	b510      	push	{r4, lr}
 800504c:	eb01 0402 	add.w	r4, r1, r2
 8005050:	d902      	bls.n	8005058 <memmove+0x10>
 8005052:	4284      	cmp	r4, r0
 8005054:	4623      	mov	r3, r4
 8005056:	d807      	bhi.n	8005068 <memmove+0x20>
 8005058:	1e43      	subs	r3, r0, #1
 800505a:	42a1      	cmp	r1, r4
 800505c:	d008      	beq.n	8005070 <memmove+0x28>
 800505e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005066:	e7f8      	b.n	800505a <memmove+0x12>
 8005068:	4402      	add	r2, r0
 800506a:	4601      	mov	r1, r0
 800506c:	428a      	cmp	r2, r1
 800506e:	d100      	bne.n	8005072 <memmove+0x2a>
 8005070:	bd10      	pop	{r4, pc}
 8005072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800507a:	e7f7      	b.n	800506c <memmove+0x24>

0800507c <_free_r>:
 800507c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800507e:	2900      	cmp	r1, #0
 8005080:	d048      	beq.n	8005114 <_free_r+0x98>
 8005082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005086:	9001      	str	r0, [sp, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f1a1 0404 	sub.w	r4, r1, #4
 800508e:	bfb8      	it	lt
 8005090:	18e4      	addlt	r4, r4, r3
 8005092:	f000 f8d3 	bl	800523c <__malloc_lock>
 8005096:	4a20      	ldr	r2, [pc, #128]	; (8005118 <_free_r+0x9c>)
 8005098:	9801      	ldr	r0, [sp, #4]
 800509a:	6813      	ldr	r3, [r2, #0]
 800509c:	4615      	mov	r5, r2
 800509e:	b933      	cbnz	r3, 80050ae <_free_r+0x32>
 80050a0:	6063      	str	r3, [r4, #4]
 80050a2:	6014      	str	r4, [r2, #0]
 80050a4:	b003      	add	sp, #12
 80050a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050aa:	f000 b8cd 	b.w	8005248 <__malloc_unlock>
 80050ae:	42a3      	cmp	r3, r4
 80050b0:	d90b      	bls.n	80050ca <_free_r+0x4e>
 80050b2:	6821      	ldr	r1, [r4, #0]
 80050b4:	1862      	adds	r2, r4, r1
 80050b6:	4293      	cmp	r3, r2
 80050b8:	bf04      	itt	eq
 80050ba:	681a      	ldreq	r2, [r3, #0]
 80050bc:	685b      	ldreq	r3, [r3, #4]
 80050be:	6063      	str	r3, [r4, #4]
 80050c0:	bf04      	itt	eq
 80050c2:	1852      	addeq	r2, r2, r1
 80050c4:	6022      	streq	r2, [r4, #0]
 80050c6:	602c      	str	r4, [r5, #0]
 80050c8:	e7ec      	b.n	80050a4 <_free_r+0x28>
 80050ca:	461a      	mov	r2, r3
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	b10b      	cbz	r3, 80050d4 <_free_r+0x58>
 80050d0:	42a3      	cmp	r3, r4
 80050d2:	d9fa      	bls.n	80050ca <_free_r+0x4e>
 80050d4:	6811      	ldr	r1, [r2, #0]
 80050d6:	1855      	adds	r5, r2, r1
 80050d8:	42a5      	cmp	r5, r4
 80050da:	d10b      	bne.n	80050f4 <_free_r+0x78>
 80050dc:	6824      	ldr	r4, [r4, #0]
 80050de:	4421      	add	r1, r4
 80050e0:	1854      	adds	r4, r2, r1
 80050e2:	42a3      	cmp	r3, r4
 80050e4:	6011      	str	r1, [r2, #0]
 80050e6:	d1dd      	bne.n	80050a4 <_free_r+0x28>
 80050e8:	681c      	ldr	r4, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	6053      	str	r3, [r2, #4]
 80050ee:	4421      	add	r1, r4
 80050f0:	6011      	str	r1, [r2, #0]
 80050f2:	e7d7      	b.n	80050a4 <_free_r+0x28>
 80050f4:	d902      	bls.n	80050fc <_free_r+0x80>
 80050f6:	230c      	movs	r3, #12
 80050f8:	6003      	str	r3, [r0, #0]
 80050fa:	e7d3      	b.n	80050a4 <_free_r+0x28>
 80050fc:	6825      	ldr	r5, [r4, #0]
 80050fe:	1961      	adds	r1, r4, r5
 8005100:	428b      	cmp	r3, r1
 8005102:	bf04      	itt	eq
 8005104:	6819      	ldreq	r1, [r3, #0]
 8005106:	685b      	ldreq	r3, [r3, #4]
 8005108:	6063      	str	r3, [r4, #4]
 800510a:	bf04      	itt	eq
 800510c:	1949      	addeq	r1, r1, r5
 800510e:	6021      	streq	r1, [r4, #0]
 8005110:	6054      	str	r4, [r2, #4]
 8005112:	e7c7      	b.n	80050a4 <_free_r+0x28>
 8005114:	b003      	add	sp, #12
 8005116:	bd30      	pop	{r4, r5, pc}
 8005118:	200000cc 	.word	0x200000cc

0800511c <_malloc_r>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	1ccd      	adds	r5, r1, #3
 8005120:	f025 0503 	bic.w	r5, r5, #3
 8005124:	3508      	adds	r5, #8
 8005126:	2d0c      	cmp	r5, #12
 8005128:	bf38      	it	cc
 800512a:	250c      	movcc	r5, #12
 800512c:	2d00      	cmp	r5, #0
 800512e:	4606      	mov	r6, r0
 8005130:	db01      	blt.n	8005136 <_malloc_r+0x1a>
 8005132:	42a9      	cmp	r1, r5
 8005134:	d903      	bls.n	800513e <_malloc_r+0x22>
 8005136:	230c      	movs	r3, #12
 8005138:	6033      	str	r3, [r6, #0]
 800513a:	2000      	movs	r0, #0
 800513c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800513e:	f000 f87d 	bl	800523c <__malloc_lock>
 8005142:	4921      	ldr	r1, [pc, #132]	; (80051c8 <_malloc_r+0xac>)
 8005144:	680a      	ldr	r2, [r1, #0]
 8005146:	4614      	mov	r4, r2
 8005148:	b99c      	cbnz	r4, 8005172 <_malloc_r+0x56>
 800514a:	4f20      	ldr	r7, [pc, #128]	; (80051cc <_malloc_r+0xb0>)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	b923      	cbnz	r3, 800515a <_malloc_r+0x3e>
 8005150:	4621      	mov	r1, r4
 8005152:	4630      	mov	r0, r6
 8005154:	f000 f862 	bl	800521c <_sbrk_r>
 8005158:	6038      	str	r0, [r7, #0]
 800515a:	4629      	mov	r1, r5
 800515c:	4630      	mov	r0, r6
 800515e:	f000 f85d 	bl	800521c <_sbrk_r>
 8005162:	1c43      	adds	r3, r0, #1
 8005164:	d123      	bne.n	80051ae <_malloc_r+0x92>
 8005166:	230c      	movs	r3, #12
 8005168:	6033      	str	r3, [r6, #0]
 800516a:	4630      	mov	r0, r6
 800516c:	f000 f86c 	bl	8005248 <__malloc_unlock>
 8005170:	e7e3      	b.n	800513a <_malloc_r+0x1e>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	1b5b      	subs	r3, r3, r5
 8005176:	d417      	bmi.n	80051a8 <_malloc_r+0x8c>
 8005178:	2b0b      	cmp	r3, #11
 800517a:	d903      	bls.n	8005184 <_malloc_r+0x68>
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	441c      	add	r4, r3
 8005180:	6025      	str	r5, [r4, #0]
 8005182:	e004      	b.n	800518e <_malloc_r+0x72>
 8005184:	6863      	ldr	r3, [r4, #4]
 8005186:	42a2      	cmp	r2, r4
 8005188:	bf0c      	ite	eq
 800518a:	600b      	streq	r3, [r1, #0]
 800518c:	6053      	strne	r3, [r2, #4]
 800518e:	4630      	mov	r0, r6
 8005190:	f000 f85a 	bl	8005248 <__malloc_unlock>
 8005194:	f104 000b 	add.w	r0, r4, #11
 8005198:	1d23      	adds	r3, r4, #4
 800519a:	f020 0007 	bic.w	r0, r0, #7
 800519e:	1ac2      	subs	r2, r0, r3
 80051a0:	d0cc      	beq.n	800513c <_malloc_r+0x20>
 80051a2:	1a1b      	subs	r3, r3, r0
 80051a4:	50a3      	str	r3, [r4, r2]
 80051a6:	e7c9      	b.n	800513c <_malloc_r+0x20>
 80051a8:	4622      	mov	r2, r4
 80051aa:	6864      	ldr	r4, [r4, #4]
 80051ac:	e7cc      	b.n	8005148 <_malloc_r+0x2c>
 80051ae:	1cc4      	adds	r4, r0, #3
 80051b0:	f024 0403 	bic.w	r4, r4, #3
 80051b4:	42a0      	cmp	r0, r4
 80051b6:	d0e3      	beq.n	8005180 <_malloc_r+0x64>
 80051b8:	1a21      	subs	r1, r4, r0
 80051ba:	4630      	mov	r0, r6
 80051bc:	f000 f82e 	bl	800521c <_sbrk_r>
 80051c0:	3001      	adds	r0, #1
 80051c2:	d1dd      	bne.n	8005180 <_malloc_r+0x64>
 80051c4:	e7cf      	b.n	8005166 <_malloc_r+0x4a>
 80051c6:	bf00      	nop
 80051c8:	200000cc 	.word	0x200000cc
 80051cc:	200000d0 	.word	0x200000d0

080051d0 <_realloc_r>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	4607      	mov	r7, r0
 80051d4:	4614      	mov	r4, r2
 80051d6:	460e      	mov	r6, r1
 80051d8:	b921      	cbnz	r1, 80051e4 <_realloc_r+0x14>
 80051da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80051de:	4611      	mov	r1, r2
 80051e0:	f7ff bf9c 	b.w	800511c <_malloc_r>
 80051e4:	b922      	cbnz	r2, 80051f0 <_realloc_r+0x20>
 80051e6:	f7ff ff49 	bl	800507c <_free_r>
 80051ea:	4625      	mov	r5, r4
 80051ec:	4628      	mov	r0, r5
 80051ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051f0:	f000 f830 	bl	8005254 <_malloc_usable_size_r>
 80051f4:	42a0      	cmp	r0, r4
 80051f6:	d20f      	bcs.n	8005218 <_realloc_r+0x48>
 80051f8:	4621      	mov	r1, r4
 80051fa:	4638      	mov	r0, r7
 80051fc:	f7ff ff8e 	bl	800511c <_malloc_r>
 8005200:	4605      	mov	r5, r0
 8005202:	2800      	cmp	r0, #0
 8005204:	d0f2      	beq.n	80051ec <_realloc_r+0x1c>
 8005206:	4631      	mov	r1, r6
 8005208:	4622      	mov	r2, r4
 800520a:	f7ff ff0f 	bl	800502c <memcpy>
 800520e:	4631      	mov	r1, r6
 8005210:	4638      	mov	r0, r7
 8005212:	f7ff ff33 	bl	800507c <_free_r>
 8005216:	e7e9      	b.n	80051ec <_realloc_r+0x1c>
 8005218:	4635      	mov	r5, r6
 800521a:	e7e7      	b.n	80051ec <_realloc_r+0x1c>

0800521c <_sbrk_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4d06      	ldr	r5, [pc, #24]	; (8005238 <_sbrk_r+0x1c>)
 8005220:	2300      	movs	r3, #0
 8005222:	4604      	mov	r4, r0
 8005224:	4608      	mov	r0, r1
 8005226:	602b      	str	r3, [r5, #0]
 8005228:	f7fc fc30 	bl	8001a8c <_sbrk>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_sbrk_r+0x1a>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_sbrk_r+0x1a>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	200001e4 	.word	0x200001e4

0800523c <__malloc_lock>:
 800523c:	4801      	ldr	r0, [pc, #4]	; (8005244 <__malloc_lock+0x8>)
 800523e:	f000 b811 	b.w	8005264 <__retarget_lock_acquire_recursive>
 8005242:	bf00      	nop
 8005244:	200001ec 	.word	0x200001ec

08005248 <__malloc_unlock>:
 8005248:	4801      	ldr	r0, [pc, #4]	; (8005250 <__malloc_unlock+0x8>)
 800524a:	f000 b80c 	b.w	8005266 <__retarget_lock_release_recursive>
 800524e:	bf00      	nop
 8005250:	200001ec 	.word	0x200001ec

08005254 <_malloc_usable_size_r>:
 8005254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005258:	1f18      	subs	r0, r3, #4
 800525a:	2b00      	cmp	r3, #0
 800525c:	bfbc      	itt	lt
 800525e:	580b      	ldrlt	r3, [r1, r0]
 8005260:	18c0      	addlt	r0, r0, r3
 8005262:	4770      	bx	lr

08005264 <__retarget_lock_acquire_recursive>:
 8005264:	4770      	bx	lr

08005266 <__retarget_lock_release_recursive>:
 8005266:	4770      	bx	lr

08005268 <_init>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	bf00      	nop
 800526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526e:	bc08      	pop	{r3}
 8005270:	469e      	mov	lr, r3
 8005272:	4770      	bx	lr

08005274 <_fini>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr
