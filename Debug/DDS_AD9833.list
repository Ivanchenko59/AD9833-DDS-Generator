
DDS_AD9833.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015a4  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c14  08004c14  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08004c14  08004c14  00014c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c1c  08004c1c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c1c  08004c1c  00014c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000090  08004cb4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08004cb4  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f07  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e5  00000000  00000000  00033fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  000366b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  00037340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017aaa  00000000  00000000  00037ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ede  00000000  00000000  0004f94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8da  00000000  00000000  00061828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef102  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036b4  00000000  00000000  000ef158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003658 	.word	0x08003658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08003658 	.word	0x08003658

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Encoder_Init>:

/*
 * @brief Starts the TIM Encoder Interface
 */
void Encoder_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800057c:	213c      	movs	r1, #60	; 0x3c
 800057e:	4802      	ldr	r0, [pc, #8]	; (8000588 <Encoder_Init+0x10>)
 8000580:	f001 ffae 	bl	80024e0 <HAL_TIM_Encoder_Start>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000188 	.word	0x20000188

0800058c <Encoder_Read>:
/*
 * @brief Read Timer Counter Register value
 * @retval Value of the timer counter register (TIM1_CNT) divided by 2
 */
uint16_t Encoder_Read(void)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
	int16_t val = __HAL_TIM_GET_COUNTER(&htim1);
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <Encoder_Read+0x24>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000598:	80fb      	strh	r3, [r7, #6]
	return val >> 1;
 800059a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800059e:	105b      	asrs	r3, r3, #1
 80005a0:	b21b      	sxth	r3, r3
 80005a2:	b29b      	uxth	r3, r3
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	20000188 	.word	0x20000188

080005b4 <Encoder_Get_Status>:
/*
 * @brief Read the current state of the encoder
 * @retval Current encoder status
 */
Encoder_Status Encoder_Get_Status(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	new_count = Encoder_Read();
 80005b8:	f7ff ffe8 	bl	800058c <Encoder_Read>
 80005bc:	4603      	mov	r3, r0
 80005be:	b21a      	sxth	r2, r3
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <Encoder_Get_Status+0x64>)
 80005c2:	801a      	strh	r2, [r3, #0]
	if (new_count != prev_count) {
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <Encoder_Get_Status+0x64>)
 80005c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <Encoder_Get_Status+0x68>)
 80005cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d01e      	beq.n	8000612 <Encoder_Get_Status+0x5e>
		if (new_count > prev_count) {
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <Encoder_Get_Status+0x64>)
 80005d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <Encoder_Get_Status+0x68>)
 80005dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dd06      	ble.n	80005f2 <Encoder_Get_Status+0x3e>
			prev_count = new_count;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <Encoder_Get_Status+0x64>)
 80005e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <Encoder_Get_Status+0x68>)
 80005ec:	801a      	strh	r2, [r3, #0]
			return Incremented;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e010      	b.n	8000614 <Encoder_Get_Status+0x60>
		}
		else if (new_count < prev_count){
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <Encoder_Get_Status+0x64>)
 80005f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <Encoder_Get_Status+0x68>)
 80005fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005fe:	429a      	cmp	r2, r3
 8000600:	da07      	bge.n	8000612 <Encoder_Get_Status+0x5e>
			prev_count = new_count;
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <Encoder_Get_Status+0x64>)
 8000604:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <Encoder_Get_Status+0x68>)
 800060a:	801a      	strh	r2, [r3, #0]
			return Decremented;
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	e000      	b.n	8000614 <Encoder_Get_Status+0x60>
		}
	}
	return Neutral;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000ac 	.word	0x200000ac
 800061c:	200000ae 	.word	0x200000ae

08000620 <Button_Get_Status>:
/*
 * @brief Read and recognizes long and short presses encoder button
 * @retval Current encoder button status
 */
Button_Status Button_Get_Status(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	btn.state = !HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin);
 8000624:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000628:	483e      	ldr	r0, [pc, #248]	; (8000724 <Button_Get_Status+0x104>)
 800062a:	f000 ffdd 	bl	80015e8 <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	bf0c      	ite	eq
 8000634:	2301      	moveq	r3, #1
 8000636:	2300      	movne	r3, #0
 8000638:	b2d9      	uxtb	r1, r3
 800063a:	4a3b      	ldr	r2, [pc, #236]	; (8000728 <Button_Get_Status+0x108>)
 800063c:	7813      	ldrb	r3, [r2, #0]
 800063e:	f361 0300 	bfi	r3, r1, #0, #1
 8000642:	7013      	strb	r3, [r2, #0]

	if (btn.state && !btn.short_state && ((HAL_GetTick() - btn_time) > BUTTON_SHORT_PRESS_DELAY)) {
 8000644:	4b38      	ldr	r3, [pc, #224]	; (8000728 <Button_Get_Status+0x108>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d01e      	beq.n	8000690 <Button_Get_Status+0x70>
 8000652:	4b35      	ldr	r3, [pc, #212]	; (8000728 <Button_Get_Status+0x108>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d117      	bne.n	8000690 <Button_Get_Status+0x70>
 8000660:	f000 fd28 	bl	80010b4 <HAL_GetTick>
 8000664:	4602      	mov	r2, r0
 8000666:	4b31      	ldr	r3, [pc, #196]	; (800072c <Button_Get_Status+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	2b64      	cmp	r3, #100	; 0x64
 800066e:	d90f      	bls.n	8000690 <Button_Get_Status+0x70>
		btn.short_state = 1;
 8000670:	4a2d      	ldr	r2, [pc, #180]	; (8000728 <Button_Get_Status+0x108>)
 8000672:	7813      	ldrb	r3, [r2, #0]
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	7013      	strb	r3, [r2, #0]
		btn.long_state = 0;
 800067a:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <Button_Get_Status+0x108>)
 800067c:	7813      	ldrb	r3, [r2, #0]
 800067e:	f36f 0382 	bfc	r3, #2, #1
 8000682:	7013      	strb	r3, [r2, #0]
		btn_time = HAL_GetTick();
 8000684:	f000 fd16 	bl	80010b4 <HAL_GetTick>
 8000688:	4603      	mov	r3, r0
 800068a:	4a28      	ldr	r2, [pc, #160]	; (800072c <Button_Get_Status+0x10c>)
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	e046      	b.n	800071e <Button_Get_Status+0xfe>
	}
	else if (btn.state && !btn.long_state && (HAL_GetTick() - btn_time) > BUTTON_LONG_PRESS_DELAY) {
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <Button_Get_Status+0x108>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2b00      	cmp	r3, #0
 800069c:	d016      	beq.n	80006cc <Button_Get_Status+0xac>
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <Button_Get_Status+0x108>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d10f      	bne.n	80006cc <Button_Get_Status+0xac>
 80006ac:	f000 fd02 	bl	80010b4 <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	4b1e      	ldr	r3, [pc, #120]	; (800072c <Button_Get_Status+0x10c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006bc:	d906      	bls.n	80006cc <Button_Get_Status+0xac>
		btn.long_state = 1;
 80006be:	4a1a      	ldr	r2, [pc, #104]	; (8000728 <Button_Get_Status+0x108>)
 80006c0:	7813      	ldrb	r3, [r2, #0]
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	7013      	strb	r3, [r2, #0]
		return Long_Press;
 80006c8:	2302      	movs	r3, #2
 80006ca:	e029      	b.n	8000720 <Button_Get_Status+0x100>
	}
	else if (!btn.state && btn.short_state && (HAL_GetTick() - btn_time) > BUTTON_SHORT_PRESS_DELAY) {
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <Button_Get_Status+0x108>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d121      	bne.n	800071e <Button_Get_Status+0xfe>
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <Button_Get_Status+0x108>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d01a      	beq.n	800071e <Button_Get_Status+0xfe>
 80006e8:	f000 fce4 	bl	80010b4 <HAL_GetTick>
 80006ec:	4602      	mov	r2, r0
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <Button_Get_Status+0x10c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	2b64      	cmp	r3, #100	; 0x64
 80006f6:	d912      	bls.n	800071e <Button_Get_Status+0xfe>
		btn.short_state = 0;
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <Button_Get_Status+0x108>)
 80006fa:	7813      	ldrb	r3, [r2, #0]
 80006fc:	f36f 0341 	bfc	r3, #1, #1
 8000700:	7013      	strb	r3, [r2, #0]
		btn_time = HAL_GetTick();
 8000702:	f000 fcd7 	bl	80010b4 <HAL_GetTick>
 8000706:	4603      	mov	r3, r0
 8000708:	4a08      	ldr	r2, [pc, #32]	; (800072c <Button_Get_Status+0x10c>)
 800070a:	6013      	str	r3, [r2, #0]
		if(!btn.long_state) {
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <Button_Get_Status+0x108>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d101      	bne.n	800071e <Button_Get_Status+0xfe>
			return Short_Press;
 800071a:	2301      	movs	r3, #1
 800071c:	e000      	b.n	8000720 <Button_Get_Status+0x100>
		}
	}
	return False_Press;
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40020000 	.word	0x40020000
 8000728:	200000b0 	.word	0x200000b0
 800072c:	200000b4 	.word	0x200000b4

08000730 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_GPIO_Init+0xb8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a26      	ldr	r2, [pc, #152]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a1f      	ldr	r2, [pc, #124]	; (80007e8 <MX_GPIO_Init+0xb8>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_CS_Pin|ST7735_RES_Pin|ST7735_DC_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80007a0:	4812      	ldr	r0, [pc, #72]	; (80007ec <MX_GPIO_Init+0xbc>)
 80007a2:	f000 ff39 	bl	8001618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80007a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	480d      	ldr	r0, [pc, #52]	; (80007f0 <MX_GPIO_Init+0xc0>)
 80007bc:	f000 fd90 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin|ST7735_RES_Pin|ST7735_DC_Pin;
 80007c0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80007c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0xbc>)
 80007da:	f000 fd81 	bl	80012e0 <HAL_GPIO_Init>

}
 80007de:	bf00      	nop
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020400 	.word	0x40020400
 80007f0:	40020000 	.word	0x40020000

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b087      	sub	sp, #28
 80007f8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f000 fbf5 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f935 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f7ff ff95 	bl	8000730 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000806:	f000 f9a1 	bl	8000b4c <MX_SPI1_Init>
  MX_SPI2_Init();
 800080a:	f000 f9d5 	bl	8000bb8 <MX_SPI2_Init>
  MX_TIM1_Init();
 800080e:	f000 fb21 	bl	8000e54 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000812:	f002 f8e7 	bl	80029e4 <ST7735_Init>
  Encoder_Init();
 8000816:	f7ff feaf 	bl	8000578 <Encoder_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  ST7735_FillScreen(ST7735_BLACK);
 800081a:	2000      	movs	r0, #0
 800081c:	f002 faaa 	bl	8002d74 <ST7735_FillScreen>

  ST7735_FillRectangle(25, 70, 12, 2, ST7735_DARKGREY);
 8000820:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2302      	movs	r3, #2
 8000828:	220c      	movs	r2, #12
 800082a:	2146      	movs	r1, #70	; 0x46
 800082c:	2019      	movs	r0, #25
 800082e:	f002 fa2d 	bl	8002c8c <ST7735_FillRectangle>
  ST7735_FillRectangle(49, 70, 35, 2, ST7735_DARKGREY);
 8000832:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8000836:	9300      	str	r3, [sp, #0]
 8000838:	2302      	movs	r3, #2
 800083a:	2223      	movs	r2, #35	; 0x23
 800083c:	2146      	movs	r1, #70	; 0x46
 800083e:	2031      	movs	r0, #49	; 0x31
 8000840:	f002 fa24 	bl	8002c8c <ST7735_FillRectangle>
  ST7735_FillRectangle(97, 70, 35, 2, ST7735_DARKGREY);
 8000844:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2302      	movs	r3, #2
 800084c:	2223      	movs	r2, #35	; 0x23
 800084e:	2146      	movs	r1, #70	; 0x46
 8000850:	2061      	movs	r0, #97	; 0x61
 8000852:	f002 fa1b 	bl	8002c8c <ST7735_FillRectangle>
  ST7735_WriteString(21, 75, "MHz  kHz    Hz", Font_7x10, ST7735_DARKGREY, ST7735_BLACK);
 8000856:	4b42      	ldr	r3, [pc, #264]	; (8000960 <main+0x16c>)
 8000858:	2200      	movs	r2, #0
 800085a:	9202      	str	r2, [sp, #8]
 800085c:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8000860:	9201      	str	r2, [sp, #4]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	9200      	str	r2, [sp, #0]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a3e      	ldr	r2, [pc, #248]	; (8000964 <main+0x170>)
 800086a:	214b      	movs	r1, #75	; 0x4b
 800086c:	2015      	movs	r0, #21
 800086e:	f002 f94a 	bl	8002b06 <ST7735_WriteString>

  while (1)
  {

	  Edit_Frequency(edit_pos, &freq);
 8000872:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <main+0x174>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	493d      	ldr	r1, [pc, #244]	; (800096c <main+0x178>)
 8000878:	4618      	mov	r0, r3
 800087a:	f000 f88b 	bl	8000994 <Edit_Frequency>

	  MHz = freq / 1000000;
 800087e:	4b3b      	ldr	r3, [pc, #236]	; (800096c <main+0x178>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a3b      	ldr	r2, [pc, #236]	; (8000970 <main+0x17c>)
 8000884:	fba2 2303 	umull	r2, r3, r2, r3
 8000888:	0c9b      	lsrs	r3, r3, #18
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b39      	ldr	r3, [pc, #228]	; (8000974 <main+0x180>)
 800088e:	801a      	strh	r2, [r3, #0]
	  kHz = freq / 1000 % 1000;
 8000890:	4b36      	ldr	r3, [pc, #216]	; (800096c <main+0x178>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a38      	ldr	r2, [pc, #224]	; (8000978 <main+0x184>)
 8000896:	fba2 2303 	umull	r2, r3, r2, r3
 800089a:	099a      	lsrs	r2, r3, #6
 800089c:	4b36      	ldr	r3, [pc, #216]	; (8000978 <main+0x184>)
 800089e:	fba3 1302 	umull	r1, r3, r3, r2
 80008a2:	099b      	lsrs	r3, r3, #6
 80008a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008a8:	fb01 f303 	mul.w	r3, r1, r3
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	4b32      	ldr	r3, [pc, #200]	; (800097c <main+0x188>)
 80008b2:	801a      	strh	r2, [r3, #0]
	  Hz = freq % 1000;
 80008b4:	4b2d      	ldr	r3, [pc, #180]	; (800096c <main+0x178>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <main+0x184>)
 80008ba:	fba3 1302 	umull	r1, r3, r3, r2
 80008be:	099b      	lsrs	r3, r3, #6
 80008c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <main+0x18c>)
 80008ce:	801a      	strh	r2, [r3, #0]

	  sprintf(Str_Buffer, "%1d,%03d,%03d", MHz, kHz, Hz);
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <main+0x180>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <main+0x188>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	4b28      	ldr	r3, [pc, #160]	; (8000980 <main+0x18c>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	460b      	mov	r3, r1
 80008e4:	4927      	ldr	r1, [pc, #156]	; (8000984 <main+0x190>)
 80008e6:	4828      	ldr	r0, [pc, #160]	; (8000988 <main+0x194>)
 80008e8:	f002 fa88 	bl	8002dfc <siprintf>
	  ST7735_WriteStringWithSelect(25, 50, Str_Buffer, Font_12x18, edit_pos, text_color);
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <main+0x174>)
 80008ee:	781a      	ldrb	r2, [r3, #0]
 80008f0:	4b26      	ldr	r3, [pc, #152]	; (800098c <main+0x198>)
 80008f2:	4927      	ldr	r1, [pc, #156]	; (8000990 <main+0x19c>)
 80008f4:	ac02      	add	r4, sp, #8
 80008f6:	c903      	ldmia	r1, {r0, r1}
 80008f8:	e884 0003 	stmia.w	r4, {r0, r1}
 80008fc:	9201      	str	r2, [sp, #4]
 80008fe:	685a      	ldr	r2, [r3, #4]
 8000900:	9200      	str	r2, [sp, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a20      	ldr	r2, [pc, #128]	; (8000988 <main+0x194>)
 8000906:	2132      	movs	r1, #50	; 0x32
 8000908:	2019      	movs	r0, #25
 800090a:	f002 f946 	bl	8002b9a <ST7735_WriteStringWithSelect>


	  uint8_t button_status = Button_Get_Status();
 800090e:	f7ff fe87 	bl	8000620 <Button_Get_Status>
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	  switch(button_status) {
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d010      	beq.n	800093e <main+0x14a>
 800091c:	2b02      	cmp	r3, #2
 800091e:	dca8      	bgt.n	8000872 <main+0x7e>
 8000920:	2b00      	cmp	r3, #0
 8000922:	d017      	beq.n	8000954 <main+0x160>
 8000924:	2b01      	cmp	r3, #1
 8000926:	d1a4      	bne.n	8000872 <main+0x7e>
	  	  case Short_Press:
	  		  if (edit_pos < MAX_DIGITS)
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <main+0x174>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b05      	cmp	r3, #5
 800092e:	d813      	bhi.n	8000958 <main+0x164>
	  			  edit_pos++;
 8000930:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <main+0x174>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <main+0x174>)
 800093a:	701a      	strb	r2, [r3, #0]
			  break;
 800093c:	e00c      	b.n	8000958 <main+0x164>

	  	  case Long_Press:
	  		  if (edit_pos > 0)
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <main+0x174>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d00a      	beq.n	800095c <main+0x168>
	  			  edit_pos--;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <main+0x174>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <main+0x174>)
 8000950:	701a      	strb	r2, [r3, #0]
			  break;
 8000952:	e003      	b.n	800095c <main+0x168>
		  case False_Press:
			  break;
 8000954:	bf00      	nop
 8000956:	e78c      	b.n	8000872 <main+0x7e>
			  break;
 8000958:	bf00      	nop
 800095a:	e78a      	b.n	8000872 <main+0x7e>
			  break;
 800095c:	bf00      	nop
  {
 800095e:	e788      	b.n	8000872 <main+0x7e>
 8000960:	2000001c 	.word	0x2000001c
 8000964:	08003670 	.word	0x08003670
 8000968:	2000000c 	.word	0x2000000c
 800096c:	20000008 	.word	0x20000008
 8000970:	431bde83 	.word	0x431bde83
 8000974:	200000c4 	.word	0x200000c4
 8000978:	10624dd3 	.word	0x10624dd3
 800097c:	200000ca 	.word	0x200000ca
 8000980:	200000c6 	.word	0x200000c6
 8000984:	08003680 	.word	0x08003680
 8000988:	200000cc 	.word	0x200000cc
 800098c:	20000024 	.word	0x20000024
 8000990:	20000000 	.word	0x20000000

08000994 <Edit_Frequency>:
}



void Edit_Frequency(uint8_t position, uint32_t *p_freq)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]

	uint32_t pos_to_Hz = int_pow(10, position);
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	4619      	mov	r1, r3
 80009a4:	200a      	movs	r0, #10
 80009a6:	f000 f83b 	bl	8000a20 <int_pow>
 80009aa:	6138      	str	r0, [r7, #16]
	uint32_t edit_value = *p_freq / pos_to_Hz;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	617b      	str	r3, [r7, #20]

	switch(Encoder_Get_Status()) {
 80009b8:	f7ff fdfc 	bl	80005b4 <Encoder_Get_Status>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d006      	beq.n	80009d0 <Edit_Frequency+0x3c>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	dc0f      	bgt.n	80009e6 <Edit_Frequency+0x52>
 80009c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ca:	d005      	beq.n	80009d8 <Edit_Frequency+0x44>
 80009cc:	2b00      	cmp	r3, #0
		  case Decremented:
			  if(edit_value > 0)
				  edit_value--;
			  break;
		  case Neutral:
			  break;
 80009ce:	e00a      	b.n	80009e6 <Edit_Frequency+0x52>
			  edit_value++;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	3301      	adds	r3, #1
 80009d4:	617b      	str	r3, [r7, #20]
			  break;
 80009d6:	e006      	b.n	80009e6 <Edit_Frequency+0x52>
			  if(edit_value > 0)
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <Edit_Frequency+0x50>
				  edit_value--;
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
			  break;
 80009e4:	bf00      	nop
	  }

	uint32_t edited_freq = edit_value * pos_to_Hz + *p_freq % pos_to_Hz;
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	fb02 f203 	mul.w	r2, r2, r3
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	6939      	ldr	r1, [r7, #16]
 80009f4:	fbb3 f1f1 	udiv	r1, r3, r1
 80009f8:	6938      	ldr	r0, [r7, #16]
 80009fa:	fb00 f101 	mul.w	r1, r0, r1
 80009fe:	1a5b      	subs	r3, r3, r1
 8000a00:	4413      	add	r3, r2
 8000a02:	60fb      	str	r3, [r7, #12]

	if (edited_freq <= MAX_FREQ_VALUE)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <Edit_Frequency+0x88>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d802      	bhi.n	8000a12 <Edit_Frequency+0x7e>
		*p_freq = edited_freq;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	601a      	str	r2, [r3, #0]

}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	004c4b40 	.word	0x004c4b40

08000a20 <int_pow>:

uint32_t int_pow(uint32_t base, uint8_t exp)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70fb      	strb	r3, [r7, #3]
    uint32_t result = 1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
    while (exp) {
 8000a30:	e011      	b.n	8000a56 <int_pow+0x36>
        if (exp % 2)
 8000a32:	78fb      	ldrb	r3, [r7, #3]
 8000a34:	f003 0301 	and.w	r3, r3, #1
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d004      	beq.n	8000a48 <int_pow+0x28>
           result *= base;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	fb02 f303 	mul.w	r3, r2, r3
 8000a46:	60fb      	str	r3, [r7, #12]
        exp /= 2;
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	085b      	lsrs	r3, r3, #1
 8000a4c:	70fb      	strb	r3, [r7, #3]
        base *= base;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	fb03 f303 	mul.w	r3, r3, r3
 8000a54:	607b      	str	r3, [r7, #4]
    while (exp) {
 8000a56:	78fb      	ldrb	r3, [r7, #3]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1ea      	bne.n	8000a32 <int_pow+0x12>
    }
    return result;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b094      	sub	sp, #80	; 0x50
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	2230      	movs	r2, #48	; 0x30
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 f9b6 	bl	8002dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <SystemClock_Config+0xcc>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a27      	ldr	r2, [pc, #156]	; (8000b38 <SystemClock_Config+0xcc>)
 8000a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <SystemClock_Config+0xcc>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <SystemClock_Config+0xd0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab8:	4a20      	ldr	r2, [pc, #128]	; (8000b3c <SystemClock_Config+0xd0>)
 8000aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <SystemClock_Config+0xd0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ae0:	2319      	movs	r3, #25
 8000ae2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ae4:	23a8      	movs	r3, #168	; 0xa8
 8000ae6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aec:	2304      	movs	r3, #4
 8000aee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fda9 	bl	800164c <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b00:	f000 f81e 	bl	8000b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 f80b 	bl	8001b3c <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b2c:	f000 f808 	bl	8000b40 <Error_Handler>
  }
}
 8000b30:	bf00      	nop
 8000b32:	3750      	adds	r7, #80	; 0x50
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40007000 	.word	0x40007000

08000b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <Error_Handler+0x8>
	...

08000b4c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b52:	4a18      	ldr	r2, [pc, #96]	; (8000bb4 <MX_SPI1_Init+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b98:	220a      	movs	r2, #10
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b9e:	f001 f969 	bl	8001e74 <HAL_SPI_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ba8:	f7ff ffca 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000130 	.word	0x20000130
 8000bb4:	40013000 	.word	0x40013000

08000bb8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bbe:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <MX_SPI2_Init+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000c04:	220a      	movs	r2, #10
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <MX_SPI2_Init+0x64>)
 8000c0a:	f001 f933 	bl	8001e74 <HAL_SPI_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c14:	f7ff ff94 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000d8 	.word	0x200000d8
 8000c20:	40003800 	.word	0x40003800

08000c24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	; 0x30
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a32      	ldr	r2, [pc, #200]	; (8000d0c <HAL_SPI_MspInit+0xe8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12c      	bne.n	8000ca0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <HAL_SPI_MspInit+0xec>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a30      	ldr	r2, [pc, #192]	; (8000d10 <HAL_SPI_MspInit+0xec>)
 8000c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <HAL_SPI_MspInit+0xec>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <HAL_SPI_MspInit+0xec>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a29      	ldr	r2, [pc, #164]	; (8000d10 <HAL_SPI_MspInit+0xec>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <HAL_SPI_MspInit+0xec>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ST7735_SCK_Pin|ST7735_SDA_Pin;
 8000c7e:	23a0      	movs	r3, #160	; 0xa0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c8e:	2305      	movs	r3, #5
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	481e      	ldr	r0, [pc, #120]	; (8000d14 <HAL_SPI_MspInit+0xf0>)
 8000c9a:	f000 fb21 	bl	80012e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c9e:	e031      	b.n	8000d04 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <HAL_SPI_MspInit+0xf4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d12c      	bne.n	8000d04 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_SPI_MspInit+0xec>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <HAL_SPI_MspInit+0xec>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_SPI_MspInit+0xec>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_SPI_MspInit+0xec>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_SPI_MspInit+0xec>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_SPI_MspInit+0xec>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000ce2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cf4:	2305      	movs	r3, #5
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4807      	ldr	r0, [pc, #28]	; (8000d1c <HAL_SPI_MspInit+0xf8>)
 8000d00:	f000 faee 	bl	80012e0 <HAL_GPIO_Init>
}
 8000d04:	bf00      	nop
 8000d06:	3730      	adds	r7, #48	; 0x30
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40013000 	.word	0x40013000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40003800 	.word	0x40003800
 8000d1c:	40020400 	.word	0x40020400

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbc:	f000 f966 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f001 ffd0 	bl	8002d98 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20010000 	.word	0x20010000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	200000b8 	.word	0x200000b8
 8000e2c:	200001e8 	.word	0x200001e8

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	2224      	movs	r2, #36	; 0x24
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 ffc2 	bl	8002dec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_TIM1_Init+0xa8>)
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <MX_TIM1_Init+0xac>)
 8000e74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_TIM1_Init+0xa8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_TIM1_Init+0xa8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <MX_TIM1_Init+0xa8>)
 8000e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_TIM1_Init+0xa8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_TIM1_Init+0xa8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_TIM1_Init+0xa8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_TIM1_Init+0xa8>)
 8000ec8:	f001 fa64 	bl	8002394 <HAL_TIM_Encoder_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000ed2:	f7ff fe35 	bl	8000b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <MX_TIM1_Init+0xa8>)
 8000ee4:	f001 fc30 	bl	8002748 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000eee:	f7ff fe27 	bl	8000b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3730      	adds	r7, #48	; 0x30
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000188 	.word	0x20000188
 8000f00:	40010000 	.word	0x40010000

08000f04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d12c      	bne.n	8000f80 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <HAL_TIM_Encoder_MspInit+0x88>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <HAL_TIM_Encoder_MspInit+0x88>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_TIM_Encoder_MspInit+0x88>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <HAL_TIM_Encoder_MspInit+0x88>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <HAL_TIM_Encoder_MspInit+0x88>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_TIM_Encoder_MspInit+0x88>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_S1_Pin|ENC_S2_Pin;
 8000f5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000f7c:	f000 f9b0 	bl	80012e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40010000 	.word	0x40010000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f9a:	490e      	ldr	r1, [pc, #56]	; (8000fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb0:	4c0b      	ldr	r4, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fbe:	f7ff ff37 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f001 feef 	bl	8002da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fc15 	bl	80007f4 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000fd8:	08004c24 	.word	0x08004c24
  ldr r2, =_sbss
 8000fdc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000fe0:	200001e4 	.word	0x200001e4

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <HAL_Init+0x40>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_Init+0x40>)
 8000ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_Init+0x40>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f931 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	200f      	movs	r0, #15
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fe80 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023c00 	.word	0x40023c00

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f93b 	bl	80012c6 <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 f911 	bl	800128e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000010 	.word	0x20000010
 8001084:	20000018 	.word	0x20000018
 8001088:	20000014 	.word	0x20000014

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000018 	.word	0x20000018
 80010b0:	200001d0 	.word	0x200001d0

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200001d0 	.word	0x200001d0

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff ffee 	bl	80010b4 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e4:	d005      	beq.n	80010f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_Delay+0x44>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010f2:	bf00      	nop
 80010f4:	f7ff ffde 	bl	80010b4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8f7      	bhi.n	80010f4 <HAL_Delay+0x28>
  {
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000018 	.word	0x20000018

08001114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001244:	d301      	bcc.n	800124a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001246:	2301      	movs	r3, #1
 8001248:	e00f      	b.n	800126a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <SysTick_Config+0x40>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001252:	210f      	movs	r1, #15
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f7ff ff8e 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SysTick_Config+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SysTick_Config+0x40>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff47 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a0:	f7ff ff5c 	bl	800115c <__NVIC_GetPriorityGrouping>
 80012a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	f7ff ff8e 	bl	80011cc <NVIC_EncodePriority>
 80012b0:	4602      	mov	r2, r0
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff5d 	bl	8001178 <__NVIC_SetPriority>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffb0 	bl	8001234 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	e159      	b.n	80015b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012fc:	2201      	movs	r2, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	429a      	cmp	r2, r3
 8001316:	f040 8148 	bne.w	80015aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d005      	beq.n	8001332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132e:	2b02      	cmp	r3, #2
 8001330:	d130      	bne.n	8001394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001368:	2201      	movs	r2, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	f003 0201 	and.w	r2, r3, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b03      	cmp	r3, #3
 800139e:	d017      	beq.n	80013d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d123      	bne.n	8001424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	08da      	lsrs	r2, r3, #3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3208      	adds	r2, #8
 80013e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	08da      	lsrs	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3208      	adds	r2, #8
 800141e:	69b9      	ldr	r1, [r7, #24]
 8001420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0203 	and.w	r2, r3, #3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80a2 	beq.w	80015aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b57      	ldr	r3, [pc, #348]	; (80015c8 <HAL_GPIO_Init+0x2e8>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a56      	ldr	r2, [pc, #344]	; (80015c8 <HAL_GPIO_Init+0x2e8>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b54      	ldr	r3, [pc, #336]	; (80015c8 <HAL_GPIO_Init+0x2e8>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001482:	4a52      	ldr	r2, [pc, #328]	; (80015cc <HAL_GPIO_Init+0x2ec>)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a49      	ldr	r2, [pc, #292]	; (80015d0 <HAL_GPIO_Init+0x2f0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d019      	beq.n	80014e2 <HAL_GPIO_Init+0x202>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a48      	ldr	r2, [pc, #288]	; (80015d4 <HAL_GPIO_Init+0x2f4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d013      	beq.n	80014de <HAL_GPIO_Init+0x1fe>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a47      	ldr	r2, [pc, #284]	; (80015d8 <HAL_GPIO_Init+0x2f8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00d      	beq.n	80014da <HAL_GPIO_Init+0x1fa>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a46      	ldr	r2, [pc, #280]	; (80015dc <HAL_GPIO_Init+0x2fc>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d007      	beq.n	80014d6 <HAL_GPIO_Init+0x1f6>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a45      	ldr	r2, [pc, #276]	; (80015e0 <HAL_GPIO_Init+0x300>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d101      	bne.n	80014d2 <HAL_GPIO_Init+0x1f2>
 80014ce:	2304      	movs	r3, #4
 80014d0:	e008      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014d2:	2307      	movs	r3, #7
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e004      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014da:	2302      	movs	r3, #2
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x204>
 80014e2:	2300      	movs	r3, #0
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	f002 0203 	and.w	r2, r2, #3
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	4093      	lsls	r3, r2
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f4:	4935      	ldr	r1, [pc, #212]	; (80015cc <HAL_GPIO_Init+0x2ec>)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001502:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <HAL_GPIO_Init+0x304>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001526:	4a2f      	ldr	r2, [pc, #188]	; (80015e4 <HAL_GPIO_Init+0x304>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800152c:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <HAL_GPIO_Init+0x304>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001550:	4a24      	ldr	r2, [pc, #144]	; (80015e4 <HAL_GPIO_Init+0x304>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001556:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <HAL_GPIO_Init+0x304>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800157a:	4a1a      	ldr	r2, [pc, #104]	; (80015e4 <HAL_GPIO_Init+0x304>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_GPIO_Init+0x304>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a4:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <HAL_GPIO_Init+0x304>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	2b0f      	cmp	r3, #15
 80015b4:	f67f aea2 	bls.w	80012fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3724      	adds	r7, #36	; 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40013800 	.word	0x40013800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020800 	.word	0x40020800
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40013c00 	.word	0x40013c00

080015e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	887b      	ldrh	r3, [r7, #2]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e001      	b.n	800160a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
 8001624:	4613      	mov	r3, r2
 8001626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001628:	787b      	ldrb	r3, [r7, #1]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001634:	e003      	b.n	800163e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	041a      	lsls	r2, r3, #16
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	619a      	str	r2, [r3, #24]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e264      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d075      	beq.n	8001756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800166a:	4ba3      	ldr	r3, [pc, #652]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b04      	cmp	r3, #4
 8001674:	d00c      	beq.n	8001690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001676:	4ba0      	ldr	r3, [pc, #640]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800167e:	2b08      	cmp	r3, #8
 8001680:	d112      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001682:	4b9d      	ldr	r3, [pc, #628]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800168e:	d10b      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	4b99      	ldr	r3, [pc, #612]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d05b      	beq.n	8001754 <HAL_RCC_OscConfig+0x108>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d157      	bne.n	8001754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e23f      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b0:	d106      	bne.n	80016c0 <HAL_RCC_OscConfig+0x74>
 80016b2:	4b91      	ldr	r3, [pc, #580]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a90      	ldr	r2, [pc, #576]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e01d      	b.n	80016fc <HAL_RCC_OscConfig+0xb0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x98>
 80016ca:	4b8b      	ldr	r3, [pc, #556]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a8a      	ldr	r2, [pc, #552]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a87      	ldr	r2, [pc, #540]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0xb0>
 80016e4:	4b84      	ldr	r3, [pc, #528]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a83      	ldr	r2, [pc, #524]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a80      	ldr	r2, [pc, #512]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80016f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d013      	beq.n	800172c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fcd6 	bl	80010b4 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fcd2 	bl	80010b4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e204      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b76      	ldr	r3, [pc, #472]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0xc0>
 800172a:	e014      	b.n	8001756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fcc2 	bl	80010b4 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fcbe 	bl	80010b4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1f0      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	4b6c      	ldr	r3, [pc, #432]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0xe8>
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d063      	beq.n	800182a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001762:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00b      	beq.n	8001786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800176e:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001776:	2b08      	cmp	r3, #8
 8001778:	d11c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177a:	4b5f      	ldr	r3, [pc, #380]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d116      	bne.n	80017b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	4b5c      	ldr	r3, [pc, #368]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x152>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e1c4      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179e:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4952      	ldr	r1, [pc, #328]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b2:	e03a      	b.n	800182a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017bc:	4b4f      	ldr	r3, [pc, #316]	; (80018fc <HAL_RCC_OscConfig+0x2b0>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff fc77 	bl	80010b4 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff fc73 	bl	80010b4 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e1a5      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4940      	ldr	r1, [pc, #256]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
 80017fc:	e015      	b.n	800182a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fe:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_OscConfig+0x2b0>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff fc56 	bl	80010b4 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180c:	f7ff fc52 	bl	80010b4 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e184      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d030      	beq.n	8001898 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d016      	beq.n	800186c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183e:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_RCC_OscConfig+0x2b4>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff fc36 	bl	80010b4 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff fc32 	bl	80010b4 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e164      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 8001860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x200>
 800186a:	e015      	b.n	8001898 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186c:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_RCC_OscConfig+0x2b4>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff fc1f 	bl	80010b4 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff fc1b 	bl	80010b4 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e14d      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 800188e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80a0 	beq.w	80019e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10f      	bne.n	80018d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018d2:	2301      	movs	r3, #1
 80018d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_OscConfig+0x2b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d121      	bne.n	8001926 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_RCC_OscConfig+0x2b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_RCC_OscConfig+0x2b8>)
 80018e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ee:	f7ff fbe1 	bl	80010b4 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	e011      	b.n	800191a <HAL_RCC_OscConfig+0x2ce>
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	42470000 	.word	0x42470000
 8001900:	42470e80 	.word	0x42470e80
 8001904:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001908:	f7ff fbd4 	bl	80010b4 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e106      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b85      	ldr	r3, [pc, #532]	; (8001b30 <HAL_RCC_OscConfig+0x4e4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d106      	bne.n	800193c <HAL_RCC_OscConfig+0x2f0>
 800192e:	4b81      	ldr	r3, [pc, #516]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	4a80      	ldr	r2, [pc, #512]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6713      	str	r3, [r2, #112]	; 0x70
 800193a:	e01c      	b.n	8001976 <HAL_RCC_OscConfig+0x32a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b05      	cmp	r3, #5
 8001942:	d10c      	bne.n	800195e <HAL_RCC_OscConfig+0x312>
 8001944:	4b7b      	ldr	r3, [pc, #492]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	4a7a      	ldr	r2, [pc, #488]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	6713      	str	r3, [r2, #112]	; 0x70
 8001950:	4b78      	ldr	r3, [pc, #480]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001954:	4a77      	ldr	r2, [pc, #476]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6713      	str	r3, [r2, #112]	; 0x70
 800195c:	e00b      	b.n	8001976 <HAL_RCC_OscConfig+0x32a>
 800195e:	4b75      	ldr	r3, [pc, #468]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a74      	ldr	r2, [pc, #464]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	4b72      	ldr	r3, [pc, #456]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	4a71      	ldr	r2, [pc, #452]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d015      	beq.n	80019aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff fb99 	bl	80010b4 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7ff fb95 	bl	80010b4 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0c5      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199c:	4b65      	ldr	r3, [pc, #404]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0ee      	beq.n	8001986 <HAL_RCC_OscConfig+0x33a>
 80019a8:	e014      	b.n	80019d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019aa:	f7ff fb83 	bl	80010b4 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff fb7f 	bl	80010b4 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0af      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	4b5a      	ldr	r3, [pc, #360]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1ee      	bne.n	80019b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d105      	bne.n	80019e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019da:	4b56      	ldr	r3, [pc, #344]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a55      	ldr	r2, [pc, #340]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 80019e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 809b 	beq.w	8001b26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d05c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d141      	bne.n	8001a88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_RCC_OscConfig+0x4ec>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fb53 	bl	80010b4 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff fb4f 	bl	80010b4 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e081      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a24:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69da      	ldr	r2, [r3, #28]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	019b      	lsls	r3, r3, #6
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	041b      	lsls	r3, r3, #16
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	061b      	lsls	r3, r3, #24
 8001a54:	4937      	ldr	r1, [pc, #220]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <HAL_RCC_OscConfig+0x4ec>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fb28 	bl	80010b4 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a68:	f7ff fb24 	bl	80010b4 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e056      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x41c>
 8001a86:	e04e      	b.n	8001b26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a88:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_RCC_OscConfig+0x4ec>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fb11 	bl	80010b4 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff fb0d 	bl	80010b4 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e03f      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x44a>
 8001ab4:	e037      	b.n	8001b26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e032      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <HAL_RCC_OscConfig+0x4e8>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d028      	beq.n	8001b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d121      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d11a      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001af2:	4013      	ands	r3, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001af8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d111      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	085b      	lsrs	r3, r3, #1
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40007000 	.word	0x40007000
 8001b34:	40023800 	.word	0x40023800
 8001b38:	42470060 	.word	0x42470060

08001b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0cc      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b68      	ldr	r3, [pc, #416]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d90c      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b65      	ldr	r3, [pc, #404]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b63      	ldr	r3, [pc, #396]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0b8      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d020      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b90:	4b59      	ldr	r3, [pc, #356]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba8:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4a52      	ldr	r2, [pc, #328]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb4:	4b50      	ldr	r3, [pc, #320]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	494d      	ldr	r1, [pc, #308]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d044      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d119      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e07f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d003      	beq.n	8001bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e06f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e067      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1a:	4b37      	ldr	r3, [pc, #220]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f023 0203 	bic.w	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4934      	ldr	r1, [pc, #208]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c2c:	f7ff fa42 	bl	80010b4 <HAL_GetTick>
 8001c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f7ff fa3e 	bl	80010b4 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e04f      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4a:	4b2b      	ldr	r3, [pc, #172]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 020c 	and.w	r2, r3, #12
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1eb      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d20c      	bcs.n	8001c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e032      	b.n	8001cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4916      	ldr	r1, [pc, #88]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	490e      	ldr	r1, [pc, #56]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cc2:	f000 f821 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	490a      	ldr	r1, [pc, #40]	; (8001cfc <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	5ccb      	ldrb	r3, [r1, r3]
 8001cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f9a2 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023c00 	.word	0x40023c00
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	08003690 	.word	0x08003690
 8001d00:	20000010 	.word	0x20000010
 8001d04:	20000014 	.word	0x20000014

08001d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d08:	b5b0      	push	{r4, r5, r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d0e:	2100      	movs	r1, #0
 8001d10:	6079      	str	r1, [r7, #4]
 8001d12:	2100      	movs	r1, #0
 8001d14:	60f9      	str	r1, [r7, #12]
 8001d16:	2100      	movs	r1, #0
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d1e:	4952      	ldr	r1, [pc, #328]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d20:	6889      	ldr	r1, [r1, #8]
 8001d22:	f001 010c 	and.w	r1, r1, #12
 8001d26:	2908      	cmp	r1, #8
 8001d28:	d00d      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x3e>
 8001d2a:	2908      	cmp	r1, #8
 8001d2c:	f200 8094 	bhi.w	8001e58 <HAL_RCC_GetSysClockFreq+0x150>
 8001d30:	2900      	cmp	r1, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_RCC_GetSysClockFreq+0x32>
 8001d34:	2904      	cmp	r1, #4
 8001d36:	d003      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x38>
 8001d38:	e08e      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d3a:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x164>)
 8001d3c:	60bb      	str	r3, [r7, #8]
       break;
 8001d3e:	e08e      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d40:	4b4b      	ldr	r3, [pc, #300]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d42:	60bb      	str	r3, [r7, #8]
      break;
 8001d44:	e08b      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d46:	4948      	ldr	r1, [pc, #288]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d48:	6849      	ldr	r1, [r1, #4]
 8001d4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001d4e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d50:	4945      	ldr	r1, [pc, #276]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d52:	6849      	ldr	r1, [r1, #4]
 8001d54:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001d58:	2900      	cmp	r1, #0
 8001d5a:	d024      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5c:	4942      	ldr	r1, [pc, #264]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d5e:	6849      	ldr	r1, [r1, #4]
 8001d60:	0989      	lsrs	r1, r1, #6
 8001d62:	4608      	mov	r0, r1
 8001d64:	f04f 0100 	mov.w	r1, #0
 8001d68:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001d6c:	f04f 0500 	mov.w	r5, #0
 8001d70:	ea00 0204 	and.w	r2, r0, r4
 8001d74:	ea01 0305 	and.w	r3, r1, r5
 8001d78:	493d      	ldr	r1, [pc, #244]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d7a:	fb01 f003 	mul.w	r0, r1, r3
 8001d7e:	2100      	movs	r1, #0
 8001d80:	fb01 f102 	mul.w	r1, r1, r2
 8001d84:	1844      	adds	r4, r0, r1
 8001d86:	493a      	ldr	r1, [pc, #232]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d88:	fba2 0101 	umull	r0, r1, r2, r1
 8001d8c:	1863      	adds	r3, r4, r1
 8001d8e:	4619      	mov	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f04f 0300 	mov.w	r3, #0
 8001d98:	f7fe fa72 	bl	8000280 <__aeabi_uldivmod>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4613      	mov	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	e04a      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da6:	4b30      	ldr	r3, [pc, #192]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	099b      	lsrs	r3, r3, #6
 8001dac:	461a      	mov	r2, r3
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	ea02 0400 	and.w	r4, r2, r0
 8001dbe:	ea03 0501 	and.w	r5, r3, r1
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	014b      	lsls	r3, r1, #5
 8001dd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dd4:	0142      	lsls	r2, r0, #5
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	1b00      	subs	r0, r0, r4
 8001ddc:	eb61 0105 	sbc.w	r1, r1, r5
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	018b      	lsls	r3, r1, #6
 8001dea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dee:	0182      	lsls	r2, r0, #6
 8001df0:	1a12      	subs	r2, r2, r0
 8001df2:	eb63 0301 	sbc.w	r3, r3, r1
 8001df6:	f04f 0000 	mov.w	r0, #0
 8001dfa:	f04f 0100 	mov.w	r1, #0
 8001dfe:	00d9      	lsls	r1, r3, #3
 8001e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e04:	00d0      	lsls	r0, r2, #3
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	1912      	adds	r2, r2, r4
 8001e0c:	eb45 0303 	adc.w	r3, r5, r3
 8001e10:	f04f 0000 	mov.w	r0, #0
 8001e14:	f04f 0100 	mov.w	r1, #0
 8001e18:	0299      	lsls	r1, r3, #10
 8001e1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e1e:	0290      	lsls	r0, r2, #10
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	f7fe fa26 	bl	8000280 <__aeabi_uldivmod>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4613      	mov	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	3301      	adds	r3, #1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	60bb      	str	r3, [r7, #8]
      break;
 8001e56:	e002      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x164>)
 8001e5a:	60bb      	str	r3, [r7, #8]
      break;
 8001e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bdb0      	pop	{r4, r5, r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	00f42400 	.word	0x00f42400
 8001e70:	017d7840 	.word	0x017d7840

08001e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e07b      	b.n	8001f7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d108      	bne.n	8001ea0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e96:	d009      	beq.n	8001eac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
 8001e9e:	e005      	b.n	8001eac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe feac 	bl	8000c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ee2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f30:	ea42 0103 	orr.w	r1, r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	0c1b      	lsrs	r3, r3, #16
 8001f4a:	f003 0104 	and.w	r1, r3, #4
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	f003 0210 	and.w	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b088      	sub	sp, #32
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_SPI_Transmit+0x22>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e126      	b.n	80021f6 <HAL_SPI_Transmit+0x270>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fb0:	f7ff f880 	bl	80010b4 <HAL_GetTick>
 8001fb4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d002      	beq.n	8001fcc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fca:	e10b      	b.n	80021e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <HAL_SPI_Transmit+0x52>
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fdc:	e102      	b.n	80021e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	88fa      	ldrh	r2, [r7, #6]
 8001ff6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	88fa      	ldrh	r2, [r7, #6]
 8001ffc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002024:	d10f      	bne.n	8002046 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002034:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002044:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002050:	2b40      	cmp	r3, #64	; 0x40
 8002052:	d007      	beq.n	8002064 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002062:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800206c:	d14b      	bne.n	8002106 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_SPI_Transmit+0xf6>
 8002076:	8afb      	ldrh	r3, [r7, #22]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d13e      	bne.n	80020fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	1c9a      	adds	r2, r3, #2
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020a0:	e02b      	b.n	80020fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d112      	bne.n	80020d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	881a      	ldrh	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	1c9a      	adds	r2, r3, #2
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80020d4:	e011      	b.n	80020fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020d6:	f7fe ffed 	bl	80010b4 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d803      	bhi.n	80020ee <HAL_SPI_Transmit+0x168>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d102      	bne.n	80020f4 <HAL_SPI_Transmit+0x16e>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020f8:	e074      	b.n	80021e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1ce      	bne.n	80020a2 <HAL_SPI_Transmit+0x11c>
 8002104:	e04c      	b.n	80021a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <HAL_SPI_Transmit+0x18e>
 800210e:	8afb      	ldrh	r3, [r7, #22]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d140      	bne.n	8002196 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	330c      	adds	r3, #12
 800211e:	7812      	ldrb	r2, [r2, #0]
 8002120:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002130:	b29b      	uxth	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800213a:	e02c      	b.n	8002196 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b02      	cmp	r3, #2
 8002148:	d113      	bne.n	8002172 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	330c      	adds	r3, #12
 8002154:	7812      	ldrb	r2, [r2, #0]
 8002156:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002170:	e011      	b.n	8002196 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002172:	f7fe ff9f 	bl	80010b4 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d803      	bhi.n	800218a <HAL_SPI_Transmit+0x204>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d102      	bne.n	8002190 <HAL_SPI_Transmit+0x20a>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d102      	bne.n	8002196 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002194:	e026      	b.n	80021e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1cd      	bne.n	800213c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	6839      	ldr	r1, [r7, #0]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f8b3 	bl	8002310 <SPI_EndRxTxTransaction>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10a      	bne.n	80021d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	77fb      	strb	r3, [r7, #31]
 80021e0:	e000      	b.n	80021e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80021e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	4613      	mov	r3, r2
 800220e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002210:	f7fe ff50 	bl	80010b4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	4413      	add	r3, r2
 800221e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002220:	f7fe ff48 	bl	80010b4 <HAL_GetTick>
 8002224:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002226:	4b39      	ldr	r3, [pc, #228]	; (800230c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	015b      	lsls	r3, r3, #5
 800222c:	0d1b      	lsrs	r3, r3, #20
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002236:	e054      	b.n	80022e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223e:	d050      	beq.n	80022e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002240:	f7fe ff38 	bl	80010b4 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	429a      	cmp	r2, r3
 800224e:	d902      	bls.n	8002256 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d13d      	bne.n	80022d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800226e:	d111      	bne.n	8002294 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002278:	d004      	beq.n	8002284 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002282:	d107      	bne.n	8002294 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229c:	d10f      	bne.n	80022be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e017      	b.n	8002302 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	3b01      	subs	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	4013      	ands	r3, r2
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	bf0c      	ite	eq
 80022f2:	2301      	moveq	r3, #1
 80022f4:	2300      	movne	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d19b      	bne.n	8002238 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000010 	.word	0x20000010

08002310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <SPI_EndRxTxTransaction+0x7c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1b      	ldr	r2, [pc, #108]	; (8002390 <SPI_EndRxTxTransaction+0x80>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	0d5b      	lsrs	r3, r3, #21
 8002328:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800233a:	d112      	bne.n	8002362 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2200      	movs	r2, #0
 8002344:	2180      	movs	r1, #128	; 0x80
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f7ff ff5a 	bl	8002200 <SPI_WaitFlagStateUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	f043 0220 	orr.w	r2, r3, #32
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e00f      	b.n	8002382 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	3b01      	subs	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002378:	2b80      	cmp	r3, #128	; 0x80
 800237a:	d0f2      	beq.n	8002362 <SPI_EndRxTxTransaction+0x52>
 800237c:	e000      	b.n	8002380 <SPI_EndRxTxTransaction+0x70>
        break;
 800237e:	bf00      	nop
  }

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000010 	.word	0x20000010
 8002390:	165e9f81 	.word	0x165e9f81

08002394 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e097      	b.n	80024d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d106      	bne.n	80023c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7fe fda1 	bl	8000f04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2202      	movs	r2, #2
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023d8:	f023 0307 	bic.w	r3, r3, #7
 80023dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3304      	adds	r3, #4
 80023e6:	4619      	mov	r1, r3
 80023e8:	4610      	mov	r0, r2
 80023ea:	f000 f907 	bl	80025fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	4313      	orrs	r3, r2
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002434:	f023 030c 	bic.w	r3, r3, #12
 8002438:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002440:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	4313      	orrs	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	011a      	lsls	r2, r3, #4
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	031b      	lsls	r3, r3, #12
 8002464:	4313      	orrs	r3, r2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002472:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800247a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	4313      	orrs	r3, r2
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002500:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002508:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d110      	bne.n	8002532 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d102      	bne.n	800251c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002516:	7b7b      	ldrb	r3, [r7, #13]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d001      	beq.n	8002520 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e069      	b.n	80025f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002530:	e031      	b.n	8002596 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b04      	cmp	r3, #4
 8002536:	d110      	bne.n	800255a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002538:	7bbb      	ldrb	r3, [r7, #14]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800253e:	7b3b      	ldrb	r3, [r7, #12]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d001      	beq.n	8002548 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e055      	b.n	80025f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002558:	e01d      	b.n	8002596 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d108      	bne.n	8002572 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002560:	7bbb      	ldrb	r3, [r7, #14]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d105      	bne.n	8002572 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002566:	7b7b      	ldrb	r3, [r7, #13]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d102      	bne.n	8002572 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800256c:	7b3b      	ldrb	r3, [r7, #12]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d001      	beq.n	8002576 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e03e      	b.n	80025f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2202      	movs	r2, #2
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2202      	movs	r2, #2
 8002582:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2202      	movs	r2, #2
 8002592:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_TIM_Encoder_Start+0xc4>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d008      	beq.n	80025b4 <HAL_TIM_Encoder_Start+0xd4>
 80025a2:	e00f      	b.n	80025c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2201      	movs	r2, #1
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 f8a5 	bl	80026fc <TIM_CCxChannelCmd>
      break;
 80025b2:	e016      	b.n	80025e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2201      	movs	r2, #1
 80025ba:	2104      	movs	r1, #4
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 f89d 	bl	80026fc <TIM_CCxChannelCmd>
      break;
 80025c2:	e00e      	b.n	80025e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2201      	movs	r2, #1
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f895 	bl	80026fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2201      	movs	r2, #1
 80025d8:	2104      	movs	r1, #4
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f88e 	bl	80026fc <TIM_CCxChannelCmd>
      break;
 80025e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a34      	ldr	r2, [pc, #208]	; (80026e0 <TIM_Base_SetConfig+0xe4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00f      	beq.n	8002634 <TIM_Base_SetConfig+0x38>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261a:	d00b      	beq.n	8002634 <TIM_Base_SetConfig+0x38>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a31      	ldr	r2, [pc, #196]	; (80026e4 <TIM_Base_SetConfig+0xe8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d007      	beq.n	8002634 <TIM_Base_SetConfig+0x38>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a30      	ldr	r2, [pc, #192]	; (80026e8 <TIM_Base_SetConfig+0xec>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d003      	beq.n	8002634 <TIM_Base_SetConfig+0x38>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a2f      	ldr	r2, [pc, #188]	; (80026ec <TIM_Base_SetConfig+0xf0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d108      	bne.n	8002646 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <TIM_Base_SetConfig+0xe4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d01b      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002654:	d017      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <TIM_Base_SetConfig+0xe8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <TIM_Base_SetConfig+0xec>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00f      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a20      	ldr	r2, [pc, #128]	; (80026ec <TIM_Base_SetConfig+0xf0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00b      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <TIM_Base_SetConfig+0xf4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <TIM_Base_SetConfig+0xf8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d003      	beq.n	8002686 <TIM_Base_SetConfig+0x8a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <TIM_Base_SetConfig+0xfc>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d108      	bne.n	8002698 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <TIM_Base_SetConfig+0xe4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d103      	bne.n	80026cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	615a      	str	r2, [r3, #20]
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40010000 	.word	0x40010000
 80026e4:	40000400 	.word	0x40000400
 80026e8:	40000800 	.word	0x40000800
 80026ec:	40000c00 	.word	0x40000c00
 80026f0:	40014000 	.word	0x40014000
 80026f4:	40014400 	.word	0x40014400
 80026f8:	40014800 	.word	0x40014800

080026fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2201      	movs	r2, #1
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a1a      	ldr	r2, [r3, #32]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	43db      	mvns	r3, r3
 800271e:	401a      	ands	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a1a      	ldr	r2, [r3, #32]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	431a      	orrs	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	621a      	str	r2, [r3, #32]
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800275c:	2302      	movs	r3, #2
 800275e:	e050      	b.n	8002802 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d018      	beq.n	80027d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ac:	d013      	beq.n	80027d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a18      	ldr	r2, [pc, #96]	; (8002814 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d00e      	beq.n	80027d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a16      	ldr	r2, [pc, #88]	; (8002818 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d009      	beq.n	80027d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a15      	ldr	r2, [pc, #84]	; (800281c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d004      	beq.n	80027d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a13      	ldr	r2, [pc, #76]	; (8002820 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10c      	bne.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40010000 	.word	0x40010000
 8002814:	40000400 	.word	0x40000400
 8002818:	40000800 	.word	0x40000800
 800281c:	40000c00 	.word	0x40000c00
 8002820:	40014000 	.word	0x40014000

08002824 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002828:	2200      	movs	r2, #0
 800282a:	2140      	movs	r1, #64	; 0x40
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <ST7735_Select+0x14>)
 800282e:	f7fe fef3 	bl	8001618 <HAL_GPIO_WritePin>
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40020400 	.word	0x40020400

0800283c <ST7735_Unselect>:

void ST7735_Unselect() {
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002840:	2201      	movs	r2, #1
 8002842:	2140      	movs	r1, #64	; 0x40
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <ST7735_Unselect+0x14>)
 8002846:	f7fe fee7 	bl	8001618 <HAL_GPIO_WritePin>
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40020400 	.word	0x40020400

08002854 <ST7735_Reset>:

static void ST7735_Reset() {
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002858:	2200      	movs	r2, #0
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	4806      	ldr	r0, [pc, #24]	; (8002878 <ST7735_Reset+0x24>)
 800285e:	f7fe fedb 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002862:	2005      	movs	r0, #5
 8002864:	f7fe fc32 	bl	80010cc <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002868:	2201      	movs	r2, #1
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	4802      	ldr	r0, [pc, #8]	; (8002878 <ST7735_Reset+0x24>)
 800286e:	f7fe fed3 	bl	8001618 <HAL_GPIO_WritePin>
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40020400 	.word	0x40020400

0800287c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002886:	2200      	movs	r2, #0
 8002888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800288c:	4806      	ldr	r0, [pc, #24]	; (80028a8 <ST7735_WriteCommand+0x2c>)
 800288e:	f7fe fec3 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002892:	1df9      	adds	r1, r7, #7
 8002894:	f04f 33ff 	mov.w	r3, #4294967295
 8002898:	2201      	movs	r2, #1
 800289a:	4804      	ldr	r0, [pc, #16]	; (80028ac <ST7735_WriteCommand+0x30>)
 800289c:	f7ff fb73 	bl	8001f86 <HAL_SPI_Transmit>
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40020400 	.word	0x40020400
 80028ac:	20000130 	.word	0x20000130

080028b0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80028ba:	2201      	movs	r2, #1
 80028bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c0:	4807      	ldr	r0, [pc, #28]	; (80028e0 <ST7735_WriteData+0x30>)
 80028c2:	f7fe fea9 	bl	8001618 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4804      	ldr	r0, [pc, #16]	; (80028e4 <ST7735_WriteData+0x34>)
 80028d2:	f7ff fb58 	bl	8001f86 <HAL_SPI_Transmit>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40020400 	.word	0x40020400
 80028e4:	20000130 	.word	0x20000130

080028e8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80028fa:	e034      	b.n	8002966 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8002906:	7afb      	ldrb	r3, [r7, #11]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ffb7 	bl	800287c <ST7735_WriteCommand>

        numArgs = *addr++;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	607a      	str	r2, [r7, #4]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002918:	7abb      	ldrb	r3, [r7, #10]
 800291a:	b29b      	uxth	r3, r3
 800291c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002920:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8002922:	7abb      	ldrb	r3, [r7, #10]
 8002924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002928:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800292a:	7abb      	ldrb	r3, [r7, #10]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002930:	7abb      	ldrb	r3, [r7, #10]
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ffbb 	bl	80028b0 <ST7735_WriteData>
            addr += numArgs;
 800293a:	7abb      	ldrb	r3, [r7, #10]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4413      	add	r3, r2
 8002940:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8002942:	89bb      	ldrh	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00e      	beq.n	8002966 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8002952:	89bb      	ldrh	r3, [r7, #12]
 8002954:	2bff      	cmp	r3, #255	; 0xff
 8002956:	d102      	bne.n	800295e <ST7735_ExecuteCommandList+0x76>
 8002958:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800295c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800295e:	89bb      	ldrh	r3, [r7, #12]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe fbb3 	bl	80010cc <HAL_Delay>
    while(numCommands--) {
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	1e5a      	subs	r2, r3, #1
 800296a:	73fa      	strb	r2, [r7, #15]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1c5      	bne.n	80028fc <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800297a:	b590      	push	{r4, r7, lr}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	4604      	mov	r4, r0
 8002982:	4608      	mov	r0, r1
 8002984:	4611      	mov	r1, r2
 8002986:	461a      	mov	r2, r3
 8002988:	4623      	mov	r3, r4
 800298a:	71fb      	strb	r3, [r7, #7]
 800298c:	4603      	mov	r3, r0
 800298e:	71bb      	strb	r3, [r7, #6]
 8002990:	460b      	mov	r3, r1
 8002992:	717b      	strb	r3, [r7, #5]
 8002994:	4613      	mov	r3, r2
 8002996:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002998:	202a      	movs	r0, #42	; 0x2a
 800299a:	f7ff ff6f 	bl	800287c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800299e:	2300      	movs	r3, #0
 80029a0:	733b      	strb	r3, [r7, #12]
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	737b      	strb	r3, [r7, #13]
 80029a6:	2300      	movs	r3, #0
 80029a8:	73bb      	strb	r3, [r7, #14]
 80029aa:	797b      	ldrb	r3, [r7, #5]
 80029ac:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	2104      	movs	r1, #4
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff7b 	bl	80028b0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80029ba:	202b      	movs	r0, #43	; 0x2b
 80029bc:	f7ff ff5e 	bl	800287c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80029c0:	79bb      	ldrb	r3, [r7, #6]
 80029c2:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80029c4:	793b      	ldrb	r3, [r7, #4]
 80029c6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	2104      	movs	r1, #4
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ff6e 	bl	80028b0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80029d4:	202c      	movs	r0, #44	; 0x2c
 80029d6:	f7ff ff51 	bl	800287c <ST7735_WriteCommand>
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd90      	pop	{r4, r7, pc}
	...

080029e4 <ST7735_Init>:

void ST7735_Init() {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
    ST7735_Select();
 80029e8:	f7ff ff1c 	bl	8002824 <ST7735_Select>
    ST7735_Reset();
 80029ec:	f7ff ff32 	bl	8002854 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80029f0:	4806      	ldr	r0, [pc, #24]	; (8002a0c <ST7735_Init+0x28>)
 80029f2:	f7ff ff79 	bl	80028e8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80029f6:	4806      	ldr	r0, [pc, #24]	; (8002a10 <ST7735_Init+0x2c>)
 80029f8:	f7ff ff76 	bl	80028e8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80029fc:	4805      	ldr	r0, [pc, #20]	; (8002a14 <ST7735_Init+0x30>)
 80029fe:	f7ff ff73 	bl	80028e8 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8002a02:	f7ff ff1b 	bl	800283c <ST7735_Unselect>
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	08004b68 	.word	0x08004b68
 8002a10:	08004ba4 	.word	0x08004ba4
 8002a14:	08004bb4 	.word	0x08004bb4

08002a18 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002a18:	b082      	sub	sp, #8
 8002a1a:	b590      	push	{r4, r7, lr}
 8002a1c:	b089      	sub	sp, #36	; 0x24
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
 8002a22:	4603      	mov	r3, r0
 8002a24:	80fb      	strh	r3, [r7, #6]
 8002a26:	460b      	mov	r3, r1
 8002a28:	80bb      	strh	r3, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	b2d8      	uxtb	r0, r3
 8002a32:	88bb      	ldrh	r3, [r7, #4]
 8002a34:	b2d9      	uxtb	r1, r3
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002a3e:	4413      	add	r3, r2
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b2dc      	uxtb	r4, r3
 8002a46:	88bb      	ldrh	r3, [r7, #4]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002a4e:	4413      	add	r3, r2
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4622      	mov	r2, r4
 8002a58:	f7ff ff8f 	bl	800297a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	e043      	b.n	8002aea <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8002a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a64:	78fb      	ldrb	r3, [r7, #3]
 8002a66:	3b20      	subs	r3, #32
 8002a68:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4619      	mov	r1, r3
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	440b      	add	r3, r1
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	e029      	b.n	8002ad8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00e      	beq.n	8002ab2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002a94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	743b      	strb	r3, [r7, #16]
 8002a9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8002aa4:	f107 0310 	add.w	r3, r7, #16
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff00 	bl	80028b0 <ST7735_WriteData>
 8002ab0:	e00f      	b.n	8002ad2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002ab2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	733b      	strb	r3, [r7, #12]
 8002abe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8002ac6:	f107 030c 	add.w	r3, r7, #12
 8002aca:	2102      	movs	r1, #2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff feef 	bl	80028b0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	61bb      	str	r3, [r7, #24]
 8002ad8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002adc:	461a      	mov	r2, r3
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d3cf      	bcc.n	8002a84 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002aee:	461a      	mov	r2, r3
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d3b5      	bcc.n	8002a62 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	3724      	adds	r7, #36	; 0x24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002b02:	b002      	add	sp, #8
 8002b04:	4770      	bx	lr

08002b06 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002b06:	b082      	sub	sp, #8
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af04      	add	r7, sp, #16
 8002b0e:	603a      	str	r2, [r7, #0]
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
 8002b16:	460b      	mov	r3, r1
 8002b18:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002b1a:	f7ff fe83 	bl	8002824 <ST7735_Select>

    while(*str) {
 8002b1e:	e02d      	b.n	8002b7c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	7d3a      	ldrb	r2, [r7, #20]
 8002b24:	4413      	add	r3, r2
 8002b26:	2b9f      	cmp	r3, #159	; 0x9f
 8002b28:	dd13      	ble.n	8002b52 <ST7735_WriteString+0x4c>
            x = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002b2e:	7d7b      	ldrb	r3, [r7, #21]
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	88bb      	ldrh	r3, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002b38:	88bb      	ldrh	r3, [r7, #4]
 8002b3a:	7d7a      	ldrb	r2, [r7, #21]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b40:	dc21      	bgt.n	8002b86 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d103      	bne.n	8002b52 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	603b      	str	r3, [r7, #0]
                continue;
 8002b50:	e014      	b.n	8002b7c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	88b9      	ldrh	r1, [r7, #4]
 8002b58:	88f8      	ldrh	r0, [r7, #6]
 8002b5a:	8c3b      	ldrh	r3, [r7, #32]
 8002b5c:	9302      	str	r3, [sp, #8]
 8002b5e:	8bbb      	ldrh	r3, [r7, #28]
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f7ff ff56 	bl	8002a18 <ST7735_WriteChar>
        x += font.width;
 8002b6c:	7d3b      	ldrb	r3, [r7, #20]
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	4413      	add	r3, r2
 8002b74:	80fb      	strh	r3, [r7, #6]
        str++;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1cd      	bne.n	8002b20 <ST7735_WriteString+0x1a>
 8002b84:	e000      	b.n	8002b88 <ST7735_WriteString+0x82>
                break;
 8002b86:	bf00      	nop
    }

    ST7735_Unselect();
 8002b88:	f7ff fe58 	bl	800283c <ST7735_Unselect>
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b96:	b002      	add	sp, #8
 8002b98:	4770      	bx	lr

08002b9a <ST7735_WriteStringWithSelect>:


void ST7735_WriteStringWithSelect(uint16_t x, uint16_t y, const char* str, FontDef font, uint8_t select_pos, ColorDef color) {
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	b590      	push	{r4, r7, lr}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af04      	add	r7, sp, #16
 8002ba2:	603a      	str	r2, [r7, #0]
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80fb      	strh	r3, [r7, #6]
 8002baa:	460b      	mov	r3, r1
 8002bac:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002bae:	f7ff fe39 	bl	8002824 <ST7735_Select>

    uint8_t pos_counter = 6;
 8002bb2:	2306      	movs	r3, #6
 8002bb4:	73fb      	strb	r3, [r7, #15]

    while(*str) {
 8002bb6:	e059      	b.n	8002c6c <ST7735_WriteStringWithSelect+0xd2>
        if (x + font.width >= ST7735_WIDTH) {
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002bbe:	4413      	add	r3, r2
 8002bc0:	2b9f      	cmp	r3, #159	; 0x9f
 8002bc2:	dd15      	ble.n	8002bf0 <ST7735_WriteStringWithSelect+0x56>
            x = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002bc8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	88bb      	ldrh	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	80bb      	strh	r3, [r7, #4]
            if (y + font.height >= ST7735_HEIGHT) {
 8002bd4:	88bb      	ldrh	r3, [r7, #4]
 8002bd6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002bda:	4413      	add	r3, r2
 8002bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8002bde:	dc4a      	bgt.n	8002c76 <ST7735_WriteStringWithSelect+0xdc>
                break;
            }

            if(*str == ' ') {
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d103      	bne.n	8002bf0 <ST7735_WriteStringWithSelect+0x56>
                // skip spaces in the beginning of the new line
                str++;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	603b      	str	r3, [r7, #0]
                continue;
 8002bee:	e03d      	b.n	8002c6c <ST7735_WriteStringWithSelect+0xd2>
            }
        }
        if (pos_counter == select_pos && (*str >= '0' && *str <= '9'))
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d116      	bne.n	8002c28 <ST7735_WriteStringWithSelect+0x8e>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b2f      	cmp	r3, #47	; 0x2f
 8002c00:	d912      	bls.n	8002c28 <ST7735_WriteStringWithSelect+0x8e>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b39      	cmp	r3, #57	; 0x39
 8002c08:	d80e      	bhi.n	8002c28 <ST7735_WriteStringWithSelect+0x8e>
        	ST7735_WriteChar(x, y, *str, font, color.selectText, color.selectBackground);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	781c      	ldrb	r4, [r3, #0]
 8002c0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002c10:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002c12:	88b9      	ldrh	r1, [r7, #4]
 8002c14:	88f8      	ldrh	r0, [r7, #6]
 8002c16:	9202      	str	r2, [sp, #8]
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	4622      	mov	r2, r4
 8002c22:	f7ff fef9 	bl	8002a18 <ST7735_WriteChar>
 8002c26:	e00d      	b.n	8002c44 <ST7735_WriteStringWithSelect+0xaa>
        else
        	ST7735_WriteChar(x, y, *str, font, color.mainText, color.mainBackground);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	781c      	ldrb	r4, [r3, #0]
 8002c2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002c2e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002c30:	88b9      	ldrh	r1, [r7, #4]
 8002c32:	88f8      	ldrh	r0, [r7, #6]
 8002c34:	9202      	str	r2, [sp, #8]
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	4622      	mov	r2, r4
 8002c40:	f7ff feea 	bl	8002a18 <ST7735_WriteChar>

        if (*str >= '0' && *str <= '9') pos_counter--;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b2f      	cmp	r3, #47	; 0x2f
 8002c4a:	d906      	bls.n	8002c5a <ST7735_WriteStringWithSelect+0xc0>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b39      	cmp	r3, #57	; 0x39
 8002c52:	d802      	bhi.n	8002c5a <ST7735_WriteStringWithSelect+0xc0>
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]

        x += font.width;
 8002c5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	88fb      	ldrh	r3, [r7, #6]
 8002c62:	4413      	add	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]
        str++;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1a1      	bne.n	8002bb8 <ST7735_WriteStringWithSelect+0x1e>
 8002c74:	e000      	b.n	8002c78 <ST7735_WriteStringWithSelect+0xde>
                break;
 8002c76:	bf00      	nop
    }

    ST7735_Unselect();
 8002c78:	f7ff fde0 	bl	800283c <ST7735_Unselect>
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c86:	b002      	add	sp, #8
 8002c88:	4770      	bx	lr
	...

08002c8c <ST7735_FillRectangle>:


void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4604      	mov	r4, r0
 8002c94:	4608      	mov	r0, r1
 8002c96:	4611      	mov	r1, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	80fb      	strh	r3, [r7, #6]
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80bb      	strh	r3, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	807b      	strh	r3, [r7, #2]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	2b9f      	cmp	r3, #159	; 0x9f
 8002cae:	d858      	bhi.n	8002d62 <ST7735_FillRectangle+0xd6>
 8002cb0:	88bb      	ldrh	r3, [r7, #4]
 8002cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8002cb4:	d855      	bhi.n	8002d62 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002cb6:	88fa      	ldrh	r2, [r7, #6]
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	4413      	add	r3, r2
 8002cbc:	2ba0      	cmp	r3, #160	; 0xa0
 8002cbe:	dd03      	ble.n	8002cc8 <ST7735_FillRectangle+0x3c>
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002cc6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002cc8:	88ba      	ldrh	r2, [r7, #4]
 8002cca:	883b      	ldrh	r3, [r7, #0]
 8002ccc:	4413      	add	r3, r2
 8002cce:	2b80      	cmp	r3, #128	; 0x80
 8002cd0:	dd03      	ble.n	8002cda <ST7735_FillRectangle+0x4e>
 8002cd2:	88bb      	ldrh	r3, [r7, #4]
 8002cd4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002cd8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002cda:	f7ff fda3 	bl	8002824 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	b2d8      	uxtb	r0, r3
 8002ce2:	88bb      	ldrh	r3, [r7, #4]
 8002ce4:	b2d9      	uxtb	r1, r3
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b2dc      	uxtb	r4, r3
 8002cf6:	88bb      	ldrh	r3, [r7, #4]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	883b      	ldrh	r3, [r7, #0]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	4622      	mov	r2, r4
 8002d08:	f7ff fe37 	bl	800297a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002d0c:	8c3b      	ldrh	r3, [r7, #32]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	733b      	strb	r3, [r7, #12]
 8002d16:	8c3b      	ldrh	r3, [r7, #32]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d22:	4812      	ldr	r0, [pc, #72]	; (8002d6c <ST7735_FillRectangle+0xe0>)
 8002d24:	f7fe fc78 	bl	8001618 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002d28:	883b      	ldrh	r3, [r7, #0]
 8002d2a:	80bb      	strh	r3, [r7, #4]
 8002d2c:	e013      	b.n	8002d56 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8002d2e:	887b      	ldrh	r3, [r7, #2]
 8002d30:	80fb      	strh	r3, [r7, #6]
 8002d32:	e00a      	b.n	8002d4a <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002d34:	f107 010c 	add.w	r1, r7, #12
 8002d38:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	480c      	ldr	r0, [pc, #48]	; (8002d70 <ST7735_FillRectangle+0xe4>)
 8002d40:	f7ff f921 	bl	8001f86 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	80fb      	strh	r3, [r7, #6]
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f1      	bne.n	8002d34 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8002d50:	88bb      	ldrh	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	80bb      	strh	r3, [r7, #4]
 8002d56:	88bb      	ldrh	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e8      	bne.n	8002d2e <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8002d5c:	f7ff fd6e 	bl	800283c <ST7735_Unselect>
 8002d60:	e000      	b.n	8002d64 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002d62:	bf00      	nop
}
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd90      	pop	{r4, r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	20000130 	.word	0x20000130

08002d74 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	22a0      	movs	r2, #160	; 0xa0
 8002d86:	2100      	movs	r1, #0
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7ff ff7f 	bl	8002c8c <ST7735_FillRectangle>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <__errno>:
 8002d98:	4b01      	ldr	r3, [pc, #4]	; (8002da0 <__errno+0x8>)
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	2000002c 	.word	0x2000002c

08002da4 <__libc_init_array>:
 8002da4:	b570      	push	{r4, r5, r6, lr}
 8002da6:	4d0d      	ldr	r5, [pc, #52]	; (8002ddc <__libc_init_array+0x38>)
 8002da8:	4c0d      	ldr	r4, [pc, #52]	; (8002de0 <__libc_init_array+0x3c>)
 8002daa:	1b64      	subs	r4, r4, r5
 8002dac:	10a4      	asrs	r4, r4, #2
 8002dae:	2600      	movs	r6, #0
 8002db0:	42a6      	cmp	r6, r4
 8002db2:	d109      	bne.n	8002dc8 <__libc_init_array+0x24>
 8002db4:	4d0b      	ldr	r5, [pc, #44]	; (8002de4 <__libc_init_array+0x40>)
 8002db6:	4c0c      	ldr	r4, [pc, #48]	; (8002de8 <__libc_init_array+0x44>)
 8002db8:	f000 fc4e 	bl	8003658 <_init>
 8002dbc:	1b64      	subs	r4, r4, r5
 8002dbe:	10a4      	asrs	r4, r4, #2
 8002dc0:	2600      	movs	r6, #0
 8002dc2:	42a6      	cmp	r6, r4
 8002dc4:	d105      	bne.n	8002dd2 <__libc_init_array+0x2e>
 8002dc6:	bd70      	pop	{r4, r5, r6, pc}
 8002dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dcc:	4798      	blx	r3
 8002dce:	3601      	adds	r6, #1
 8002dd0:	e7ee      	b.n	8002db0 <__libc_init_array+0xc>
 8002dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd6:	4798      	blx	r3
 8002dd8:	3601      	adds	r6, #1
 8002dda:	e7f2      	b.n	8002dc2 <__libc_init_array+0x1e>
 8002ddc:	08004c1c 	.word	0x08004c1c
 8002de0:	08004c1c 	.word	0x08004c1c
 8002de4:	08004c1c 	.word	0x08004c1c
 8002de8:	08004c20 	.word	0x08004c20

08002dec <memset>:
 8002dec:	4402      	add	r2, r0
 8002dee:	4603      	mov	r3, r0
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d100      	bne.n	8002df6 <memset+0xa>
 8002df4:	4770      	bx	lr
 8002df6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dfa:	e7f9      	b.n	8002df0 <memset+0x4>

08002dfc <siprintf>:
 8002dfc:	b40e      	push	{r1, r2, r3}
 8002dfe:	b500      	push	{lr}
 8002e00:	b09c      	sub	sp, #112	; 0x70
 8002e02:	ab1d      	add	r3, sp, #116	; 0x74
 8002e04:	9002      	str	r0, [sp, #8]
 8002e06:	9006      	str	r0, [sp, #24]
 8002e08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e0c:	4809      	ldr	r0, [pc, #36]	; (8002e34 <siprintf+0x38>)
 8002e0e:	9107      	str	r1, [sp, #28]
 8002e10:	9104      	str	r1, [sp, #16]
 8002e12:	4909      	ldr	r1, [pc, #36]	; (8002e38 <siprintf+0x3c>)
 8002e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e18:	9105      	str	r1, [sp, #20]
 8002e1a:	6800      	ldr	r0, [r0, #0]
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	a902      	add	r1, sp, #8
 8002e20:	f000 f868 	bl	8002ef4 <_svfiprintf_r>
 8002e24:	9b02      	ldr	r3, [sp, #8]
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	b01c      	add	sp, #112	; 0x70
 8002e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e30:	b003      	add	sp, #12
 8002e32:	4770      	bx	lr
 8002e34:	2000002c 	.word	0x2000002c
 8002e38:	ffff0208 	.word	0xffff0208

08002e3c <__ssputs_r>:
 8002e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e40:	688e      	ldr	r6, [r1, #8]
 8002e42:	429e      	cmp	r6, r3
 8002e44:	4682      	mov	sl, r0
 8002e46:	460c      	mov	r4, r1
 8002e48:	4690      	mov	r8, r2
 8002e4a:	461f      	mov	r7, r3
 8002e4c:	d838      	bhi.n	8002ec0 <__ssputs_r+0x84>
 8002e4e:	898a      	ldrh	r2, [r1, #12]
 8002e50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e54:	d032      	beq.n	8002ebc <__ssputs_r+0x80>
 8002e56:	6825      	ldr	r5, [r4, #0]
 8002e58:	6909      	ldr	r1, [r1, #16]
 8002e5a:	eba5 0901 	sub.w	r9, r5, r1
 8002e5e:	6965      	ldr	r5, [r4, #20]
 8002e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e68:	3301      	adds	r3, #1
 8002e6a:	444b      	add	r3, r9
 8002e6c:	106d      	asrs	r5, r5, #1
 8002e6e:	429d      	cmp	r5, r3
 8002e70:	bf38      	it	cc
 8002e72:	461d      	movcc	r5, r3
 8002e74:	0553      	lsls	r3, r2, #21
 8002e76:	d531      	bpl.n	8002edc <__ssputs_r+0xa0>
 8002e78:	4629      	mov	r1, r5
 8002e7a:	f000 fb47 	bl	800350c <_malloc_r>
 8002e7e:	4606      	mov	r6, r0
 8002e80:	b950      	cbnz	r0, 8002e98 <__ssputs_r+0x5c>
 8002e82:	230c      	movs	r3, #12
 8002e84:	f8ca 3000 	str.w	r3, [sl]
 8002e88:	89a3      	ldrh	r3, [r4, #12]
 8002e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e8e:	81a3      	strh	r3, [r4, #12]
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295
 8002e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e98:	6921      	ldr	r1, [r4, #16]
 8002e9a:	464a      	mov	r2, r9
 8002e9c:	f000 fabe 	bl	800341c <memcpy>
 8002ea0:	89a3      	ldrh	r3, [r4, #12]
 8002ea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eaa:	81a3      	strh	r3, [r4, #12]
 8002eac:	6126      	str	r6, [r4, #16]
 8002eae:	6165      	str	r5, [r4, #20]
 8002eb0:	444e      	add	r6, r9
 8002eb2:	eba5 0509 	sub.w	r5, r5, r9
 8002eb6:	6026      	str	r6, [r4, #0]
 8002eb8:	60a5      	str	r5, [r4, #8]
 8002eba:	463e      	mov	r6, r7
 8002ebc:	42be      	cmp	r6, r7
 8002ebe:	d900      	bls.n	8002ec2 <__ssputs_r+0x86>
 8002ec0:	463e      	mov	r6, r7
 8002ec2:	4632      	mov	r2, r6
 8002ec4:	6820      	ldr	r0, [r4, #0]
 8002ec6:	4641      	mov	r1, r8
 8002ec8:	f000 fab6 	bl	8003438 <memmove>
 8002ecc:	68a3      	ldr	r3, [r4, #8]
 8002ece:	6822      	ldr	r2, [r4, #0]
 8002ed0:	1b9b      	subs	r3, r3, r6
 8002ed2:	4432      	add	r2, r6
 8002ed4:	60a3      	str	r3, [r4, #8]
 8002ed6:	6022      	str	r2, [r4, #0]
 8002ed8:	2000      	movs	r0, #0
 8002eda:	e7db      	b.n	8002e94 <__ssputs_r+0x58>
 8002edc:	462a      	mov	r2, r5
 8002ede:	f000 fb6f 	bl	80035c0 <_realloc_r>
 8002ee2:	4606      	mov	r6, r0
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d1e1      	bne.n	8002eac <__ssputs_r+0x70>
 8002ee8:	6921      	ldr	r1, [r4, #16]
 8002eea:	4650      	mov	r0, sl
 8002eec:	f000 fabe 	bl	800346c <_free_r>
 8002ef0:	e7c7      	b.n	8002e82 <__ssputs_r+0x46>
	...

08002ef4 <_svfiprintf_r>:
 8002ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ef8:	4698      	mov	r8, r3
 8002efa:	898b      	ldrh	r3, [r1, #12]
 8002efc:	061b      	lsls	r3, r3, #24
 8002efe:	b09d      	sub	sp, #116	; 0x74
 8002f00:	4607      	mov	r7, r0
 8002f02:	460d      	mov	r5, r1
 8002f04:	4614      	mov	r4, r2
 8002f06:	d50e      	bpl.n	8002f26 <_svfiprintf_r+0x32>
 8002f08:	690b      	ldr	r3, [r1, #16]
 8002f0a:	b963      	cbnz	r3, 8002f26 <_svfiprintf_r+0x32>
 8002f0c:	2140      	movs	r1, #64	; 0x40
 8002f0e:	f000 fafd 	bl	800350c <_malloc_r>
 8002f12:	6028      	str	r0, [r5, #0]
 8002f14:	6128      	str	r0, [r5, #16]
 8002f16:	b920      	cbnz	r0, 8002f22 <_svfiprintf_r+0x2e>
 8002f18:	230c      	movs	r3, #12
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f20:	e0d1      	b.n	80030c6 <_svfiprintf_r+0x1d2>
 8002f22:	2340      	movs	r3, #64	; 0x40
 8002f24:	616b      	str	r3, [r5, #20]
 8002f26:	2300      	movs	r3, #0
 8002f28:	9309      	str	r3, [sp, #36]	; 0x24
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f30:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f34:	2330      	movs	r3, #48	; 0x30
 8002f36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80030e0 <_svfiprintf_r+0x1ec>
 8002f3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f3e:	f04f 0901 	mov.w	r9, #1
 8002f42:	4623      	mov	r3, r4
 8002f44:	469a      	mov	sl, r3
 8002f46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f4a:	b10a      	cbz	r2, 8002f50 <_svfiprintf_r+0x5c>
 8002f4c:	2a25      	cmp	r2, #37	; 0x25
 8002f4e:	d1f9      	bne.n	8002f44 <_svfiprintf_r+0x50>
 8002f50:	ebba 0b04 	subs.w	fp, sl, r4
 8002f54:	d00b      	beq.n	8002f6e <_svfiprintf_r+0x7a>
 8002f56:	465b      	mov	r3, fp
 8002f58:	4622      	mov	r2, r4
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	4638      	mov	r0, r7
 8002f5e:	f7ff ff6d 	bl	8002e3c <__ssputs_r>
 8002f62:	3001      	adds	r0, #1
 8002f64:	f000 80aa 	beq.w	80030bc <_svfiprintf_r+0x1c8>
 8002f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f6a:	445a      	add	r2, fp
 8002f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8002f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80a2 	beq.w	80030bc <_svfiprintf_r+0x1c8>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f82:	f10a 0a01 	add.w	sl, sl, #1
 8002f86:	9304      	str	r3, [sp, #16]
 8002f88:	9307      	str	r3, [sp, #28]
 8002f8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f8e:	931a      	str	r3, [sp, #104]	; 0x68
 8002f90:	4654      	mov	r4, sl
 8002f92:	2205      	movs	r2, #5
 8002f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f98:	4851      	ldr	r0, [pc, #324]	; (80030e0 <_svfiprintf_r+0x1ec>)
 8002f9a:	f7fd f921 	bl	80001e0 <memchr>
 8002f9e:	9a04      	ldr	r2, [sp, #16]
 8002fa0:	b9d8      	cbnz	r0, 8002fda <_svfiprintf_r+0xe6>
 8002fa2:	06d0      	lsls	r0, r2, #27
 8002fa4:	bf44      	itt	mi
 8002fa6:	2320      	movmi	r3, #32
 8002fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fac:	0711      	lsls	r1, r2, #28
 8002fae:	bf44      	itt	mi
 8002fb0:	232b      	movmi	r3, #43	; 0x2b
 8002fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8002fba:	2b2a      	cmp	r3, #42	; 0x2a
 8002fbc:	d015      	beq.n	8002fea <_svfiprintf_r+0xf6>
 8002fbe:	9a07      	ldr	r2, [sp, #28]
 8002fc0:	4654      	mov	r4, sl
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f04f 0c0a 	mov.w	ip, #10
 8002fc8:	4621      	mov	r1, r4
 8002fca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fce:	3b30      	subs	r3, #48	; 0x30
 8002fd0:	2b09      	cmp	r3, #9
 8002fd2:	d94e      	bls.n	8003072 <_svfiprintf_r+0x17e>
 8002fd4:	b1b0      	cbz	r0, 8003004 <_svfiprintf_r+0x110>
 8002fd6:	9207      	str	r2, [sp, #28]
 8002fd8:	e014      	b.n	8003004 <_svfiprintf_r+0x110>
 8002fda:	eba0 0308 	sub.w	r3, r0, r8
 8002fde:	fa09 f303 	lsl.w	r3, r9, r3
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	9304      	str	r3, [sp, #16]
 8002fe6:	46a2      	mov	sl, r4
 8002fe8:	e7d2      	b.n	8002f90 <_svfiprintf_r+0x9c>
 8002fea:	9b03      	ldr	r3, [sp, #12]
 8002fec:	1d19      	adds	r1, r3, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	9103      	str	r1, [sp, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bfbb      	ittet	lt
 8002ff6:	425b      	neglt	r3, r3
 8002ff8:	f042 0202 	orrlt.w	r2, r2, #2
 8002ffc:	9307      	strge	r3, [sp, #28]
 8002ffe:	9307      	strlt	r3, [sp, #28]
 8003000:	bfb8      	it	lt
 8003002:	9204      	strlt	r2, [sp, #16]
 8003004:	7823      	ldrb	r3, [r4, #0]
 8003006:	2b2e      	cmp	r3, #46	; 0x2e
 8003008:	d10c      	bne.n	8003024 <_svfiprintf_r+0x130>
 800300a:	7863      	ldrb	r3, [r4, #1]
 800300c:	2b2a      	cmp	r3, #42	; 0x2a
 800300e:	d135      	bne.n	800307c <_svfiprintf_r+0x188>
 8003010:	9b03      	ldr	r3, [sp, #12]
 8003012:	1d1a      	adds	r2, r3, #4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	9203      	str	r2, [sp, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	bfb8      	it	lt
 800301c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003020:	3402      	adds	r4, #2
 8003022:	9305      	str	r3, [sp, #20]
 8003024:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80030f0 <_svfiprintf_r+0x1fc>
 8003028:	7821      	ldrb	r1, [r4, #0]
 800302a:	2203      	movs	r2, #3
 800302c:	4650      	mov	r0, sl
 800302e:	f7fd f8d7 	bl	80001e0 <memchr>
 8003032:	b140      	cbz	r0, 8003046 <_svfiprintf_r+0x152>
 8003034:	2340      	movs	r3, #64	; 0x40
 8003036:	eba0 000a 	sub.w	r0, r0, sl
 800303a:	fa03 f000 	lsl.w	r0, r3, r0
 800303e:	9b04      	ldr	r3, [sp, #16]
 8003040:	4303      	orrs	r3, r0
 8003042:	3401      	adds	r4, #1
 8003044:	9304      	str	r3, [sp, #16]
 8003046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800304a:	4826      	ldr	r0, [pc, #152]	; (80030e4 <_svfiprintf_r+0x1f0>)
 800304c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003050:	2206      	movs	r2, #6
 8003052:	f7fd f8c5 	bl	80001e0 <memchr>
 8003056:	2800      	cmp	r0, #0
 8003058:	d038      	beq.n	80030cc <_svfiprintf_r+0x1d8>
 800305a:	4b23      	ldr	r3, [pc, #140]	; (80030e8 <_svfiprintf_r+0x1f4>)
 800305c:	bb1b      	cbnz	r3, 80030a6 <_svfiprintf_r+0x1b2>
 800305e:	9b03      	ldr	r3, [sp, #12]
 8003060:	3307      	adds	r3, #7
 8003062:	f023 0307 	bic.w	r3, r3, #7
 8003066:	3308      	adds	r3, #8
 8003068:	9303      	str	r3, [sp, #12]
 800306a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800306c:	4433      	add	r3, r6
 800306e:	9309      	str	r3, [sp, #36]	; 0x24
 8003070:	e767      	b.n	8002f42 <_svfiprintf_r+0x4e>
 8003072:	fb0c 3202 	mla	r2, ip, r2, r3
 8003076:	460c      	mov	r4, r1
 8003078:	2001      	movs	r0, #1
 800307a:	e7a5      	b.n	8002fc8 <_svfiprintf_r+0xd4>
 800307c:	2300      	movs	r3, #0
 800307e:	3401      	adds	r4, #1
 8003080:	9305      	str	r3, [sp, #20]
 8003082:	4619      	mov	r1, r3
 8003084:	f04f 0c0a 	mov.w	ip, #10
 8003088:	4620      	mov	r0, r4
 800308a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800308e:	3a30      	subs	r2, #48	; 0x30
 8003090:	2a09      	cmp	r2, #9
 8003092:	d903      	bls.n	800309c <_svfiprintf_r+0x1a8>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0c5      	beq.n	8003024 <_svfiprintf_r+0x130>
 8003098:	9105      	str	r1, [sp, #20]
 800309a:	e7c3      	b.n	8003024 <_svfiprintf_r+0x130>
 800309c:	fb0c 2101 	mla	r1, ip, r1, r2
 80030a0:	4604      	mov	r4, r0
 80030a2:	2301      	movs	r3, #1
 80030a4:	e7f0      	b.n	8003088 <_svfiprintf_r+0x194>
 80030a6:	ab03      	add	r3, sp, #12
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	462a      	mov	r2, r5
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <_svfiprintf_r+0x1f8>)
 80030ae:	a904      	add	r1, sp, #16
 80030b0:	4638      	mov	r0, r7
 80030b2:	f3af 8000 	nop.w
 80030b6:	1c42      	adds	r2, r0, #1
 80030b8:	4606      	mov	r6, r0
 80030ba:	d1d6      	bne.n	800306a <_svfiprintf_r+0x176>
 80030bc:	89ab      	ldrh	r3, [r5, #12]
 80030be:	065b      	lsls	r3, r3, #25
 80030c0:	f53f af2c 	bmi.w	8002f1c <_svfiprintf_r+0x28>
 80030c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030c6:	b01d      	add	sp, #116	; 0x74
 80030c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030cc:	ab03      	add	r3, sp, #12
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	462a      	mov	r2, r5
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <_svfiprintf_r+0x1f8>)
 80030d4:	a904      	add	r1, sp, #16
 80030d6:	4638      	mov	r0, r7
 80030d8:	f000 f87a 	bl	80031d0 <_printf_i>
 80030dc:	e7eb      	b.n	80030b6 <_svfiprintf_r+0x1c2>
 80030de:	bf00      	nop
 80030e0:	08004bdf 	.word	0x08004bdf
 80030e4:	08004be9 	.word	0x08004be9
 80030e8:	00000000 	.word	0x00000000
 80030ec:	08002e3d 	.word	0x08002e3d
 80030f0:	08004be5 	.word	0x08004be5

080030f4 <_printf_common>:
 80030f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f8:	4616      	mov	r6, r2
 80030fa:	4699      	mov	r9, r3
 80030fc:	688a      	ldr	r2, [r1, #8]
 80030fe:	690b      	ldr	r3, [r1, #16]
 8003100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003104:	4293      	cmp	r3, r2
 8003106:	bfb8      	it	lt
 8003108:	4613      	movlt	r3, r2
 800310a:	6033      	str	r3, [r6, #0]
 800310c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003110:	4607      	mov	r7, r0
 8003112:	460c      	mov	r4, r1
 8003114:	b10a      	cbz	r2, 800311a <_printf_common+0x26>
 8003116:	3301      	adds	r3, #1
 8003118:	6033      	str	r3, [r6, #0]
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	0699      	lsls	r1, r3, #26
 800311e:	bf42      	ittt	mi
 8003120:	6833      	ldrmi	r3, [r6, #0]
 8003122:	3302      	addmi	r3, #2
 8003124:	6033      	strmi	r3, [r6, #0]
 8003126:	6825      	ldr	r5, [r4, #0]
 8003128:	f015 0506 	ands.w	r5, r5, #6
 800312c:	d106      	bne.n	800313c <_printf_common+0x48>
 800312e:	f104 0a19 	add.w	sl, r4, #25
 8003132:	68e3      	ldr	r3, [r4, #12]
 8003134:	6832      	ldr	r2, [r6, #0]
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	42ab      	cmp	r3, r5
 800313a:	dc26      	bgt.n	800318a <_printf_common+0x96>
 800313c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003140:	1e13      	subs	r3, r2, #0
 8003142:	6822      	ldr	r2, [r4, #0]
 8003144:	bf18      	it	ne
 8003146:	2301      	movne	r3, #1
 8003148:	0692      	lsls	r2, r2, #26
 800314a:	d42b      	bmi.n	80031a4 <_printf_common+0xb0>
 800314c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003150:	4649      	mov	r1, r9
 8003152:	4638      	mov	r0, r7
 8003154:	47c0      	blx	r8
 8003156:	3001      	adds	r0, #1
 8003158:	d01e      	beq.n	8003198 <_printf_common+0xa4>
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	68e5      	ldr	r5, [r4, #12]
 800315e:	6832      	ldr	r2, [r6, #0]
 8003160:	f003 0306 	and.w	r3, r3, #6
 8003164:	2b04      	cmp	r3, #4
 8003166:	bf08      	it	eq
 8003168:	1aad      	subeq	r5, r5, r2
 800316a:	68a3      	ldr	r3, [r4, #8]
 800316c:	6922      	ldr	r2, [r4, #16]
 800316e:	bf0c      	ite	eq
 8003170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003174:	2500      	movne	r5, #0
 8003176:	4293      	cmp	r3, r2
 8003178:	bfc4      	itt	gt
 800317a:	1a9b      	subgt	r3, r3, r2
 800317c:	18ed      	addgt	r5, r5, r3
 800317e:	2600      	movs	r6, #0
 8003180:	341a      	adds	r4, #26
 8003182:	42b5      	cmp	r5, r6
 8003184:	d11a      	bne.n	80031bc <_printf_common+0xc8>
 8003186:	2000      	movs	r0, #0
 8003188:	e008      	b.n	800319c <_printf_common+0xa8>
 800318a:	2301      	movs	r3, #1
 800318c:	4652      	mov	r2, sl
 800318e:	4649      	mov	r1, r9
 8003190:	4638      	mov	r0, r7
 8003192:	47c0      	blx	r8
 8003194:	3001      	adds	r0, #1
 8003196:	d103      	bne.n	80031a0 <_printf_common+0xac>
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031a0:	3501      	adds	r5, #1
 80031a2:	e7c6      	b.n	8003132 <_printf_common+0x3e>
 80031a4:	18e1      	adds	r1, r4, r3
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	2030      	movs	r0, #48	; 0x30
 80031aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031ae:	4422      	add	r2, r4
 80031b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031b8:	3302      	adds	r3, #2
 80031ba:	e7c7      	b.n	800314c <_printf_common+0x58>
 80031bc:	2301      	movs	r3, #1
 80031be:	4622      	mov	r2, r4
 80031c0:	4649      	mov	r1, r9
 80031c2:	4638      	mov	r0, r7
 80031c4:	47c0      	blx	r8
 80031c6:	3001      	adds	r0, #1
 80031c8:	d0e6      	beq.n	8003198 <_printf_common+0xa4>
 80031ca:	3601      	adds	r6, #1
 80031cc:	e7d9      	b.n	8003182 <_printf_common+0x8e>
	...

080031d0 <_printf_i>:
 80031d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031d4:	460c      	mov	r4, r1
 80031d6:	4691      	mov	r9, r2
 80031d8:	7e27      	ldrb	r7, [r4, #24]
 80031da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80031dc:	2f78      	cmp	r7, #120	; 0x78
 80031de:	4680      	mov	r8, r0
 80031e0:	469a      	mov	sl, r3
 80031e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031e6:	d807      	bhi.n	80031f8 <_printf_i+0x28>
 80031e8:	2f62      	cmp	r7, #98	; 0x62
 80031ea:	d80a      	bhi.n	8003202 <_printf_i+0x32>
 80031ec:	2f00      	cmp	r7, #0
 80031ee:	f000 80d8 	beq.w	80033a2 <_printf_i+0x1d2>
 80031f2:	2f58      	cmp	r7, #88	; 0x58
 80031f4:	f000 80a3 	beq.w	800333e <_printf_i+0x16e>
 80031f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80031fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003200:	e03a      	b.n	8003278 <_printf_i+0xa8>
 8003202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003206:	2b15      	cmp	r3, #21
 8003208:	d8f6      	bhi.n	80031f8 <_printf_i+0x28>
 800320a:	a001      	add	r0, pc, #4	; (adr r0, 8003210 <_printf_i+0x40>)
 800320c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003210:	08003269 	.word	0x08003269
 8003214:	0800327d 	.word	0x0800327d
 8003218:	080031f9 	.word	0x080031f9
 800321c:	080031f9 	.word	0x080031f9
 8003220:	080031f9 	.word	0x080031f9
 8003224:	080031f9 	.word	0x080031f9
 8003228:	0800327d 	.word	0x0800327d
 800322c:	080031f9 	.word	0x080031f9
 8003230:	080031f9 	.word	0x080031f9
 8003234:	080031f9 	.word	0x080031f9
 8003238:	080031f9 	.word	0x080031f9
 800323c:	08003389 	.word	0x08003389
 8003240:	080032ad 	.word	0x080032ad
 8003244:	0800336b 	.word	0x0800336b
 8003248:	080031f9 	.word	0x080031f9
 800324c:	080031f9 	.word	0x080031f9
 8003250:	080033ab 	.word	0x080033ab
 8003254:	080031f9 	.word	0x080031f9
 8003258:	080032ad 	.word	0x080032ad
 800325c:	080031f9 	.word	0x080031f9
 8003260:	080031f9 	.word	0x080031f9
 8003264:	08003373 	.word	0x08003373
 8003268:	680b      	ldr	r3, [r1, #0]
 800326a:	1d1a      	adds	r2, r3, #4
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	600a      	str	r2, [r1, #0]
 8003270:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003278:	2301      	movs	r3, #1
 800327a:	e0a3      	b.n	80033c4 <_printf_i+0x1f4>
 800327c:	6825      	ldr	r5, [r4, #0]
 800327e:	6808      	ldr	r0, [r1, #0]
 8003280:	062e      	lsls	r6, r5, #24
 8003282:	f100 0304 	add.w	r3, r0, #4
 8003286:	d50a      	bpl.n	800329e <_printf_i+0xce>
 8003288:	6805      	ldr	r5, [r0, #0]
 800328a:	600b      	str	r3, [r1, #0]
 800328c:	2d00      	cmp	r5, #0
 800328e:	da03      	bge.n	8003298 <_printf_i+0xc8>
 8003290:	232d      	movs	r3, #45	; 0x2d
 8003292:	426d      	negs	r5, r5
 8003294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003298:	485e      	ldr	r0, [pc, #376]	; (8003414 <_printf_i+0x244>)
 800329a:	230a      	movs	r3, #10
 800329c:	e019      	b.n	80032d2 <_printf_i+0x102>
 800329e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80032a2:	6805      	ldr	r5, [r0, #0]
 80032a4:	600b      	str	r3, [r1, #0]
 80032a6:	bf18      	it	ne
 80032a8:	b22d      	sxthne	r5, r5
 80032aa:	e7ef      	b.n	800328c <_printf_i+0xbc>
 80032ac:	680b      	ldr	r3, [r1, #0]
 80032ae:	6825      	ldr	r5, [r4, #0]
 80032b0:	1d18      	adds	r0, r3, #4
 80032b2:	6008      	str	r0, [r1, #0]
 80032b4:	0628      	lsls	r0, r5, #24
 80032b6:	d501      	bpl.n	80032bc <_printf_i+0xec>
 80032b8:	681d      	ldr	r5, [r3, #0]
 80032ba:	e002      	b.n	80032c2 <_printf_i+0xf2>
 80032bc:	0669      	lsls	r1, r5, #25
 80032be:	d5fb      	bpl.n	80032b8 <_printf_i+0xe8>
 80032c0:	881d      	ldrh	r5, [r3, #0]
 80032c2:	4854      	ldr	r0, [pc, #336]	; (8003414 <_printf_i+0x244>)
 80032c4:	2f6f      	cmp	r7, #111	; 0x6f
 80032c6:	bf0c      	ite	eq
 80032c8:	2308      	moveq	r3, #8
 80032ca:	230a      	movne	r3, #10
 80032cc:	2100      	movs	r1, #0
 80032ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032d2:	6866      	ldr	r6, [r4, #4]
 80032d4:	60a6      	str	r6, [r4, #8]
 80032d6:	2e00      	cmp	r6, #0
 80032d8:	bfa2      	ittt	ge
 80032da:	6821      	ldrge	r1, [r4, #0]
 80032dc:	f021 0104 	bicge.w	r1, r1, #4
 80032e0:	6021      	strge	r1, [r4, #0]
 80032e2:	b90d      	cbnz	r5, 80032e8 <_printf_i+0x118>
 80032e4:	2e00      	cmp	r6, #0
 80032e6:	d04d      	beq.n	8003384 <_printf_i+0x1b4>
 80032e8:	4616      	mov	r6, r2
 80032ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80032ee:	fb03 5711 	mls	r7, r3, r1, r5
 80032f2:	5dc7      	ldrb	r7, [r0, r7]
 80032f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032f8:	462f      	mov	r7, r5
 80032fa:	42bb      	cmp	r3, r7
 80032fc:	460d      	mov	r5, r1
 80032fe:	d9f4      	bls.n	80032ea <_printf_i+0x11a>
 8003300:	2b08      	cmp	r3, #8
 8003302:	d10b      	bne.n	800331c <_printf_i+0x14c>
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	07df      	lsls	r7, r3, #31
 8003308:	d508      	bpl.n	800331c <_printf_i+0x14c>
 800330a:	6923      	ldr	r3, [r4, #16]
 800330c:	6861      	ldr	r1, [r4, #4]
 800330e:	4299      	cmp	r1, r3
 8003310:	bfde      	ittt	le
 8003312:	2330      	movle	r3, #48	; 0x30
 8003314:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003318:	f106 36ff 	addle.w	r6, r6, #4294967295
 800331c:	1b92      	subs	r2, r2, r6
 800331e:	6122      	str	r2, [r4, #16]
 8003320:	f8cd a000 	str.w	sl, [sp]
 8003324:	464b      	mov	r3, r9
 8003326:	aa03      	add	r2, sp, #12
 8003328:	4621      	mov	r1, r4
 800332a:	4640      	mov	r0, r8
 800332c:	f7ff fee2 	bl	80030f4 <_printf_common>
 8003330:	3001      	adds	r0, #1
 8003332:	d14c      	bne.n	80033ce <_printf_i+0x1fe>
 8003334:	f04f 30ff 	mov.w	r0, #4294967295
 8003338:	b004      	add	sp, #16
 800333a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800333e:	4835      	ldr	r0, [pc, #212]	; (8003414 <_printf_i+0x244>)
 8003340:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	680e      	ldr	r6, [r1, #0]
 8003348:	061f      	lsls	r7, r3, #24
 800334a:	f856 5b04 	ldr.w	r5, [r6], #4
 800334e:	600e      	str	r6, [r1, #0]
 8003350:	d514      	bpl.n	800337c <_printf_i+0x1ac>
 8003352:	07d9      	lsls	r1, r3, #31
 8003354:	bf44      	itt	mi
 8003356:	f043 0320 	orrmi.w	r3, r3, #32
 800335a:	6023      	strmi	r3, [r4, #0]
 800335c:	b91d      	cbnz	r5, 8003366 <_printf_i+0x196>
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	f023 0320 	bic.w	r3, r3, #32
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	2310      	movs	r3, #16
 8003368:	e7b0      	b.n	80032cc <_printf_i+0xfc>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	f043 0320 	orr.w	r3, r3, #32
 8003370:	6023      	str	r3, [r4, #0]
 8003372:	2378      	movs	r3, #120	; 0x78
 8003374:	4828      	ldr	r0, [pc, #160]	; (8003418 <_printf_i+0x248>)
 8003376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800337a:	e7e3      	b.n	8003344 <_printf_i+0x174>
 800337c:	065e      	lsls	r6, r3, #25
 800337e:	bf48      	it	mi
 8003380:	b2ad      	uxthmi	r5, r5
 8003382:	e7e6      	b.n	8003352 <_printf_i+0x182>
 8003384:	4616      	mov	r6, r2
 8003386:	e7bb      	b.n	8003300 <_printf_i+0x130>
 8003388:	680b      	ldr	r3, [r1, #0]
 800338a:	6826      	ldr	r6, [r4, #0]
 800338c:	6960      	ldr	r0, [r4, #20]
 800338e:	1d1d      	adds	r5, r3, #4
 8003390:	600d      	str	r5, [r1, #0]
 8003392:	0635      	lsls	r5, r6, #24
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	d501      	bpl.n	800339c <_printf_i+0x1cc>
 8003398:	6018      	str	r0, [r3, #0]
 800339a:	e002      	b.n	80033a2 <_printf_i+0x1d2>
 800339c:	0671      	lsls	r1, r6, #25
 800339e:	d5fb      	bpl.n	8003398 <_printf_i+0x1c8>
 80033a0:	8018      	strh	r0, [r3, #0]
 80033a2:	2300      	movs	r3, #0
 80033a4:	6123      	str	r3, [r4, #16]
 80033a6:	4616      	mov	r6, r2
 80033a8:	e7ba      	b.n	8003320 <_printf_i+0x150>
 80033aa:	680b      	ldr	r3, [r1, #0]
 80033ac:	1d1a      	adds	r2, r3, #4
 80033ae:	600a      	str	r2, [r1, #0]
 80033b0:	681e      	ldr	r6, [r3, #0]
 80033b2:	6862      	ldr	r2, [r4, #4]
 80033b4:	2100      	movs	r1, #0
 80033b6:	4630      	mov	r0, r6
 80033b8:	f7fc ff12 	bl	80001e0 <memchr>
 80033bc:	b108      	cbz	r0, 80033c2 <_printf_i+0x1f2>
 80033be:	1b80      	subs	r0, r0, r6
 80033c0:	6060      	str	r0, [r4, #4]
 80033c2:	6863      	ldr	r3, [r4, #4]
 80033c4:	6123      	str	r3, [r4, #16]
 80033c6:	2300      	movs	r3, #0
 80033c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033cc:	e7a8      	b.n	8003320 <_printf_i+0x150>
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	4632      	mov	r2, r6
 80033d2:	4649      	mov	r1, r9
 80033d4:	4640      	mov	r0, r8
 80033d6:	47d0      	blx	sl
 80033d8:	3001      	adds	r0, #1
 80033da:	d0ab      	beq.n	8003334 <_printf_i+0x164>
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	079b      	lsls	r3, r3, #30
 80033e0:	d413      	bmi.n	800340a <_printf_i+0x23a>
 80033e2:	68e0      	ldr	r0, [r4, #12]
 80033e4:	9b03      	ldr	r3, [sp, #12]
 80033e6:	4298      	cmp	r0, r3
 80033e8:	bfb8      	it	lt
 80033ea:	4618      	movlt	r0, r3
 80033ec:	e7a4      	b.n	8003338 <_printf_i+0x168>
 80033ee:	2301      	movs	r3, #1
 80033f0:	4632      	mov	r2, r6
 80033f2:	4649      	mov	r1, r9
 80033f4:	4640      	mov	r0, r8
 80033f6:	47d0      	blx	sl
 80033f8:	3001      	adds	r0, #1
 80033fa:	d09b      	beq.n	8003334 <_printf_i+0x164>
 80033fc:	3501      	adds	r5, #1
 80033fe:	68e3      	ldr	r3, [r4, #12]
 8003400:	9903      	ldr	r1, [sp, #12]
 8003402:	1a5b      	subs	r3, r3, r1
 8003404:	42ab      	cmp	r3, r5
 8003406:	dcf2      	bgt.n	80033ee <_printf_i+0x21e>
 8003408:	e7eb      	b.n	80033e2 <_printf_i+0x212>
 800340a:	2500      	movs	r5, #0
 800340c:	f104 0619 	add.w	r6, r4, #25
 8003410:	e7f5      	b.n	80033fe <_printf_i+0x22e>
 8003412:	bf00      	nop
 8003414:	08004bf0 	.word	0x08004bf0
 8003418:	08004c01 	.word	0x08004c01

0800341c <memcpy>:
 800341c:	440a      	add	r2, r1
 800341e:	4291      	cmp	r1, r2
 8003420:	f100 33ff 	add.w	r3, r0, #4294967295
 8003424:	d100      	bne.n	8003428 <memcpy+0xc>
 8003426:	4770      	bx	lr
 8003428:	b510      	push	{r4, lr}
 800342a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800342e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003432:	4291      	cmp	r1, r2
 8003434:	d1f9      	bne.n	800342a <memcpy+0xe>
 8003436:	bd10      	pop	{r4, pc}

08003438 <memmove>:
 8003438:	4288      	cmp	r0, r1
 800343a:	b510      	push	{r4, lr}
 800343c:	eb01 0402 	add.w	r4, r1, r2
 8003440:	d902      	bls.n	8003448 <memmove+0x10>
 8003442:	4284      	cmp	r4, r0
 8003444:	4623      	mov	r3, r4
 8003446:	d807      	bhi.n	8003458 <memmove+0x20>
 8003448:	1e43      	subs	r3, r0, #1
 800344a:	42a1      	cmp	r1, r4
 800344c:	d008      	beq.n	8003460 <memmove+0x28>
 800344e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003456:	e7f8      	b.n	800344a <memmove+0x12>
 8003458:	4402      	add	r2, r0
 800345a:	4601      	mov	r1, r0
 800345c:	428a      	cmp	r2, r1
 800345e:	d100      	bne.n	8003462 <memmove+0x2a>
 8003460:	bd10      	pop	{r4, pc}
 8003462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800346a:	e7f7      	b.n	800345c <memmove+0x24>

0800346c <_free_r>:
 800346c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800346e:	2900      	cmp	r1, #0
 8003470:	d048      	beq.n	8003504 <_free_r+0x98>
 8003472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003476:	9001      	str	r0, [sp, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f1a1 0404 	sub.w	r4, r1, #4
 800347e:	bfb8      	it	lt
 8003480:	18e4      	addlt	r4, r4, r3
 8003482:	f000 f8d3 	bl	800362c <__malloc_lock>
 8003486:	4a20      	ldr	r2, [pc, #128]	; (8003508 <_free_r+0x9c>)
 8003488:	9801      	ldr	r0, [sp, #4]
 800348a:	6813      	ldr	r3, [r2, #0]
 800348c:	4615      	mov	r5, r2
 800348e:	b933      	cbnz	r3, 800349e <_free_r+0x32>
 8003490:	6063      	str	r3, [r4, #4]
 8003492:	6014      	str	r4, [r2, #0]
 8003494:	b003      	add	sp, #12
 8003496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800349a:	f000 b8cd 	b.w	8003638 <__malloc_unlock>
 800349e:	42a3      	cmp	r3, r4
 80034a0:	d90b      	bls.n	80034ba <_free_r+0x4e>
 80034a2:	6821      	ldr	r1, [r4, #0]
 80034a4:	1862      	adds	r2, r4, r1
 80034a6:	4293      	cmp	r3, r2
 80034a8:	bf04      	itt	eq
 80034aa:	681a      	ldreq	r2, [r3, #0]
 80034ac:	685b      	ldreq	r3, [r3, #4]
 80034ae:	6063      	str	r3, [r4, #4]
 80034b0:	bf04      	itt	eq
 80034b2:	1852      	addeq	r2, r2, r1
 80034b4:	6022      	streq	r2, [r4, #0]
 80034b6:	602c      	str	r4, [r5, #0]
 80034b8:	e7ec      	b.n	8003494 <_free_r+0x28>
 80034ba:	461a      	mov	r2, r3
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	b10b      	cbz	r3, 80034c4 <_free_r+0x58>
 80034c0:	42a3      	cmp	r3, r4
 80034c2:	d9fa      	bls.n	80034ba <_free_r+0x4e>
 80034c4:	6811      	ldr	r1, [r2, #0]
 80034c6:	1855      	adds	r5, r2, r1
 80034c8:	42a5      	cmp	r5, r4
 80034ca:	d10b      	bne.n	80034e4 <_free_r+0x78>
 80034cc:	6824      	ldr	r4, [r4, #0]
 80034ce:	4421      	add	r1, r4
 80034d0:	1854      	adds	r4, r2, r1
 80034d2:	42a3      	cmp	r3, r4
 80034d4:	6011      	str	r1, [r2, #0]
 80034d6:	d1dd      	bne.n	8003494 <_free_r+0x28>
 80034d8:	681c      	ldr	r4, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	6053      	str	r3, [r2, #4]
 80034de:	4421      	add	r1, r4
 80034e0:	6011      	str	r1, [r2, #0]
 80034e2:	e7d7      	b.n	8003494 <_free_r+0x28>
 80034e4:	d902      	bls.n	80034ec <_free_r+0x80>
 80034e6:	230c      	movs	r3, #12
 80034e8:	6003      	str	r3, [r0, #0]
 80034ea:	e7d3      	b.n	8003494 <_free_r+0x28>
 80034ec:	6825      	ldr	r5, [r4, #0]
 80034ee:	1961      	adds	r1, r4, r5
 80034f0:	428b      	cmp	r3, r1
 80034f2:	bf04      	itt	eq
 80034f4:	6819      	ldreq	r1, [r3, #0]
 80034f6:	685b      	ldreq	r3, [r3, #4]
 80034f8:	6063      	str	r3, [r4, #4]
 80034fa:	bf04      	itt	eq
 80034fc:	1949      	addeq	r1, r1, r5
 80034fe:	6021      	streq	r1, [r4, #0]
 8003500:	6054      	str	r4, [r2, #4]
 8003502:	e7c7      	b.n	8003494 <_free_r+0x28>
 8003504:	b003      	add	sp, #12
 8003506:	bd30      	pop	{r4, r5, pc}
 8003508:	200000bc 	.word	0x200000bc

0800350c <_malloc_r>:
 800350c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350e:	1ccd      	adds	r5, r1, #3
 8003510:	f025 0503 	bic.w	r5, r5, #3
 8003514:	3508      	adds	r5, #8
 8003516:	2d0c      	cmp	r5, #12
 8003518:	bf38      	it	cc
 800351a:	250c      	movcc	r5, #12
 800351c:	2d00      	cmp	r5, #0
 800351e:	4606      	mov	r6, r0
 8003520:	db01      	blt.n	8003526 <_malloc_r+0x1a>
 8003522:	42a9      	cmp	r1, r5
 8003524:	d903      	bls.n	800352e <_malloc_r+0x22>
 8003526:	230c      	movs	r3, #12
 8003528:	6033      	str	r3, [r6, #0]
 800352a:	2000      	movs	r0, #0
 800352c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800352e:	f000 f87d 	bl	800362c <__malloc_lock>
 8003532:	4921      	ldr	r1, [pc, #132]	; (80035b8 <_malloc_r+0xac>)
 8003534:	680a      	ldr	r2, [r1, #0]
 8003536:	4614      	mov	r4, r2
 8003538:	b99c      	cbnz	r4, 8003562 <_malloc_r+0x56>
 800353a:	4f20      	ldr	r7, [pc, #128]	; (80035bc <_malloc_r+0xb0>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	b923      	cbnz	r3, 800354a <_malloc_r+0x3e>
 8003540:	4621      	mov	r1, r4
 8003542:	4630      	mov	r0, r6
 8003544:	f000 f862 	bl	800360c <_sbrk_r>
 8003548:	6038      	str	r0, [r7, #0]
 800354a:	4629      	mov	r1, r5
 800354c:	4630      	mov	r0, r6
 800354e:	f000 f85d 	bl	800360c <_sbrk_r>
 8003552:	1c43      	adds	r3, r0, #1
 8003554:	d123      	bne.n	800359e <_malloc_r+0x92>
 8003556:	230c      	movs	r3, #12
 8003558:	6033      	str	r3, [r6, #0]
 800355a:	4630      	mov	r0, r6
 800355c:	f000 f86c 	bl	8003638 <__malloc_unlock>
 8003560:	e7e3      	b.n	800352a <_malloc_r+0x1e>
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	1b5b      	subs	r3, r3, r5
 8003566:	d417      	bmi.n	8003598 <_malloc_r+0x8c>
 8003568:	2b0b      	cmp	r3, #11
 800356a:	d903      	bls.n	8003574 <_malloc_r+0x68>
 800356c:	6023      	str	r3, [r4, #0]
 800356e:	441c      	add	r4, r3
 8003570:	6025      	str	r5, [r4, #0]
 8003572:	e004      	b.n	800357e <_malloc_r+0x72>
 8003574:	6863      	ldr	r3, [r4, #4]
 8003576:	42a2      	cmp	r2, r4
 8003578:	bf0c      	ite	eq
 800357a:	600b      	streq	r3, [r1, #0]
 800357c:	6053      	strne	r3, [r2, #4]
 800357e:	4630      	mov	r0, r6
 8003580:	f000 f85a 	bl	8003638 <__malloc_unlock>
 8003584:	f104 000b 	add.w	r0, r4, #11
 8003588:	1d23      	adds	r3, r4, #4
 800358a:	f020 0007 	bic.w	r0, r0, #7
 800358e:	1ac2      	subs	r2, r0, r3
 8003590:	d0cc      	beq.n	800352c <_malloc_r+0x20>
 8003592:	1a1b      	subs	r3, r3, r0
 8003594:	50a3      	str	r3, [r4, r2]
 8003596:	e7c9      	b.n	800352c <_malloc_r+0x20>
 8003598:	4622      	mov	r2, r4
 800359a:	6864      	ldr	r4, [r4, #4]
 800359c:	e7cc      	b.n	8003538 <_malloc_r+0x2c>
 800359e:	1cc4      	adds	r4, r0, #3
 80035a0:	f024 0403 	bic.w	r4, r4, #3
 80035a4:	42a0      	cmp	r0, r4
 80035a6:	d0e3      	beq.n	8003570 <_malloc_r+0x64>
 80035a8:	1a21      	subs	r1, r4, r0
 80035aa:	4630      	mov	r0, r6
 80035ac:	f000 f82e 	bl	800360c <_sbrk_r>
 80035b0:	3001      	adds	r0, #1
 80035b2:	d1dd      	bne.n	8003570 <_malloc_r+0x64>
 80035b4:	e7cf      	b.n	8003556 <_malloc_r+0x4a>
 80035b6:	bf00      	nop
 80035b8:	200000bc 	.word	0x200000bc
 80035bc:	200000c0 	.word	0x200000c0

080035c0 <_realloc_r>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	4607      	mov	r7, r0
 80035c4:	4614      	mov	r4, r2
 80035c6:	460e      	mov	r6, r1
 80035c8:	b921      	cbnz	r1, 80035d4 <_realloc_r+0x14>
 80035ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035ce:	4611      	mov	r1, r2
 80035d0:	f7ff bf9c 	b.w	800350c <_malloc_r>
 80035d4:	b922      	cbnz	r2, 80035e0 <_realloc_r+0x20>
 80035d6:	f7ff ff49 	bl	800346c <_free_r>
 80035da:	4625      	mov	r5, r4
 80035dc:	4628      	mov	r0, r5
 80035de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e0:	f000 f830 	bl	8003644 <_malloc_usable_size_r>
 80035e4:	42a0      	cmp	r0, r4
 80035e6:	d20f      	bcs.n	8003608 <_realloc_r+0x48>
 80035e8:	4621      	mov	r1, r4
 80035ea:	4638      	mov	r0, r7
 80035ec:	f7ff ff8e 	bl	800350c <_malloc_r>
 80035f0:	4605      	mov	r5, r0
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d0f2      	beq.n	80035dc <_realloc_r+0x1c>
 80035f6:	4631      	mov	r1, r6
 80035f8:	4622      	mov	r2, r4
 80035fa:	f7ff ff0f 	bl	800341c <memcpy>
 80035fe:	4631      	mov	r1, r6
 8003600:	4638      	mov	r0, r7
 8003602:	f7ff ff33 	bl	800346c <_free_r>
 8003606:	e7e9      	b.n	80035dc <_realloc_r+0x1c>
 8003608:	4635      	mov	r5, r6
 800360a:	e7e7      	b.n	80035dc <_realloc_r+0x1c>

0800360c <_sbrk_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	4d06      	ldr	r5, [pc, #24]	; (8003628 <_sbrk_r+0x1c>)
 8003610:	2300      	movs	r3, #0
 8003612:	4604      	mov	r4, r0
 8003614:	4608      	mov	r0, r1
 8003616:	602b      	str	r3, [r5, #0]
 8003618:	f7fd fbd4 	bl	8000dc4 <_sbrk>
 800361c:	1c43      	adds	r3, r0, #1
 800361e:	d102      	bne.n	8003626 <_sbrk_r+0x1a>
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	b103      	cbz	r3, 8003626 <_sbrk_r+0x1a>
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	bd38      	pop	{r3, r4, r5, pc}
 8003628:	200001d4 	.word	0x200001d4

0800362c <__malloc_lock>:
 800362c:	4801      	ldr	r0, [pc, #4]	; (8003634 <__malloc_lock+0x8>)
 800362e:	f000 b811 	b.w	8003654 <__retarget_lock_acquire_recursive>
 8003632:	bf00      	nop
 8003634:	200001dc 	.word	0x200001dc

08003638 <__malloc_unlock>:
 8003638:	4801      	ldr	r0, [pc, #4]	; (8003640 <__malloc_unlock+0x8>)
 800363a:	f000 b80c 	b.w	8003656 <__retarget_lock_release_recursive>
 800363e:	bf00      	nop
 8003640:	200001dc 	.word	0x200001dc

08003644 <_malloc_usable_size_r>:
 8003644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003648:	1f18      	subs	r0, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	bfbc      	itt	lt
 800364e:	580b      	ldrlt	r3, [r1, r0]
 8003650:	18c0      	addlt	r0, r0, r3
 8003652:	4770      	bx	lr

08003654 <__retarget_lock_acquire_recursive>:
 8003654:	4770      	bx	lr

08003656 <__retarget_lock_release_recursive>:
 8003656:	4770      	bx	lr

08003658 <_init>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr

08003664 <_fini>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr
